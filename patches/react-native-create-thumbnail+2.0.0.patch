diff --git a/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m b/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
index 7c6879e..af28008 100644
--- a/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
+++ b/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
@@ -1,4 +1,5 @@
 #import "CreateThumbnail.h"
+#import <AVFoundation/AVFoundation.h>
 
 @implementation CreateThumbnail
 
@@ -6,7 +7,20 @@ RCT_EXPORT_MODULE()
 
 RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
 {
-    NSString *url = (NSString *)[config objectForKey:@"url"] ?: @"";
+    // Validate that 'config' is a dictionary
+    if (![config isKindOfClass:[NSDictionary class]]) {
+        reject(@"invalid_config", @"The config parameter is not a dictionary.", nil);
+        return; // Exit if 'config' is not a dictionary
+    }
+
+    NSString *url = (NSString *)[config objectForKey:@"url"];
+    // Validate that the URL is a string
+    if (![url isKindOfClass:[NSString class]]) {
+        NSLog(@"Received URL: %@", url); // Log the received URL for debugging
+        reject(@"invalid_url", @"The URL provided is not a string.", nil);
+        return; // Exit the method if the URL is invalid
+    }
+
     int timeStamp = [[config objectForKey:@"timeStamp"] intValue] ?: 0;
     NSString *format = (NSString *)[config objectForKey:@"format"] ?: @"jpeg";
     int dirSize = [[config objectForKey:@"dirSize"] intValue] ?: 100;
@@ -17,72 +31,56 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
 
     @try {
         // Prepare cache folder
-        NSString* tempDirectory = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
-        tempDirectory = [tempDirectory stringByAppendingString:@"/thumbnails/"];
-        // Create thumbnail directory if not exists
+        NSString *tempDirectory = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
+        tempDirectory = [tempDirectory stringByAppendingPathComponent:@"thumbnails/"];
+        // Create thumbnail directory if it does not exist
         [[NSFileManager defaultManager] createDirectoryAtPath:tempDirectory withIntermediateDirectories:YES attributes:nil error:nil];
-        NSString *fileName = [NSString stringWithFormat:@"thumb-%@.%@", cacheName ?: [[NSProcessInfo processInfo] globallyUniqueString], format];
-        NSString* fullPath = [tempDirectory stringByAppendingPathComponent:fileName];
-        if ([[NSFileManager defaultManager] fileExistsAtPath:fullPath]) {
-            NSData *imageData = [NSData dataWithContentsOfURL:[NSURL fileURLWithPath:fullPath]];
-            UIImage *thumbnail = [UIImage imageWithData:imageData];
-            resolve(@{
-                @"path"     : fullPath,
-                @"size"     : [NSNumber numberWithFloat: imageData.length],
-                @"mime"     : [NSString stringWithFormat: @"image/%@", format],
-                @"width"    : [NSNumber numberWithFloat: thumbnail.size.width],
-                @"height"   : [NSNumber numberWithFloat: thumbnail.size.height]
-            });
-            return;
-        }
 
-        NSURL *vidURL = nil;
+        // URL lowercase processing
         NSString *url_ = [url lowercaseString];
-
+        NSURL *vidURL = nil;
         if ([url_ hasPrefix:@"http://"] || [url_ hasPrefix:@"https://"] || [url_ hasPrefix:@"file://"]) {
             vidURL = [NSURL URLWithString:url];
         } else {
-            // Consider it's file url path 
+            // Assume it's a file path
             vidURL = [NSURL fileURLWithPath:url];
         }
 
-        AVURLAsset *asset = [[AVURLAsset alloc] initWithURL:vidURL options:@{@"AVURLAssetHTTPHeaderFieldsKey": headers}];
-        [self generateThumbImage:asset atTime:timeStamp completion:^(UIImage *thumbnail) {
+        // Create AVURLAsset and generate thumbnail
+        AVURLAsset *asset = [[AVURLAsset alloc] initWithURL:vidURL options:@{ @"AVURLAssetHTTPHeaderFieldsKey": headers }];
+        [self generateThumbImage:asset atTime:timeStamp completion:^(NSString *thumbnailPath) {
             // Clean directory
             unsigned long long size = [self sizeOfFolderAtPath:tempDirectory];
             if (size >= cacheDirSize) {
                 [self cleanDir:tempDirectory forSpace:cacheDirSize / 2];
             }
 
-            // Generate thumbnail
-            NSData *data = nil;
-            if ([format isEqual: @"png"]) {
-                data = UIImagePNGRepresentation(thumbnail);
+            // Retrieve data from the saved thumbnail file
+            NSData *data = [NSData dataWithContentsOfFile:thumbnailPath];
+            if (data) {
+                UIImage *thumbnail = [UIImage imageWithData:data];
+
+                resolve(@{
+                    @"path": thumbnailPath,
+                    @"size": @(data.length),
+                    @"mime": [NSString stringWithFormat:@"image/%@", format],
+                    @"width": @(thumbnail.size.width),
+                    @"height": @(thumbnail.size.height)
+                });
             } else {
-                data = UIImageJPEGRepresentation(thumbnail, 1.0);
+                reject(@"thumbnail_read_failed", @"Failed to read thumbnail data", nil);
             }
-
-            NSFileManager *fileManager = [NSFileManager defaultManager];
-            [fileManager createFileAtPath:fullPath contents:data attributes:nil];
-            resolve(@{
-                @"path"     : fullPath,
-                @"size"     : [NSNumber numberWithFloat: data.length],
-                @"mime"     : [NSString stringWithFormat: @"image/%@", format],
-                @"width"    : [NSNumber numberWithFloat: thumbnail.size.width],
-                @"height"   : [NSNumber numberWithFloat: thumbnail.size.height]
-            });
         } failure:^(NSError *error) {
-            reject(error.domain, error.description, nil);
+            reject(error.domain, error.localizedDescription, nil);
         }];
 
-        
-        
     } @catch(NSException *e) {
         reject(e.name, e.reason, nil);
     }
 }
 
-- (unsigned long long) sizeOfFolderAtPath:(NSString *)path {
+
+- (unsigned long long)sizeOfFolderAtPath:(NSString *)path {
     NSArray *files = [[NSFileManager defaultManager] subpathsOfDirectoryAtPath:path error:nil];
     NSEnumerator *enumerator = [files objectEnumerator];
     NSString *fileName;
@@ -93,13 +91,13 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
     return size;
 }
 
-- (void) cleanDir:(NSString *)path forSpace:(unsigned long long)size {
+- (void)cleanDir:(NSString *)path forSpace:(unsigned long long)size {
     NSFileManager *fm = [NSFileManager defaultManager];
     NSError *error = nil;
     unsigned long long deletedSize = 0;
     for (NSString *file in [fm contentsOfDirectoryAtPath:path error:&error]) {
         unsigned long long fileSize = [[[NSFileManager defaultManager] attributesOfItemAtPath:[path stringByAppendingPathComponent:file] error:nil] fileSize];
-        BOOL success = [fm removeItemAtPath:[NSString stringWithFormat:@"%@%@", path, file] error:&error];
+        BOOL success = [fm removeItemAtPath:[path stringByAppendingPathComponent:file] error:&error];
         if (success) {
             deletedSize += fileSize;
         }
@@ -107,25 +105,37 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
             break;
         }
     }
-    return;
 }
 
-- (void) generateThumbImage:(AVURLAsset *)asset atTime:(int)timeStamp completion:(void (^)(UIImage* thumbnail))completion failure:(void (^)(NSError* error))failure {
+- (void)generateThumbImage:(AVURLAsset *)asset atTime:(int)timeStamp completion:(void (^)(NSString *thumbnailPath))completion failure:(void (^)(NSError *error))failure {
     AVAssetImageGenerator *generator = [[AVAssetImageGenerator alloc] initWithAsset:asset];
     generator.appliesPreferredTrackTransform = YES;
     generator.maximumSize = CGSizeMake(512, 512);
-    generator.requestedTimeToleranceBefore = CMTimeMake(0, 1000);
-    generator.requestedTimeToleranceAfter = CMTimeMake(0, 1000);
-    CMTime time = CMTimeMake(timeStamp, 1000);
-    AVAssetImageGeneratorCompletionHandler handler = ^(CMTime timeRequested, CGImageRef image, CMTime timeActual, AVAssetImageGeneratorResult result, NSError *error) {
+    
+    CMTime time = CMTimeMake(timeStamp, 1000); // Time in seconds
+    [generator generateCGImagesAsynchronouslyForTimes:@[[NSValue valueWithCMTime:time]] completionHandler:^(CMTime requestedTime, CGImageRef image, CMTime actualTime, AVAssetImageGeneratorResult result, NSError *error) {
         if (result == AVAssetImageGeneratorSucceeded) {
             UIImage *thumbnail = [UIImage imageWithCGImage:image];
-            completion(thumbnail);
+
+            // Save the thumbnail to the cache directory
+            NSString *fileName = [NSString stringWithFormat:@"thumb-%@.jpeg", [[NSProcessInfo processInfo] globallyUniqueString]];
+            
+            // Create the cache directory if it does not exist
+            NSString *tempDirectory = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
+            tempDirectory = [tempDirectory stringByAppendingPathComponent:@"thumbnails/"];
+            [[NSFileManager defaultManager] createDirectoryAtPath:tempDirectory withIntermediateDirectories:YES attributes:nil error:nil];
+
+            // Now set the thumbnailPath
+            NSString *thumbnailPath = [tempDirectory stringByAppendingPathComponent:fileName]; // Use the cache directory
+
+            NSData *data = UIImageJPEGRepresentation(thumbnail, 1.0);
+            [data writeToFile:thumbnailPath atomically:YES];
+
+            completion(thumbnailPath);
         } else {
             failure(error);
         }
-    };
-    [generator generateCGImagesAsynchronouslyForTimes:[NSArray arrayWithObject:[NSValue valueWithCMTime:time]] completionHandler:handler];
+    }];
 }
 
 @end

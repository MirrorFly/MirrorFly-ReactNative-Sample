diff --git a/node_modules/react-native-create-thumbnail/android/src/main/java/com/createthumbnail/CreateThumbnailModule.java b/node_modules/react-native-create-thumbnail/android/src/main/java/com/createthumbnail/CreateThumbnailModule.java
index d6a1f5d..5ebd003 100644
--- a/node_modules/react-native-create-thumbnail/android/src/main/java/com/createthumbnail/CreateThumbnailModule.java
+++ b/node_modules/react-native-create-thumbnail/android/src/main/java/com/createthumbnail/CreateThumbnailModule.java
@@ -91,6 +91,7 @@ public class CreateThumbnailModule extends ReactContextBaseJavaModule {
             int timeStamp = options.hasKey("timeStamp") ? options.getInt("timeStamp") : 0;
             int maxWidth = options.hasKey("maxWidth") ? options.getInt("maxWidth") : 512;
             int maxHeight = options.hasKey("maxHeight") ? options.getInt("maxHeight") : 512;
+            int quality = options.hasKey("quality") ? options.getInt("quality") : 100;
             boolean onlySyncedFrames = options.hasKey("onlySyncedFrames") ? options.getBoolean("onlySyncedFrames") : true;
             HashMap headers = options.hasKey("headers") ? options.getMap("headers").toHashMap() : new HashMap<String, String>();
             String fileName = TextUtils.isEmpty(cacheName) ? ("thumb-" + UUID.randomUUID().toString()) : cacheName + "." + format;
@@ -106,7 +107,7 @@ public class CreateThumbnailModule extends ReactContextBaseJavaModule {
                 if (format.equals("png")) {
                     image.compress(Bitmap.CompressFormat.PNG, 100, fOut);
                 } else {
-                    image.compress(Bitmap.CompressFormat.JPEG, 90, fOut);
+                    image.compress(Bitmap.CompressFormat.JPEG, quality, fOut);
                 }
 
                 fOut.flush();
diff --git a/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m b/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
index 4c87cfa..6f0f637 100644
--- a/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
+++ b/node_modules/react-native-create-thumbnail/ios/CreateThumbnail.m
@@ -12,8 +12,9 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
     int dirSize = [[config objectForKey:@"dirSize"] intValue] ?: 100;
     NSString *cacheName = (NSString *)[config objectForKey:@"cacheName"];
     NSDictionary *headers = config[@"headers"] ?: @{};
-    CGFloat maxWidth = [config[@"maxWidth"] floatValue] ?: 512;
-    CGFloat maxHeight = [config[@"maxHeight"] floatValue] ?: 512;
+    CGFloat maxWidth = [config[@"maxWidth"] floatValue] ?: 512; // Default width
+    CGFloat maxHeight = [config[@"maxHeight"] floatValue] ?: 512; // Default height
+    CGFloat quality = [config[@"quality"] floatValue] ?: 1.0; // Default to highest quality
     int timeToleranceMs = [config[@"timeToleranceMs"] intValue] ?: 2000;
 
     unsigned long long cacheDirSize = dirSize * 1024 * 1024;
@@ -59,9 +60,9 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
             // Generate thumbnail
             NSData *data = nil;
             if ([format isEqual: @"png"]) {
-                data = UIImagePNGRepresentation(thumbnail);
+                data = UIImagePNGRepresentation(thumbnail); // PNG has no adjustable compression
             } else {
-                data = UIImageJPEGRepresentation(thumbnail, 1.0);
+                data = UIImageJPEGRepresentation(thumbnail, quality); // Adjust quality for JPEG
             }
 
             NSFileManager *fileManager = [NSFileManager defaultManager];
@@ -79,13 +80,8 @@ RCT_EXPORT_METHOD(create:(NSDictionary *)config findEventsWithResolver:(RCTPromi
             reject(error.domain, error.description, nil);
         };
         
-        if ([url_ hasPrefix:@"http://"] || [url_ hasPrefix:@"https://"]) {
-            AVURLAsset *asset = [[AVURLAsset alloc] initWithURL:vidURL options:@{@"AVURLAssetHTTPHeaderFieldsKey": headers}];
-            [self generateThumbImage:asset atTime:timeStamp maxWidth:maxWidth maxHeight:maxHeight timeToleranceMs:timeToleranceMs completion:completionBlock failure:failBlock];
-        } else {
-            AVAsset *asset = [AVAsset assetWithURL:vidURL];
-            [self generateLocalMediaThumbImage:asset atTime:timeStamp completion:completionBlock failure:failBlock];
-        }
+        AVURLAsset *asset = [AVURLAsset assetWithURL:vidURL];
+        [self generateThumbImage:asset atTime:timeStamp maxWidth:maxWidth maxHeight:maxHeight timeToleranceMs:timeToleranceMs completion:completionBlock failure:failBlock];
         
     } @catch(NSException *e) {
         reject(e.name, e.reason, nil);
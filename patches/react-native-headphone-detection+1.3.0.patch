diff --git a/node_modules/react-native-headphone-detection/android/src/main/java/com/tintef/RNHeadphoneDetection/RNHeadphoneDetectionModule.java b/node_modules/react-native-headphone-detection/android/src/main/java/com/tintef/RNHeadphoneDetection/RNHeadphoneDetectionModule.java
index fe8c926..e6223af 100644
--- a/node_modules/react-native-headphone-detection/android/src/main/java/com/tintef/RNHeadphoneDetection/RNHeadphoneDetectionModule.java
+++ b/node_modules/react-native-headphone-detection/android/src/main/java/com/tintef/RNHeadphoneDetection/RNHeadphoneDetectionModule.java
@@ -19,145 +19,168 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.Build;
+import android.content.pm.PackageManager;
 import android.media.AudioDeviceInfo;
 import android.media.AudioManager;
+import android.Manifest;
 import android.bluetooth.BluetoothAdapter;
-import android.bluetooth.BluetoothDevice;
+import android.bluetooth.BluetoothHeadset;
+import android.bluetooth.BluetoothManager;
+import android.bluetooth.BluetoothProfile;
+
+import androidx.core.app.ActivityCompat;
 
 public class RNHeadphoneDetectionModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
-  private static final String MODULE_NAME = "RNHeadphoneDetection";
-  private static final String AUDIO_DEVICE_CHANGED_NOTIFICATION = "AUDIO_DEVICE_CHANGED_NOTIFICATION";
+    private static final String MODULE_NAME = "RNHeadphoneDetection";
+    private static final String AUDIO_DEVICE_CHANGED_NOTIFICATION = "AUDIO_DEVICE_CHANGED_NOTIFICATION";
 
-  private BroadcastReceiver receiver;
+    private BroadcastReceiver receiver;
 
-  public RNHeadphoneDetectionModule(ReactApplicationContext reactContext) {
-    super(reactContext);
-  }
+    public RNHeadphoneDetectionModule(ReactApplicationContext reactContext) {
+        super(reactContext);
+    }
 
-  @Override
-  public String getName() {
-    return MODULE_NAME;
-  }
+    @Override
+    public String getName() {
+        return MODULE_NAME;
+    }
 
-  private void maybeRegisterReceiver() {
-    final ReactApplicationContext reactContext = getReactApplicationContext();
+    private void maybeRegisterReceiver() {
+        final ReactApplicationContext reactContext = getReactApplicationContext();
 
-    if (receiver != null) {
-      return;
-    }
+        if (receiver != null) {
+            return;
+        }
 
-    receiver = new BroadcastReceiver() {
-      @Override
-      public void onReceive(Context context, Intent intent) {
-        String action = intent.getAction();
-        WritableMap res = isAudioDeviceConnected();
-
-        switch (action) {
-          case BluetoothDevice.ACTION_ACL_CONNECTED:
-            res.putBoolean("bluetooth", true);
-            break;
-          case BluetoothDevice.ACTION_ACL_DISCONNECTED:
-            res.putBoolean("bluetooth", false);
-            break;
-          default:
-            break;
+        receiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                String action = intent.getAction();
+                WritableMap res = isAudioDeviceConnected();
+
+                switch (action) {
+                    case BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED:
+                    case BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED:
+                        final int state = intent.getIntExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_DISCONNECTED);
+                        if (state == BluetoothProfile.STATE_CONNECTED) {
+                            // Device has connected, report it
+                            res.putBoolean("bluetooth", true);
+                            break;
+                        } else if (state == BluetoothProfile.STATE_DISCONNECTED) {
+                            // Device has disconnected, report it
+                            res.putBoolean("bluetooth", false);
+                            break;
+                        }
+                        break;
+                    default:
+                        break;
+                }
+
+                sendEvent(reactContext, AUDIO_DEVICE_CHANGED_NOTIFICATION, res);
+            }
+        };
+
+        reactContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_HEADSET_PLUG));
+        reactContext.registerReceiver(receiver, new IntentFilter(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED));
+        reactContext.registerReceiver(receiver, new IntentFilter(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED));
+        reactContext.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            reactContext.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.EXTRA_STATE), Context.RECEIVER_NOT_EXPORTED);
         }
+    }
 
-        sendEvent(reactContext, AUDIO_DEVICE_CHANGED_NOTIFICATION, res);
-      }
-    };
+    private void maybeUnregisterReceiver() {
+        if (receiver == null) {
+            return;
+        }
+        getReactApplicationContext().unregisterReceiver(receiver);
+        receiver = null;
+    }
 
-    reactContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_HEADSET_PLUG));
-    reactContext.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
-    reactContext.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.EXTRA_STATE));
-    reactContext.registerReceiver(receiver, new IntentFilter(BluetoothDevice.ACTION_ACL_CONNECTED));
-    reactContext.registerReceiver(receiver, new IntentFilter(BluetoothDevice.ACTION_ACL_DISCONNECTED));
-  }
+    @Override
+    public Map<String, Object> getConstants() {
+        final Map<String, Object> constants = new HashMap<>();
 
-  private void maybeUnregisterReceiver() {
-    if (receiver == null) {
-      return;
+        constants.put(AUDIO_DEVICE_CHANGED_NOTIFICATION, AUDIO_DEVICE_CHANGED_NOTIFICATION);
+        return constants;
     }
-    getReactApplicationContext().unregisterReceiver(receiver);
-    receiver = null;
-  }
-
-  @Override
-  public Map<String, Object> getConstants() {
-    final Map<String, Object> constants = new HashMap<>();
-
-    constants.put(AUDIO_DEVICE_CHANGED_NOTIFICATION, AUDIO_DEVICE_CHANGED_NOTIFICATION);
-    return constants;
-  }
-
-  private WritableMap isAudioDeviceConnected() {
-    final Map<String, Boolean> res = new HashMap<>();
-    AudioManager audioManager = (AudioManager) getReactApplicationContext().getSystemService(Context.AUDIO_SERVICE);
-
-    res.put("audioJack", false);
-    res.put("bluetooth", false);
-
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      res.put("audioJack", audioManager.isWiredHeadsetOn());
-      res.put("bluetooth", audioManager.isBluetoothA2dpOn() || audioManager.isBluetoothScoOn());
-    } else {
-      AudioDeviceInfo[] devices = audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);
-      for (int i = 0; i < devices.length; i++) {
-        AudioDeviceInfo device = devices[i];
-        if (
-          device.getType() == AudioDeviceInfo.TYPE_WIRED_HEADPHONES ||
-          device.getType() == AudioDeviceInfo.TYPE_WIRED_HEADSET ||
-          device.getType() == AudioDeviceInfo.TYPE_USB_HEADSET
-        ) {
-          res.put("audioJack", true);
-        }
 
-        if (
-          device.getType() == AudioDeviceInfo.TYPE_BLUETOOTH_A2DP ||
-          device.getType() == AudioDeviceInfo.TYPE_BLUETOOTH_SCO
-        ) {
-          res.put("bluetooth", true);
+    private WritableMap isAudioDeviceConnected() {
+        final ReactApplicationContext reactContext = getReactApplicationContext();
+        final Map<String, Boolean> res = new HashMap<>();
+        AudioManager audioManager = (AudioManager) getReactApplicationContext().getSystemService(Context.AUDIO_SERVICE);
+
+        res.put("audioJack", false);
+        res.put("bluetooth", false);
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            res.put("audioJack", audioManager.isWiredHeadsetOn());
+            res.put("bluetooth", audioManager.isBluetoothA2dpOn() || audioManager.isBluetoothScoOn());
+        } else {
+            AudioDeviceInfo[] devices = audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);
+
+            // Check if the bluetooth is connected or disconnected
+            BluetoothManager bluetoothManager = (BluetoothManager) reactContext
+                    .getSystemService(Context.BLUETOOTH_SERVICE);
+            BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();
+
+            for (AudioDeviceInfo device : devices) {
+                if (device.getType() == AudioDeviceInfo.TYPE_WIRED_HEADPHONES ||
+                        device.getType() == AudioDeviceInfo.TYPE_WIRED_HEADSET ||
+                        device.getType() == AudioDeviceInfo.TYPE_USB_HEADSET) {
+                    res.put("audioJack", true);
+                }
+                if (device.getType() == AudioDeviceInfo.TYPE_BLUETOOTH_A2DP ||
+                        device.getType() == AudioDeviceInfo.TYPE_BLUETOOTH_SCO) {
+                    if (ActivityCompat.checkSelfPermission(reactContext,
+                            Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
+                        res.put("bluetooth", false);
+                    }
+                    int connectionState = bluetoothAdapter.getProfileConnectionState(BluetoothProfile.HEADSET);
+                    if (connectionState == BluetoothProfile.STATE_CONNECTED
+                            || connectionState == BluetoothProfile.STATE_CONNECTING) {
+                        res.put("bluetooth", true);
+                    }
+                }
+            }
         }
-      }
+        WritableMap map = new WritableNativeMap();
+        for (Map.Entry<String, Boolean> entry : res.entrySet()) {
+            map.putBoolean(entry.getKey(), entry.getValue());
+        }
+        return map;
+    }
+
+    private void sendEvent(ReactApplicationContext reactContext, String eventName, @Nullable WritableMap params) {
+        reactContext
+                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
+                .emit(eventName, params);
+    }
+
+    @ReactMethod
+    public void isAudioDeviceConnected(final Promise promise) {
+        promise.resolve(isAudioDeviceConnected());
+    }
+
+    @Override
+    public void initialize() {
+        getReactApplicationContext().addLifecycleEventListener(this);
+
+        maybeRegisterReceiver();
+    }
+
+    @Override
+    public void onHostResume() {
+        maybeRegisterReceiver();
+    }
+
+    @Override
+    public void onHostPause() {
+        maybeUnregisterReceiver();
     }
 
-    WritableMap map = new WritableNativeMap();
-    for (Map.Entry<String, Boolean> entry : res.entrySet()) {
-        map.putBoolean(entry.getKey(), entry.getValue());
+    @Override
+    public void onHostDestroy() {
+        maybeUnregisterReceiver();
     }
-    return map;
-  }
-
-  private void sendEvent(ReactApplicationContext reactContext, String eventName, @Nullable WritableMap params) {
-    reactContext
-        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-        .emit(eventName, params);
-  }
-
-  @ReactMethod
-  public void isAudioDeviceConnected(final Promise promise) {
-      promise.resolve(isAudioDeviceConnected());
-  }
-
-  @Override
-  public void initialize() {
-    getReactApplicationContext().addLifecycleEventListener(this);
-
-    maybeRegisterReceiver();
-  }
-
-  @Override
-  public void onHostResume() {
-    maybeRegisterReceiver();
-  }
-
-  @Override
-  public void onHostPause() {
-    maybeUnregisterReceiver();
-  }
-
-  @Override
-  public void onHostDestroy() {
-    maybeUnregisterReceiver();
-  }
 }
diff --git a/node_modules/react-native-headphone-detection/ios/RNHeadphoneDetection.m b/node_modules/react-native-headphone-detection/ios/RNHeadphoneDetection.m
index b02301e..9ba899e 100644
--- a/node_modules/react-native-headphone-detection/ios/RNHeadphoneDetection.m
+++ b/node_modules/react-native-headphone-detection/ios/RNHeadphoneDetection.m
@@ -82,17 +82,20 @@ static NSString * const IS_AUDIO_DEVICE_CONNECTED = @"isAudioDeviceConnected";
                                 mutableCopy
                                 ];
 
-    AVAudioSessionRouteDescription* route = [[AVAudioSession sharedInstance] currentRoute];
+    NSArray<AVAudioSessionPortDescription *>* outputs = [[AVAudioSession sharedInstance] availableInputs];
+    NSLog(@"[Headphones::] isAudioDeviceConnected method called %@", outputs);
 
-    for (AVAudioSessionPortDescription* desc in [route outputs]) {
-        if ([[desc portType] isEqualToString:AVAudioSessionPortHeadphones]) {
+    for (AVAudioSessionPortDescription* desc in outputs) {
+        NSLog(@"[Headphones::]Description port type %@", [desc portType]);
+        if (desc.portType == AVAudioSessionPortHeadphones ||  desc.portType == AVAudioSessionPortHeadsetMic || [desc.portType  isEqual: @"MicrophoneWired"]) {
             res[@"audioJack"] = @YES;
         }
 
         if (
             [[desc portType] isEqualToString:AVAudioSessionPortBluetoothA2DP] ||
             [[desc portType] isEqualToString:AVAudioSessionPortBluetoothHFP] ||
-            [[desc portType] isEqualToString:AVAudioSessionPortBluetoothLE]
+            [[desc portType] isEqualToString:AVAudioSessionPortBluetoothLE] ||
+            [[desc portType] isEqualToString:AVAudioSessionPortCarAudio]
             ) {
             res[@"bluetooth"] = @YES;
         }

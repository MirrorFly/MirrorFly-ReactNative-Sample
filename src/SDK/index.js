(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react-native"), require("@react-native-async-storage/async-storage"), require("react-native-fs"), require("react-native-webrtc"), require("realm"), require("moment"), require("react-native-compressor"), require("react-native-convert-ph-asset"), require("react-native-mov-to-mp4"), require("react-native-create-thumbnail"), require("react-native-get-random-values"), require("@react-native-community/netinfo"), require("react-native-background-timer"));
	else if(typeof define === 'function' && define.amd)
		define("SDK", ["react-native", "@react-native-async-storage/async-storage", "react-native-fs", "react-native-webrtc", "realm", "moment", "react-native-compressor", "react-native-convert-ph-asset", "react-native-mov-to-mp4", "react-native-create-thumbnail", "react-native-get-random-values", "@react-native-community/netinfo", "react-native-background-timer"], factory);
	else if(typeof exports === 'object')
		exports["SDK"] = factory(require("react-native"), require("@react-native-async-storage/async-storage"), require("react-native-fs"), require("react-native-webrtc"), require("realm"), require("moment"), require("react-native-compressor"), require("react-native-convert-ph-asset"), require("react-native-mov-to-mp4"), require("react-native-create-thumbnail"), require("react-native-get-random-values"), require("@react-native-community/netinfo"), require("react-native-background-timer"));
	else
		root["SDK"] = factory(root["react-native"], root["@react-native-async-storage/async-storage"], root["react-native-fs"], root["react-native-webrtc"], root["realm"], root["moment"], root["react-native-compressor"], root["react-native-convert-ph-asset"], root["react-native-mov-to-mp4"], root["react-native-create-thumbnail"], root["react-native-get-random-values"], root["@react-native-community/netinfo"], root["react-native-background-timer"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_167__, __WEBPACK_EXTERNAL_MODULE_314__, __WEBPACK_EXTERNAL_MODULE_380__, __WEBPACK_EXTERNAL_MODULE_381__, __WEBPACK_EXTERNAL_MODULE_382__, __WEBPACK_EXTERNAL_MODULE_383__, __WEBPACK_EXTERNAL_MODULE_384__, __WEBPACK_EXTERNAL_MODULE_389__, __WEBPACK_EXTERNAL_MODULE_391__, __WEBPACK_EXTERNAL_MODULE_392__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 201);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["n"] = getExtension;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CryptLib__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_profile__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__db_controllers_messageTable__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__db_controllers_vcardTable__ = __webpack_require__(29);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// migration Done (09-12-21) - (10-12-21)

// import QRCode from "qrcode";











const randomBuffer = new Uint32Array(1);
let refreshInterval = 0;

const getRandomNumber = () => {
  crypto.getRandomValues(randomBuffer);
  return randomBuffer[0] / (0xffffffff + 1);
};
/* harmony export (immutable) */ __webpack_exports__["s"] = getRandomNumber;


const encryptMsg = (messageJson, messageId) => {
  const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(messageId, 32);
  return __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].encrypt(encodeURIComponent(messageJson), key, Object(__WEBPACK_IMPORTED_MODULE_3__common__["k" /* getIv */])());
};
/* harmony export (immutable) */ __webpack_exports__["i"] = encryptMsg;


const getHashSha256 = messageId => {
  return __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(messageId, 32);
};
/* harmony export (immutable) */ __webpack_exports__["q"] = getHashSha256;


const deryptCheck = (oldmsgcontent, messageId) => {
  const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(messageId, 32);
  console.log(oldmsgcontent, 'decryptMsg oldmsgcontent');
  console.log(key, 'decryptMsg key');
  console.log(Object(__WEBPACK_IMPORTED_MODULE_3__common__["k" /* getIv */])(), 'decryptMsg getIv');
};
/* unused harmony export deryptCheck */


const decryptMsg = (oldmsgcontent, messageId, iv = '') => {
  const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(messageId, 32);
  return decodeURIComponent(__WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].decrypt(oldmsgcontent, key, Object(__WEBPACK_IMPORTED_MODULE_3__common__["k" /* getIv */])() || iv));
};
/* harmony export (immutable) */ __webpack_exports__["f"] = decryptMsg;


const generateUUID = () => {
  let d = new Date().getTime();
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
    const r = (d + getRandomNumber() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
};
/* unused harmony export generateUUID */


const decryptProfileDetails = (data, encryptKey) => {
  try {
    const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(encryptKey, 32);
    return decodeURIComponent(__WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].decrypt(data, key, Object(__WEBPACK_IMPORTED_MODULE_3__common__["l" /* getIvProfile */])()));
  } catch (error) {
    return data;
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = decryptProfileDetails;


const randomString = (length, chars, UUID = true) => {
  if (UUID) return generateUUID();
  let mask = '',
      result = '';
  const id = '';
  if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
  if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  if (chars.indexOf('#') > -1) mask += 'ABCDEFGHIJKLMNopqrstuvwxyz';
  if (chars.indexOf('!') > -1) mask += 'abcdefghijklmnOPQRSTUVWXYZ';
  for (let i = length; i > 0; --i) {
    result += mask[Math.round(getRandomNumber() * (mask.length - 1))];
  }
  return 'id' + id + result;
};
/* harmony export (immutable) */ __webpack_exports__["x"] = randomString;


const successResponse = message => ({
  statusCode: 200,
  message: message || __WEBPACK_IMPORTED_MODULE_1__constants__["_56" /* SUCCESS */]
});
/* harmony export (immutable) */ __webpack_exports__["B"] = successResponse;


const errorResponse = (errorMessage, statusCode = 500) => ({
  statusCode,
  message: errorMessage
});
/* harmony export (immutable) */ __webpack_exports__["j"] = errorResponse;


const connectionErrorResponse = errorMessage => ({
  statusCode: 500,
  message: errorMessage || __WEBPACK_IMPORTED_MODULE_1__constants__["v" /* CONNECTION_ERROR */]
});
/* harmony export (immutable) */ __webpack_exports__["b"] = connectionErrorResponse;


const timeoutErrorResponse = errorMessage => ({
  statusCode: 504,
  message: errorMessage || __WEBPACK_IMPORTED_MODULE_1__constants__["_58" /* TIMEOUT_ERROR */]
});
/* harmony export (immutable) */ __webpack_exports__["C"] = timeoutErrorResponse;


const validationErrorResponse = errorMessage => ({
  statusCode: 400,
  message: errorMessage || __WEBPACK_IMPORTED_MODULE_1__constants__["_75" /* VALIDATION_ERROR */]
});
/* harmony export (immutable) */ __webpack_exports__["D"] = validationErrorResponse;


const customResponse = (statusCode, customMessage) => ({
  statusCode: statusCode,
  message: customMessage
});
/* harmony export (immutable) */ __webpack_exports__["c"] = customResponse;


const setUserToken = newUserToken => Object(__WEBPACK_IMPORTED_MODULE_2__localDb__["g" /* setToken */])(newUserToken);
/* harmony export (immutable) */ __webpack_exports__["z"] = setUserToken;


const getUserToken = () => Object(__WEBPACK_IMPORTED_MODULE_2__localDb__["c" /* getToken */])();
/* harmony export (immutable) */ __webpack_exports__["v"] = getUserToken;


/**
 * Finds the child element with attribute name
 * @param {any} source
 * @param {any} name
 */
const findXML = (source, name) => {
  for (const key in source) {
    if (source[key]) {
      const item = source[key];
      if (item && item.tagName && item.tagName === name) return item;
      if (item && item.childNodes) {
        const subresult = findXML(item.childNodes, name);
        if (subresult) return subresult;
      }
    }
  }
  return null;
};
/* harmony export (immutable) */ __webpack_exports__["l"] = findXML;


/**
 * Converts xml elements to json
 * @param {xml} xml
 */
const xml2json = xml => {
  try {
    let obj = {};
    if (xml && xml.children && xml.children.length > 0) {
      for (let i = 0; i < xml.children.length; i++) {
        const item = xml.children.item(i);
        const nodeName = item.nodeName;

        if (typeof obj[nodeName] === 'undefined') {
          obj[nodeName] = xml2json(item);
        } else {
          if (typeof obj[nodeName].push === 'undefined') {
            const old = obj[nodeName];
            obj[nodeName] = [];
            obj[nodeName].push(old);
          }
          obj[nodeName].push(xml2json(item));
        }
      }
    } else if (xml && xml.childNodes && xml.childNodes.length > 0) {
      for (let i = 0; i < xml.childNodes.length; i++) {
        const item = xml.childNodes[i];
        const nodeName = item.nodeName,
              nodeValue = item.nodeValue;

        if (nodeName === '#text' && (nodeValue !== undefined || nodeValue !== null)) {
          // ignoring text node to be and object {#text: "value"} instead of just "value"
          obj = xml.textContent;
          continue;
        }
        if (typeof obj[nodeName] === 'undefined') {
          obj[nodeName] = xml2json(item);
        } else {
          if (typeof obj[nodeName].push === 'undefined') {
            const old = obj[nodeName];
            obj[nodeName] = [];
            obj[nodeName].push(old);
          }
          obj[nodeName].push(xml2json(item));
        }
      }
    } else obj = xml.textContent;
    return obj;
  } catch (e) {
    console.log(e.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["E"] = xml2json;


const tagsToReplace = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};

const replaceTag = tag => tagsToReplace[tag] || tag;

const stripTags = dirtyString => {
  const escapedStr = dirtyString;
  return escapedStr;
  // const container = document.createElement("div"),
  //   text = document.createTextNode(dirtyString);
  // container.appendChild(text);
  // // InnerHTML will be a xss safe string
  // return container.innerHTML;
};
/* harmony export (immutable) */ __webpack_exports__["A"] = stripTags;


/**
 * Generates Thumbnail For Images
 * @param {any} file
 * @param {any} fileType
 * @param {any} fileExtension
 * @returns {String} Thumb Image URL
 */
// export const generateImageThumbnail = (file, fileType, fileExtension, fileOptions) =>
// new Promise((resolve) => {
//   try {
//     const img = new Image(),
//       reader = new window.FileReader();

//     reader.onload = (e) => {
//       let imageData = e.target.result;
//       img.src = imageData;
//       img.onload = () => {
//         const { width, height } = img;
//         const imageType = `${fileType}/${fileExtension}`;
//         const canvas = document.createElement("canvas");
//         canvas.width = MIN_THUMB_WIDTH;
//         canvas.height = (height / width) * MIN_THUMB_WIDTH;
//         const context = canvas.getContext("2d");
//         context.drawImage(img, 0, 0, MIN_THUMB_WIDTH, (height / width) * MIN_THUMB_WIDTH);
//         imageData = canvas.toDataURL(imageType, IMAGE_THUMB_QUALITY);
//         const thumb = imageData.replace(/^data:image\/\w+;base64,/, "");
//         resolve(thumb);
//       };
//     };
//     reader.readAsDataURL(file);
//   } catch (error) {
//     resolve("");
//   }
// });

/**
 * Gets Media Duration for Video/Audio
 * @param {any} file
 */
// export const getMediaDuration = (file) =>
//   new Promise((resolve) => {
//     try {
//       const reader = new window.FileReader();
//       reader.onload = () => {
//         const media = new Audio(reader.result);
//         media.onloadedmetadata = () => {
//           resolve(Math.round(media.duration * 1000));
//         };
//       };
//       reader.readAsDataURL(file);
//     } catch (error) {
//       console.log("error :>> ", error);
//       resolve(0);
//     }
//   });

// export const generateVideoThumbnail = async (file, fileOptions) =>
//   new Promise((resolve) => {
//     try {
//       const fileReader = new window.FileReader();
//       fileReader.onload = () => {
//         const blob = new Blob([fileReader.result], { type: file.type });
//         const url = URL.createObjectURL(blob);
//         const video = document.createElement("video");

//         video.addEventListener("loadeddata", () => {
//           const width = video.videoWidth;
//           const height = video.videoHeight;
//           const canvas = document.createElement("canvas");
//           canvas.width = MIN_THUMB_WIDTH;
//           canvas.height = (height / width) * MIN_THUMB_WIDTH;
//           const context = canvas.getContext("2d");
//           context.drawImage(video, 0, 0, MIN_THUMB_WIDTH, (height / width) * MIN_THUMB_WIDTH);
//           const image = canvas.toDataURL();
//           const thumb = image.replace(/^data:image\/\w+;base64,/, "");
//           resolve(thumb);
//         });
//         video.preload = "metadata";
//         video.src = url;
//         video.muted = true;
//         video.play();
//       };
//       fileReader.readAsArrayBuffer(file);
//     } catch (error) {
//       console.log("error :>> ", error);
//       resolve("");
//     }
//   });

const customValiadtionMediaMessage = (toJid = '', msgType = '', fileOptions = {}) => {
  const validation = [{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_2" /* JID_REQUIRED */]
  }, {
    key: 'msgType',
    value: msgType,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_24" /* MSGTYPES_REQUIRED */]
  }, {
    key: 'fileOptions',
    value: fileOptions,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_42" /* OBJECT_REQUIRED */]
  }, {
    key: 'fileOptions.fileName',
    value: fileOptions.fileName,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_50" /* REQUIRED */]
  }, {
    key: 'fileOptions.fileURL',
    value: fileOptions.fileURL,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_50" /* REQUIRED */]
  }, {
    key: 'fileOptions.fileSize',
    value: fileOptions.fileSize,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_41" /* NUMBER_REQUIRED */]
  }];

  // Audio & Video Message Should Have Duration
  (msgType === __WEBPACK_IMPORTED_MODULE_1__constants__["i" /* AUDIO */] || msgType === __WEBPACK_IMPORTED_MODULE_1__constants__["_76" /* VIDEO */]) && validation.push({
    key: 'fileOptions.duration',
    value: fileOptions.duration,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_50" /* REQUIRED */]
  });

  // Video Message Should Have Thumbnail Image
  msgType === __WEBPACK_IMPORTED_MODULE_1__constants__["_76" /* VIDEO */] && validation.push({
    key: 'fileOptions.thumbImg',
    value: fileOptions.thumbImg,
    rules: __WEBPACK_IMPORTED_MODULE_1__constants__["_50" /* REQUIRED */]
  });

  return Object(__WEBPACK_IMPORTED_MODULE_3__common__["b" /* clientSideValidation */])(validation);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = customValiadtionMediaMessage;


// export const browserFinder = () => {
//   const nAgt = navigator.userAgent;
//   let browserName = navigator.appName;
//   let fullVersion = String(parseFloat(navigator.appVersion));
//   let nameOffset, verOffset, ix;

//   // In Opera 15+, the true version is after "OPR/"
//   if ((verOffset = nAgt.indexOf("OPR/")) !== -1) {
//     browserName = "Opera";
//     fullVersion = nAgt.substring(verOffset + 4);
//   }
//   // In Edge, the true version is after "Edge"
//   else if ((verOffset = nAgt.indexOf("Edge")) !== -1) {
//     browserName = "Microsoft Edge";
//     fullVersion = nAgt.substring(verOffset + 8);
//   } else if ((verOffset = nAgt.indexOf("Edg")) !== -1) {
//     browserName = "Microsoft Edge";
//     fullVersion = nAgt.substring(verOffset + 5);
//   }
//   // In older Opera, the true version is after "Opera" or after "Version"
//   else if ((verOffset = nAgt.indexOf("Opera")) !== -1) {
//     browserName = "Opera";
//     fullVersion = nAgt.substring(verOffset + 6);
//     if ((verOffset = nAgt.indexOf("Version")) !== -1) fullVersion = nAgt.substring(verOffset + 8);
//   }
//   // In MSIE, the true version is after "MSIE" in userAgent
//   else if ((verOffset = nAgt.indexOf("MSIE")) !== -1) {
//     browserName = "Microsoft Internet Explorer";
//     fullVersion = nAgt.substring(verOffset + 5);
//   }
//   // In Chrome, the true version is after "Chrome"
//   else if ((verOffset = nAgt.indexOf("Chrome")) !== -1) {
//     browserName = "Chrome";
//     fullVersion = nAgt.substring(verOffset + 7);
//   }
//   // In Safari, the true version is after "Safari" or after "Version"
//   else if ((verOffset = nAgt.indexOf("Safari")) !== -1) {
//     browserName = "Safari";
//     fullVersion = nAgt.substring(verOffset + 7);
//     if ((verOffset = nAgt.indexOf("Version")) !== -1) fullVersion = nAgt.substring(verOffset + 8);
//   }
//   // In Firefox, the true version is after "Firefox"
//   else if ((verOffset = nAgt.indexOf("Firefox")) !== -1) {
//     browserName = "Firefox";
//     fullVersion = nAgt.substring(verOffset + 8);
//   }
//   // In most other browsers, "name/version" is at the end of userAgent
//   else if ((nameOffset = nAgt.lastIndexOf(" ") + 1) < (verOffset = nAgt.lastIndexOf("/"))) {
//     browserName = nAgt.substring(nameOffset, verOffset);
//     fullVersion = nAgt.substring(verOffset + 1);
//     if (browserName.toLowerCase() === browserName.toUpperCase()) {
//       browserName = navigator.appName;
//     }
//   }
//   // trim the fullVersion string at semicolon/space if present
//   if ((ix = fullVersion.indexOf(";")) !== -1) fullVersion = fullVersion.substring(0, ix);
//   if ((ix = fullVersion.indexOf(" ")) !== -1) fullVersion = fullVersion.substring(0, ix);

//   return browserName + " " + fullVersion;
// };

/**
 * Handle to remove the array of object for given array data by using attribute
 * @param {*} arr - Array data to remove object
 * @param {*} attr - Match attribute to reomve
 * @param {*} value - Match value for given attribute
 */
const removeArrayObjectByAttr = (arr, attr, value) => {
  if (!arr || !Array.isArray(arr) || !attr || typeof value === 'undefined') return arr;
  const arrLength = arr.length;
  for (let i = 0; i < arrLength; i++) {
    if (arr[i] && arr[i].hasOwnProperty(attr) && value && arr[i][attr] === value) {
      arr.splice(i, 1);
    }
  }
  return arr;
};
/* harmony export (immutable) */ __webpack_exports__["y"] = removeArrayObjectByAttr;


const parseJwt = token => {
  const tokeData = token.split('.');

  var _tokeData = _slicedToArray(tokeData, 2);

  const base64Url = _tokeData[1];

  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
  const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));

  return JSON.parse(jsonPayload);
};
/* unused harmony export parseJwt */


/**
 * Handles Auto Refresh Token. Interval will be Started Whenever New Token is Fetched, and
 * new Token Will be Fetched and Updated before Expiry
 * @param {string} token - New JWT Token
 */
const autoRefreshToken = token => {
  clearInterval(refreshInterval);

  refreshInterval = setInterval(async () => {
    const parsedJwt = parseJwt(token);
    const expiryTime = parsedJwt.exp + __WEBPACK_IMPORTED_MODULE_1__constants__["_60" /* TOKEN_EXPIRY_TIME */];
    const currentTime = new Date().getTime() / 1000;

    if (currentTime > expiryTime) {
      clearInterval(refreshInterval);
      refreshInterval = 0;
      const credentials = Object(__WEBPACK_IMPORTED_MODULE_3__common__["g" /* getCredentials */])();
      await Object(__WEBPACK_IMPORTED_MODULE_4__modules_profile__["j" /* getUserToken */])(credentials.username, credentials.password);
    }
  }, __WEBPACK_IMPORTED_MODULE_1__constants__["_59" /* TOKEN_EXPIRY_INTERVAL */]);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = autoRefreshToken;


const getFileTokenFromMsgBody = msgBody => msgBody && msgBody.media && msgBody.media.file_url ? msgBody.media.file_url : '';
/* harmony export (immutable) */ __webpack_exports__["o"] = getFileTokenFromMsgBody;


function getExtension(name) {
  if (!name) return '';
  const lastDot = name.lastIndexOf('.');
  return name.substring(lastDot + 0);
}

const getGroupMessageStatus = (msgBody, publisherJid, userJid) => {
  let profileUpdatedStatus = '';
  switch (msgBody) {
    case '1':
      profileUpdatedStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* GROUP_CREATED */];
      break;

    case '2':
      profileUpdatedStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["_69" /* USER_ADDED */];
      break;

    case '3':
      profileUpdatedStatus = publisherJid === userJid ? __WEBPACK_IMPORTED_MODULE_1__constants__["_73" /* USER_LEFT */] : __WEBPACK_IMPORTED_MODULE_1__constants__["_74" /* USER_REMOVED */];
      break;

    case '4':
      profileUpdatedStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["_44" /* PROFILE_UPDATED */];
      break;

    case '5':
      profileUpdatedStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["_7" /* MADE_ADMIN */];
      break;

    default:
      break;
  }
  return profileUpdatedStatus;
};
/* harmony export (immutable) */ __webpack_exports__["p"] = getGroupMessageStatus;


// export const updateQrCode = (socketId, divId, logoId) => {
//   const qrData = {
//     token: socketId,
//     browser: browserFinder(),
//     platform: navigator.platform
//   };

//   const options = {
//     errorCorrectionLevel: "H",
//     type: "image/jpeg",
//     quality: 0.3,
//     margin: 1,
//     width: 240
//   };
//   const encryptedData = encryptMsg(JSON.stringify(qrData), getEncryptLicenseKey());

//   QRCode.toCanvas(divId, encryptedData, options, (error) => {
//     if (error) console.error(error);
//     const imgDim = { width: 50, height: 50 };
//     const context = divId.getContext("2d");
//     const imageObj = new Image();
//     imageObj.src = logoId.src;
//     imageObj.onload = function () {
//       context.drawImage(
//         imageObj,
//         divId.width / 2 - imgDim.width / 2,
//         divId.height / 2 - imgDim.height / 2,
//         imgDim.width,
//         imgDim.height
//       );
//     };
//     return true;
//   });
// };

const getUserIdFromJid = userJid => userJid.includes('@') ? userJid.split('@')[0] : userJid;
/* harmony export (immutable) */ __webpack_exports__["u"] = getUserIdFromJid;


const isSingleChat = chatType => chatType === __WEBPACK_IMPORTED_MODULE_1__constants__["q" /* CHAT */];
/* unused harmony export isSingleChat */


const isGroupChat = chatType => chatType === __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* GROUPCHAT */];
/* unused harmony export isGroupChat */


const formatUserIdToJid = (userId, chatType = __WEBPACK_IMPORTED_MODULE_1__constants__["q" /* CHAT */]) => {
  if (!userId || userId.includes(`${Object(__WEBPACK_IMPORTED_MODULE_5__strophe_connection__["e" /* getServer */])()}`)) return userId;
  return isSingleChat(chatType) ? `${userId}@${Object(__WEBPACK_IMPORTED_MODULE_5__strophe_connection__["e" /* getServer */])()}` : `${userId}@mix.${Object(__WEBPACK_IMPORTED_MODULE_5__strophe_connection__["e" /* getServer */])()}`;
};
/* harmony export (immutable) */ __webpack_exports__["m"] = formatUserIdToJid;


const encryptAPIData = (data, encryptKey) => {
  try {
    const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(encryptKey, 32);
    return __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].encrypt(encodeURIComponent(data), key, __WEBPACK_IMPORTED_MODULE_1__constants__["f" /* APIIV */]);
  } catch (error) {
    return data;
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = encryptAPIData;


const decryptAPIData = (data, encryptKey) => {
  try {
    const key = __WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].getHashSha256(encryptKey, 32);
    return decodeURIComponent(__WEBPACK_IMPORTED_MODULE_0__CryptLib__["a" /* default */].decrypt(data, key, __WEBPACK_IMPORTED_MODULE_1__constants__["f" /* APIIV */]));
  } catch (error) {
    console.log('decryptAPIData', error);
    return data;
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = decryptAPIData;


const getUTCTimestamp = () => {
  const date = new Date();
  return date.getTime() + date.getTimezoneOffset() * 60 * 1000;
};
/* harmony export (immutable) */ __webpack_exports__["t"] = getUTCTimestamp;


/**
 * Generates Thumbnail For Images
 * @param {any} file
 * @param {any} fileType
 * @param {any} fileExtension
 * @returns {String} Thumb Image URL
 */
const generateImageThumbnail = (file, fileExtension) => new Promise(resolve => {
  try {
    const img = new Image(),
          reader = new window.FileReader();

    reader.onload = e => {
      let imageData = e.target.result;
      img.src = imageData;
      img.onload = () => {
        const width = img.width;
        const height = img.height;
        const imageType = `image/${fileExtension}`;
        const canvas = document.createElement('canvas');
        canvas.width = __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIN_THUMB_WIDTH */];
        canvas.height = height / width * __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIN_THUMB_WIDTH */];
        const context = canvas.getContext('2d');
        context.drawImage(img, 0, 0, __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIN_THUMB_WIDTH */], height / width * __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIN_THUMB_WIDTH */]);
        imageData = canvas.toDataURL(imageType, __WEBPACK_IMPORTED_MODULE_1__constants__["V" /* IMAGE_THUMB_QUALITY */]);
        const thumb = imageData.replace(/^data:image\/\w+;base64,/, '');
        resolve(thumb);
      };
    };
    reader.readAsDataURL(file);
  } catch (error) {
    resolve('');
  }
});
/* unused harmony export generateImageThumbnail */


const inRange = (x, min, max) => (x - min) * (x - max) <= 0;
/* harmony export (immutable) */ __webpack_exports__["w"] = inRange;


const getNotifyMessageConstructor = async (receiveObj, iv) => {
  try {
    const messages = receiveObj.messages,
          totalRecords = receiveObj.totalRecords;
    var _receiveObj$vcardDeta = receiveObj.vcardDetails;
    const username = _receiveObj$vcardDeta.username,
          lusername = _receiveObj$vcardDeta.lusername,
          fn = _receiveObj$vcardDeta.fn,
          lfn = _receiveObj$vcardDeta.lfn,
          family = _receiveObj$vcardDeta.family,
          lfamily = _receiveObj$vcardDeta.lfamily,
          given = _receiveObj$vcardDeta.given,
          lgiven = _receiveObj$vcardDeta.lgiven,
          middle = _receiveObj$vcardDeta.middle,
          lmiddle = _receiveObj$vcardDeta.lmiddle,
          nickname = _receiveObj$vcardDeta.nickname,
          lnickname = _receiveObj$vcardDeta.lnickname,
          bday = _receiveObj$vcardDeta.bday,
          lbday = _receiveObj$vcardDeta.lbday,
          ctry = _receiveObj$vcardDeta.ctry,
          lctry = _receiveObj$vcardDeta.lctry,
          locality = _receiveObj$vcardDeta.locality,
          llocality = _receiveObj$vcardDeta.llocality,
          email = _receiveObj$vcardDeta.email,
          lemail = _receiveObj$vcardDeta.lemail,
          image = _receiveObj$vcardDeta.image,
          limage = _receiveObj$vcardDeta.limage,
          thumbimage = _receiveObj$vcardDeta.thumbimage,
          lthumbimage = _receiveObj$vcardDeta.lthumbimage,
          vcardDetailsStatus = _receiveObj$vcardDeta.status,
          lstatus = _receiveObj$vcardDeta.lstatus,
          mobilenumber = _receiveObj$vcardDeta.mobilenumber,
          lmobilenumber = _receiveObj$vcardDeta.lmobilenumber,
          orgname = _receiveObj$vcardDeta.orgname,
          lorgname = _receiveObj$vcardDeta.lorgname,
          orgunit = _receiveObj$vcardDeta.orgunit,
          lorgunit = _receiveObj$vcardDeta.lorgunit,
          isBlock = _receiveObj$vcardDeta.isBlock,
          error = receiveObj.error,
          messageFrom = receiveObj.messageFrom,
          messageTo = receiveObj.messageTo,
          chatType = receiveObj.chatType,
          sentFrom = receiveObj.sentFrom,
          messageTime = receiveObj.messageTime,
          messageId = receiveObj.messageId,
          messageContent = receiveObj.messageContent,
          status = receiveObj.status,
          metaData = receiveObj.metaData,
          offline = receiveObj.offline,
          carbon = receiveObj.carbon,
          topicId = receiveObj.topicId;

    let _msgBody = JSON.parse(decryptMsg(messageContent, messageId, iv));
    let successRes = successResponse();
    successRes.data = {
      type: 'receiveMessage',
      createdAt: Object(__WEBPACK_IMPORTED_MODULE_6__db_Utils__["a" /* changeTimeFormat */])(messageTime),
      chatType,
      favouriteBy: '',
      favouriteStatus: 0,
      deleteStatus: 0,
      fromUserId: getUserIdFromJid(messageFrom),
      fromUserJid: messageFrom,
      publisherJid: messageFrom,
      publisherId: getUserIdFromJid(messageFrom),
      timestamp: messageTime,
      msgId: messageId,
      msgStatus: status,
      msgBody: _msgBody,
      profileDetails: await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_vcardTable__["a" /* getVcardDetial */])(messageFrom)
    };
    Object(__WEBPACK_IMPORTED_MODULE_7__db_controllers_messageTable__["g" /* handleCreateIncomingMsg */])(successRes.data);
    return successRes;
  } catch (error) {
    console.log('getNotifyMessageConstructor', error);
    return errorResponse(error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["r"] = getNotifyMessageConstructor;


const fileObjConstructor = (obj, type) => {
  try {
    let fileObj = {
      extension: '',
      type: '',
      modificationTimestamp: Date.now(),
      uri: '',
      fileSize: 0,
      width: 0,
      height: 0,
      filename: '',
      duration: 0
    };
    let fileOptionsObj = {},
        replyToMsgId = '';
    if (type === 'foundMsg') {
      const fromUserJid = obj.fromUserJid,
            _msgId = obj.msgId,
            msgType = obj.msgType,
            profileUpdatedStatus = obj.profileUpdatedStatus,
            publisherId = obj.publisherId,
            publisherJid = obj.publisherJid,
            userId = obj.userId,
            userJid = obj.userJid;
      var _obj$msgBody = obj.msgBody;
      const message_type = _obj$msgBody.message_type,
            replyTo = _obj$msgBody.replyTo,
            mentionedUsersIds = _obj$msgBody.mentionedUsersIds;
      var _obj$msgBody$media = _obj$msgBody.media;
      _obj$msgBody$media = _obj$msgBody$media === undefined ? {} : _obj$msgBody$media;
      const androidHeight = _obj$msgBody$media.androidHeight,
            androidWidth = _obj$msgBody$media.androidWidth,
            duration = _obj$msgBody$media.duration,
            caption = _obj$msgBody$media.caption,
            fileName = _obj$msgBody$media.fileName,
            file_size = _obj$msgBody$media.file_size,
            local_path = _obj$msgBody$media.local_path,
            originalHeight = _obj$msgBody$media.originalHeight,
            originalWidth = _obj$msgBody$media.originalWidth,
            thumb_image = _obj$msgBody$media.thumb_image,
            webWidth = _obj$msgBody$media.webWidth,
            webHeight = _obj$msgBody$media.webHeight,
            fileType = _obj$msgBody$media.fileType;

      fileObj.extension = Object(__WEBPACK_IMPORTED_MODULE_3__common__["i" /* getExtention */])(fileName);
      fileObj.uri = local_path;
      fileObj.fileSize = file_size;
      fileObj.type = fileType;
      fileObj.width = originalWidth || webWidth;
      fileObj.height = originalHeight || webHeight;
      fileObj.duration = duration;
      fileObj.filename = fileName;
      fileOptionsObj.webWidth = webWidth, fileOptionsObj.webHeight = webHeight, fileOptionsObj.androidWidth = androidWidth;
      fileOptionsObj.androidHeight = androidHeight;
      fileOptionsObj.caption = caption;
      fileOptionsObj.thumbImage = thumb_image;
      fileOptionsObj.msgId = _msgId;
      replyToMsgId = replyTo;
    }
    return { fileObj, fileOptionsObj, replyToMsgId };
  } catch (error) {
    console.log('fileObjConstructor', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["k"] = fileObjConstructor;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(216)
var ieee754 = __webpack_require__(217)
var isArray = __webpack_require__(113)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__endPoints__ = __webpack_require__(387);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_call_initialize__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_app_reconnect__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__react_native_async_storage_async_storage__);









let XMPP_SERVER_HOST = '',
    XMPP_SERVER_PORT = '',
    loggedinUserJid = '',
    apiBaseUrl = '',
    IV = '',
    IVPROFILE = '',
    SSL = false,
    callbackListenersVal = {},
    credentials = {},
    apiEndpoints = {},
    licenseKey = '',
    isSandbox = false,
    janusUrl = '',
    signalServerUrl = '',
    iceServers = [],
    activeConnectionId = null,
    maxUsersForcall = 8,
    pingPongTime = 60,
    mediaEncryptionDecryption = false,
    token = '',
    profile = {},
    sdkOfflineStanzas = [],
    callDisconnected = false;

const jidValidation = (rule, jid) => {
  let response = true;
  switch (rule) {
    case 'jid':
      // We should have @ symbol in the jid
      if (jid && !__WEBPACK_IMPORTED_MODULE_3__constants__["m" /* BARE_JID */].test(jid) && !__WEBPACK_IMPORTED_MODULE_3__constants__["_23" /* MIX_BARE_JID */].test(jid)) response = false;
      break;

    case 'jidFormat':
      // We should have @ symbol in the jid
      if (jid && !__WEBPACK_IMPORTED_MODULE_3__constants__["m" /* BARE_JID */].test(jid)) response = false;
      break;

    case 'groupjidFormat':
      // We should have @mix string in the group jid
      if (jid && !__WEBPACK_IMPORTED_MODULE_3__constants__["_23" /* MIX_BARE_JID */].test(jid)) response = false;
      break;

    default:
      break;
  }
  return response;
};

const fileValidation = (rule, file = {}) => {
  let response = true;
  const fileType = file.type && file.type !== '' ? file.type : Object(__WEBPACK_IMPORTED_MODULE_0__utils__["n" /* getExtension */])(file.name);
  switch (rule) {
    // TODO: need to check the File class is available in React Native or the file selected has a type of "File" in React Native
    case 'image':
      if (__WEBPACK_IMPORTED_MODULE_5_react_native__["Platform"].OS == 'ios') {
        if (!__WEBPACK_IMPORTED_MODULE_3__constants__["Y" /* IOS_IMAGE_FORMATS */].includes(file.type)) response = false;
      } else {
        if (!__WEBPACK_IMPORTED_MODULE_3__constants__["U" /* IMAGE_FORMATS */].includes(file.type)) response = false;
      }
      break;

    case 'audio':
      if (!__WEBPACK_IMPORTED_MODULE_3__constants__["k" /* AUDIO_FORMATS */].includes(file.type)) response = false;
      break;

    case 'video':
      if (__WEBPACK_IMPORTED_MODULE_5_react_native__["Platform"].OS == 'ios') {
        if (!__WEBPACK_IMPORTED_MODULE_3__constants__["Z" /* IOS_VIDEO_FORMATS */].includes(file.type)) response = false;
      } else if (!__WEBPACK_IMPORTED_MODULE_3__constants__["_78" /* VIDEO_FORMATS */].includes(file.type)) response = false;
      break;

    case 'document':
      if (!__WEBPACK_IMPORTED_MODULE_3__constants__["A" /* DOCUMENT_FORMATS */].includes(fileType)) response = false;
      break;

    default:
      break;
  }
  return response;
};

const dataTypeValidation = (rule, value) => {
  let response = true;
  switch (rule) {
    case 'string':
      if (typeof value !== 'string') response = false;
      break;

    case 'boolean':
      if (typeof value !== 'boolean') response = false;
      break;

    case 'number':
      if (typeof value !== 'number') response = false;
      break;

    case 'object':
      if (typeof value !== 'object') response = false;
      break;

    case 'isArray':
      if (!Array.isArray(value)) response = false;
      break;

    case 'arrayRequired':
      if (value && value.length <= 0) response = false;
      break;

    case 'isFunction':
      if (typeof value !== 'function') response = false;
      break;

    default:
      break;
  }
  return response;
};

const otherValidation = (rule, value) => {
  let response = true;
  switch (rule) {
    case 'required':
      if (value === '' || value === null || value === undefined) response = false;
      break;

    case 'email':
      if (value && __WEBPACK_IMPORTED_MODULE_3__constants__["B" /* EMAIL */].test(value) === false) response = false;
      break;

    case 'msgTypes':
      if (value !== 'image' && value !== 'audio' && value !== 'video' && value !== 'file') response = false;
      break;

    default:
      break;
  }
  return response;
};

/**
 * Handles Client-side Validation with Multiple Cases
 * Splitted Validation into Mulitple Sub Functions inorder to Meet Sonar Quality Gate Recommendation
 * @param {any} params
 * @returns {object} Success/Error Response
 */
const clientSideValidation = params => {
  let response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["B" /* successResponse */])();
  params.forEach(param => {
    const rules = param.rules;

    const rulesArray = rules.split('|');
    rulesArray.forEach(rule => {
      const value = param.value;


      switch (rule) {
        case 'groupjidFormat':
        case 'jidFormat':
        case 'jid':
          if (!jidValidation(rule, value)) {
            response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(`${param.key} format is invalid`);
          }
          break;

        case 'string':
        case 'boolean':
        case 'number':
        case 'object':
        case 'isArray':
        case 'isFunction':
        case 'arrayRequired':
          if (!dataTypeValidation(rule, value)) {
            response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(`${param.key} should be Valid data type`);
          }
          break;

        case 'file': // TODO: should check this type in RN and change/remove according
        case 'image':
        case 'audio':
        case 'video':
        case 'document':
          if (!fileValidation(rule, value)) {
            response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(`${param.key} should be Valid File`);
          }
          break;

        case 'required':
        case 'email':
        case 'msgTypes':
          if (!otherValidation(rule, value)) {
            response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(`${param.key} is not valid or required`);
          }
          break;

        case 'callbackListeners':
          // To Validate whether all required callback methods are attached or not
          if (typeof value === 'object') {
            const cb = Object.keys(value);
            const filtered = __WEBPACK_IMPORTED_MODULE_3__constants__["p" /* CALLBACK_LISTENERS */].filter(el => !cb.includes(el));
            if (filtered.length) response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(`${filtered.join(', ')} listener(s) not attached`);
          }
          break;

        default:
          break;
      }
    });
  });
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = clientSideValidation;


/**
 * Internal function to handle initialization by storing values globally
 * @param {any} options
 * @returns {object} Success/Error Response
 */
const initialize = options => {
  const host = options.host,
        port = options.port,
        ssl = options.ssl,
        iv = options.iv,
        ivProfile = options.ivProfile,
        callbacks = options.callbacks,
        newapiBaseUrl = options.newapiBaseUrl,
        janus = options.janus,
        license = options.license,
        sandbox = options.sandbox,
        stunTurnServers = options.stunTurnServers,
        maxUsersIncall = options.maxUsersIncall,
        pingTime = options.pingTime,
        signalServer = options.signalServer;


  XMPP_SERVER_HOST = host;
  XMPP_SERVER_PORT = port;
  callbackListenersVal = callbacks;
  SSL = ssl;
  IV = iv;
  IVPROFILE = ivProfile ? ivProfile : license;
  apiBaseUrl = newapiBaseUrl;
  janusUrl = janus;
  licenseKey = license;
  isSandbox = sandbox;
  iceServers = stunTurnServers;
  pingPongTime = pingTime;
  signalServerUrl = signalServer;

  if (maxUsersIncall) {
    maxUsersForcall = maxUsersIncall;
  }
  apiEndpoints = {
    login: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["f" /* login */],
    mediaUpload: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["h" /* mediaUpload */],
    mediaDownload: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["g" /* mediaDownload */],
    forwardUrl: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["e" /* forwardUrl */],
    deleteMedia: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["c" /* deleteMedia */],
    getConfig: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["n" /* usersConfig */],
    translateUrl: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["l" /* translateUrl */],
    contactList: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["b" /* contactList */],
    validateCall: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["o" /* validateCall */],
    register: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["i" /* register */],
    sandboxRegister: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["k" /* sandboxRegister */],
    sandboxContactSync: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["j" /* sandboxContactSync */],
    callLog: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["a" /* callLog */],
    // callRoomDetails: apiBaseUrl + endPoint.callRoomDetails,
    // feedbackSubmit: apiBaseUrl + endPoint.feedbackSubmit,
    // submitReport: apiBaseUrl + endPoint.submitReport,
    // deleteMyAccount: apiBaseUrl + endPoint.deleteMyAccount,
    userList: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["m" /* userList */],
    getVcard: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["p" /* vcard */],
    delivered: apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["d" /* delivered */]
  };
  __WEBPACK_IMPORTED_MODULE_7__react_native_async_storage_async_storage___default.a.setItem('delivered_api_url', apiBaseUrl + __WEBPACK_IMPORTED_MODULE_1__endPoints__["d" /* delivered */]);
  __WEBPACK_IMPORTED_MODULE_7__react_native_async_storage_async_storage___default.a.setItem('iv', iv);
  Object(__WEBPACK_IMPORTED_MODULE_6__modules_app_reconnect__["a" /* reconnect */])();
  if (signalServer && signalServer !== '') {
    const callInitRes = Object(__WEBPACK_IMPORTED_MODULE_4__modules_call_initialize__["m" /* initializeCall */])(signalServer);
    if (callInitRes && callInitRes.statusCode !== 200) return callInitRes;
  }
  if (janusUrl && janusUrl !== '') {
    Object(__WEBPACK_IMPORTED_MODULE_4__modules_call_initialize__["n" /* initializeJanus */])(janusUrl, iceServers);
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["w"] = initialize;


/**
 * To get the Configuration details all over SDK
 * @returns {Object} - XMPP_SERVER_HOST, XMPP_SERVER_PORT, SSL
 */
const getConfiguration = () => ({
  XMPP_SERVER_HOST,
  XMPP_SERVER_PORT,
  SSL
});
/* harmony export (immutable) */ __webpack_exports__["f"] = getConfiguration;


/**
 * To set the Configuration details from all over SDK
 * @param {String} XMPP_SERVER_HOST
 * @param {String} XMPP_SERVER_PORT
 * @param {Boolean} SSL
 */
const setConfiguration = (host, port, ssl) => {
  XMPP_SERVER_HOST = host;
  XMPP_SERVER_PORT = port;
  SSL = ssl;
};
/* harmony export (immutable) */ __webpack_exports__["C"] = setConfiguration;


/**
 * Sets User Credentials globally to SDK
 * @param {String} username
 * @param {String} password
 * @returns {Boolean}
 */
const setCredentials = (username, password) => {
  loggedinUserJid = username;
  credentials = {
    username: username,
    password: password
  };
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["D"] = setCredentials;


/**
 * To get the Credential details
 * @returns {Object} - credentials (username & password)
 */
const getCredentials = () => credentials;
/* harmony export (immutable) */ __webpack_exports__["g"] = getCredentials;


/**
 * To get the API end points
 * @returns {Object} - apiEndpoints
 */
const getApiEndPoints = () => apiEndpoints;
/* harmony export (immutable) */ __webpack_exports__["d"] = getApiEndPoints;


/**
 * To get the Callback listeners object
 * @returns {Object} - callbackListenersVal
 */
const callbackListeners = () => callbackListenersVal || {};
/* harmony export (immutable) */ __webpack_exports__["a"] = callbackListeners;


/**
 * To get the logged in user's JID
 * @returns {String} - loggedinUserJid
 */
const getloggedinUserJid = () => loggedinUserJid;
/* harmony export (immutable) */ __webpack_exports__["v"] = getloggedinUserJid;


/**
 * To set the logged in user's JID
 */
const setloggedinUserJid = jid => {
  loggedinUserJid = jid;
};
/* unused harmony export setloggedinUserJid */


/**
 * To get the logged in User's Full JID
 * @returns {String} - loggedinUserJid
 */
const getLocalUserJid = () => `${getloggedinUserJid()}@${Object(__WEBPACK_IMPORTED_MODULE_2__strophe_connection__["e" /* getServer */])()}`;
/* harmony export (immutable) */ __webpack_exports__["o"] = getLocalUserJid;


/**
 * To get the Message Encryption Key
 * @returns {String} - IV
 */
const getIv = () => IV;
/* harmony export (immutable) */ __webpack_exports__["k"] = getIv;


/**
 * To set the Message Encryption Key
 * @param {String} - IV
 */
const setIv = iv => {
  IV = iv;
};
/* harmony export (immutable) */ __webpack_exports__["E"] = setIv;


/**
 * To get the Encryption Key for profile
 * @returns {String} - IV
 */
const getIvProfile = () => IVPROFILE;
/* harmony export (immutable) */ __webpack_exports__["l"] = getIvProfile;


/**
 * To get the Encryption Key for profile
 * @returns {String} - IV
 */
const setIvProfile = iv => {
  IVPROFILE = iv;
};
/* harmony export (immutable) */ __webpack_exports__["F"] = setIvProfile;


/**
 * To get the logged in User's Full JID with Resource
 * @returns {String} - loggedinUserJid
 */
const getLocalUserJidWithResource = userJid => `${userJid || getLocalUserJid()}/Web-${Object(__WEBPACK_IMPORTED_MODULE_2__strophe_connection__["d" /* getResource */])()}`;
/* harmony export (immutable) */ __webpack_exports__["p"] = getLocalUserJidWithResource;


/**
 * Return the userJid from userJid with resouce
 * @param {String} data
 */
const getUserJidFromResource = data => {
  if (!data) return null;
  return data.split('/')[0];
};
/* harmony export (immutable) */ __webpack_exports__["u"] = getUserJidFromResource;


/**
 * Return the user phone number from userJid
 * @param {String} data
 */
const getPhoneNoFromJid = data => {
  if (!data) return null;
  return data.split('@')[0];
};
/* unused harmony export getPhoneNoFromJid */


/**
 * To get the API Base URL
 * @returns {String} - apiBaseUrl
 */
const getapiBaseUrl = () => apiBaseUrl;
/* unused harmony export getapiBaseUrl */


/**
 * To get the Janus URL
 * @returns {String} - janusUrl
 */
const getJanusUrl = () => janusUrl;
/* unused harmony export getJanusUrl */


/**
 * To set the Janus URL
 * @param {String} - janusUrl
 */
const setJanusUrl = url => {
  janusUrl = url;
};
/* harmony export (immutable) */ __webpack_exports__["G"] = setJanusUrl;


/**
 * To get the Signal Server URL
 * @returns {String} - apiBaseUrl
 */
const getSignalServerUrl = () => signalServerUrl;
/* harmony export (immutable) */ __webpack_exports__["r"] = getSignalServerUrl;


/**
 * To set the Signal server URL
 * @param {String} - signalServerUrl
 */
const setSignalServerUrl = url => {
  signalServerUrl = url;
};
/* harmony export (immutable) */ __webpack_exports__["J"] = setSignalServerUrl;


/**
 * To get the License Key
 * @returns {String} - apiBaseUrl
 */
const getLicenseKey = () => licenseKey;
/* harmony export (immutable) */ __webpack_exports__["n"] = getLicenseKey;


/**
 * To get the License Key
 * @returns {String} - apiBaseUrl
 */
const getEncryptLicenseKey = () => `${licenseKey}${licenseKey}${licenseKey}`;
/* harmony export (immutable) */ __webpack_exports__["h"] = getEncryptLicenseKey;


/**
 * Whether Mode is Sandbox or Not
 * @returns {String} - apiBaseUrl
 */
const isSandboxMode = () => isSandbox;
/* harmony export (immutable) */ __webpack_exports__["z"] = isSandboxMode;


const getActiveConnectionId = () => activeConnectionId;
/* harmony export (immutable) */ __webpack_exports__["c"] = getActiveConnectionId;


const setActiveConnectionId = id => activeConnectionId = id;
/* harmony export (immutable) */ __webpack_exports__["A"] = setActiveConnectionId;


const isActiveConnectionId = id => activeConnectionId === id;
/* harmony export (immutable) */ __webpack_exports__["y"] = isActiveConnectionId;


const getMaxUsersOfCall = () => maxUsersForcall;
/* harmony export (immutable) */ __webpack_exports__["q"] = getMaxUsersOfCall;


const setMaxUsersOfCall = count => {
  maxUsersForcall = count;
};
/* harmony export (immutable) */ __webpack_exports__["H"] = setMaxUsersOfCall;


const getPingPongTime = () => pingPongTime;
/* unused harmony export getPingPongTime */


const setPingPongTime = seconds => {
  pingPongTime = seconds;
};
/* harmony export (immutable) */ __webpack_exports__["I"] = setPingPongTime;


const setMediaEncryptionDecrption = status => {
  mediaEncryptionDecryption = status;
};
/* unused harmony export setMediaEncryptionDecrption */


const getMediaEncryptionDecrption = () => mediaEncryptionDecryption;
/* unused harmony export getMediaEncryptionDecrption */


const getOnlineStatus = () => navigator.onLine;
/* unused harmony export getOnlineStatus */


const getStanzas = () => sdkOfflineStanzas;
/* unused harmony export getStanzas */


const processFailedStanzas = () => {
  const pendingStanzas = getStanzas();
  for (let i = 0; i < pendingStanzas.length; i++) {
    const stanza = pendingStanzas[i];
    const xmlDoc = new DOMParser().parseFromString(stanza, 'text/xml').firstChild;
    Object(__WEBPACK_IMPORTED_MODULE_2__strophe_connection__["b" /* getConnection */])().sendIQ(xmlDoc);
  }
  sdkOfflineStanzas = [];
};
/* unused harmony export processFailedStanzas */


const addStanza = async (id, stanza) => {
  sdkOfflineStanzas.push(stanza);
};
/* unused harmony export addStanza */


const setToken = data => {
  token = data;
  return token;
};
/* unused harmony export setToken */


const getToken = () => token;
/* harmony export (immutable) */ __webpack_exports__["t"] = getToken;


const setUserProfile = data => {
  profile = data;
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["L"] = setUserProfile;


const getUserProfile = () => profile;
/* unused harmony export getUserProfile */


/**
 * To get the Stun Turn Server URLs
 * @returns {Object} - apiBaseUrl
 */
const getStunTurnServerUrl = () => iceServers;
/* harmony export (immutable) */ __webpack_exports__["s"] = getStunTurnServerUrl;


/**
 * To set the Signal server URL
 * @param {Object} - signalServerUrl
 */
const setStunTurnServerUrl = url => {
  iceServers = url;
};
/* harmony export (immutable) */ __webpack_exports__["K"] = setStunTurnServerUrl;


/**
 * Return the userJid from userId
 * @param {String} userId
 */
const getJid = userId => {
  const response = clientSideValidation([{
    key: 'userId',
    value: userId,
    rules: __WEBPACK_IMPORTED_MODULE_3__constants__["_50" /* REQUIRED */]
  }]);
  if (response.statusCode === 200) {
    if (!XMPP_SERVER_HOST || XMPP_SERVER_HOST === '') {
      return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["j" /* errorResponse */])('Initialization error');
    }
    let userid = userId.includes('@') ? userId.split('@')[0] : userId;
    userid = userid + '@' + XMPP_SERVER_HOST;
    const successResp = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["B" /* successResponse */])();
    successResp.userJid = userid;
    return successResp;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["m"] = getJid;


const getExtention = filename => {
  // To get the file extension
  const dotIndex = filename.lastIndexOf('.');
  return dotIndex !== -1 ? filename.substring(dotIndex + 1) : undefined;
};
/* harmony export (immutable) */ __webpack_exports__["i"] = getExtention;


/**
 * To get the Call Disconnected Status
 * @returns {boolean} - callDisconnected
 */
const getCallDisconnectedStatus = () => callDisconnected;
/* harmony export (immutable) */ __webpack_exports__["e"] = getCallDisconnectedStatus;


/**
 * To set the Call Disconnected Status
 */
const setCallDisconnectedStatus = status => {
  callDisconnected = status;
};
/* harmony export (immutable) */ __webpack_exports__["B"] = setCallDisconnectedStatus;


const getFileNameFromUri = uri => {
  try {
    return uri.substring(uri.lastIndexOf('/') + 1);
  } catch (error) {
    console.log('getLocalPathFromUri', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["j"] = getFileNameFromUri;


/**
 * Handles Initialize SDK Validation with Multiple Cases
 * Splitted Validation into Mulitple Sub Functions inorder to Meet Sonar Quality Gate Recommendation
 * @returns {object} Success/Error Response
 */
const initializedSDKOrNot = () => {
  let response = Object(__WEBPACK_IMPORTED_MODULE_0__utils__["B" /* successResponse */])();
  if (licenseKey === "" || licenseKey === null || licenseKey === undefined) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(__WEBPACK_IMPORTED_MODULE_3__constants__["_5" /* LICENSE_KEY_NOT_CONFIGURED_ERROR_MESSAGE */]);
  }
  // if (invalidLicenseKey) {
  //   return validationErrorResponse(INVALID_LICENSE_KEY_ERROR_MESSAGE)
  // }
  if (apiBaseUrl === "" || apiBaseUrl === null || apiBaseUrl === undefined) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__utils__["D" /* validationErrorResponse */])(__WEBPACK_IMPORTED_MODULE_3__constants__["g" /* API_BASE_URL_NOT_CONFIGURED_ERROR_MESSAGE */]);
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["x"] = initializedSDKOrNot;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// migration done (09-12-21)

// Static Contents
const SUCCESS = 'Success';
/* harmony export (immutable) */ __webpack_exports__["_56"] = SUCCESS;

const CONNECTION_ERROR = 'Connection Error';
/* harmony export (immutable) */ __webpack_exports__["v"] = CONNECTION_ERROR;

const VALIDATION_ERROR = 'Validation Error';
/* harmony export (immutable) */ __webpack_exports__["_75"] = VALIDATION_ERROR;

const INVALID_CREDENTIALS = 'Invalid Credentials';
/* harmony export (immutable) */ __webpack_exports__["W"] = INVALID_CREDENTIALS;

const TIMEOUT_ERROR = 'Timeout Error';
/* harmony export (immutable) */ __webpack_exports__["_58"] = TIMEOUT_ERROR;

const MEDIA_UPLOAD_FAILED = 'Media Upload Failed';
/* harmony export (immutable) */ __webpack_exports__["_13"] = MEDIA_UPLOAD_FAILED;

const TYPE_GET = 'get';
/* harmony export (immutable) */ __webpack_exports__["_62"] = TYPE_GET;

const TYPE_SET = 'set';
/* harmony export (immutable) */ __webpack_exports__["_64"] = TYPE_SET;

const TYPE_RESULT = 'result';
/* harmony export (immutable) */ __webpack_exports__["_63"] = TYPE_RESULT;

const TYPE_CHAT = 'chat';
/* harmony export (immutable) */ __webpack_exports__["_61"] = TYPE_CHAT;

const METHOD_POST = 'POST';
/* harmony export (immutable) */ __webpack_exports__["_15"] = METHOD_POST;

const METHOD_PUT = 'PUT';
/* harmony export (immutable) */ __webpack_exports__["_16"] = METHOD_PUT;

const METHOD_GET = 'GET';
/* harmony export (immutable) */ __webpack_exports__["_14"] = METHOD_GET;

const TEXT = 'text';
/* harmony export (immutable) */ __webpack_exports__["_57"] = TEXT;

const AUTO_TEXT = 'auto_text';
/* harmony export (immutable) */ __webpack_exports__["l"] = AUTO_TEXT;

const IMAGE = 'image';
/* harmony export (immutable) */ __webpack_exports__["S"] = IMAGE;

const VIDEO = 'video';
/* harmony export (immutable) */ __webpack_exports__["_76"] = VIDEO;

const AUDIO = 'audio';
/* harmony export (immutable) */ __webpack_exports__["i"] = AUDIO;

const FILE = 'file';
/* harmony export (immutable) */ __webpack_exports__["C"] = FILE;

const LOCATION = 'location';
/* harmony export (immutable) */ __webpack_exports__["_6"] = LOCATION;

const CONTACT = 'contact';
/* harmony export (immutable) */ __webpack_exports__["w"] = CONTACT;

const PNG = 'png';
/* harmony export (immutable) */ __webpack_exports__["_43"] = PNG;

const JPG = 'jpg';
/* harmony export (immutable) */ __webpack_exports__["_4"] = JPG;

const JPEG = 'jpeg';
/* harmony export (immutable) */ __webpack_exports__["_3"] = JPEG;

const MP4 = 'mp4';
/* unused harmony export MP4 */

const CHAT = 'chat';
/* harmony export (immutable) */ __webpack_exports__["q"] = CHAT;

const MIX = 'mix';
/* harmony export (immutable) */ __webpack_exports__["_22"] = MIX;

const ANY = 'any';
/* harmony export (immutable) */ __webpack_exports__["e"] = ANY;

const NORMAL = 'normal';
/* harmony export (immutable) */ __webpack_exports__["_26"] = NORMAL;

const RECALL = 'recall';
/* harmony export (immutable) */ __webpack_exports__["_45"] = RECALL;

const WEB = 'web';
/* unused harmony export WEB */

const ANDROID = 'android';
/* unused harmony export ANDROID */

const IOS = 'ios';
/* unused harmony export IOS */

const GROUPCHAT = 'groupchat';
/* harmony export (immutable) */ __webpack_exports__["L"] = GROUPCHAT;

const GROUP = 'group';
/* harmony export (immutable) */ __webpack_exports__["K"] = GROUP;

const INVALID_MESSAGE_TYPE = 'Invalid Message Type';
/* harmony export (immutable) */ __webpack_exports__["X"] = INVALID_MESSAGE_TYPE;

const REQUIRED = 'required';
/* harmony export (immutable) */ __webpack_exports__["_50"] = REQUIRED;

const FUNCTION_REQUIRED = "required|isFunction";
/* harmony export (immutable) */ __webpack_exports__["D"] = FUNCTION_REQUIRED;

const JID_REQUIRED = 'jid|required';
/* harmony export (immutable) */ __webpack_exports__["_2"] = JID_REQUIRED;

const MEDIA_TYPE_REQUIRED = 'media type|required';
/* unused harmony export MEDIA_TYPE_REQUIRED */

const MID_REQUIRED = 'message id|required';
/* unused harmony export MID_REQUIRED */

const JID_FORMAT_REQUIRED = 'jidFormat|required';
/* harmony export (immutable) */ __webpack_exports__["_0"] = JID_FORMAT_REQUIRED;

const JID_GROUP_REQUIRED = 'groupjidFormat|required';
/* harmony export (immutable) */ __webpack_exports__["_1"] = JID_GROUP_REQUIRED;

const STRING_REQUIRED = 'string|required';
/* harmony export (immutable) */ __webpack_exports__["_55"] = STRING_REQUIRED;

const BOOLEAN_REQUIRED = 'boolean|required';
/* harmony export (immutable) */ __webpack_exports__["o"] = BOOLEAN_REQUIRED;

const NUMBER_REQUIRED = 'number|required';
/* harmony export (immutable) */ __webpack_exports__["_41"] = NUMBER_REQUIRED;

const OBJECT_REQUIRED = 'object|required';
/* harmony export (immutable) */ __webpack_exports__["_42"] = OBJECT_REQUIRED;

const OBJECT_CALLBACK = 'object|callbackListeners';
/* unused harmony export OBJECT_CALLBACK */

const IMAGEFILE_REQUIRED = 'image|required';
/* harmony export (immutable) */ __webpack_exports__["T"] = IMAGEFILE_REQUIRED;

const AUDIOFILE_REQUIRED = 'audio|required';
/* harmony export (immutable) */ __webpack_exports__["j"] = AUDIOFILE_REQUIRED;

const VIDEOFILE_REQUIRED = 'video|required';
/* harmony export (immutable) */ __webpack_exports__["_77"] = VIDEOFILE_REQUIRED;

const DOCUMENTFILE_REQUIRED = 'document|required';
/* harmony export (immutable) */ __webpack_exports__["z"] = DOCUMENTFILE_REQUIRED;

const ARRAY_REQUIRED = 'isArray|arrayRequired|required';
/* harmony export (immutable) */ __webpack_exports__["h"] = ARRAY_REQUIRED;

const MSGTYPES_REQUIRED = 'msgTypes|required';
/* harmony export (immutable) */ __webpack_exports__["_24"] = MSGTYPES_REQUIRED;

const REQUEST_FAILED = 'Request Failed';
/* harmony export (immutable) */ __webpack_exports__["_49"] = REQUEST_FAILED;

const UNAVAILABLE = 'unavailable';
/* harmony export (immutable) */ __webpack_exports__["_65"] = UNAVAILABLE;

const GROUP_PROFILE_UPDATE = 'groupProfileUpdated';
/* harmony export (immutable) */ __webpack_exports__["Q"] = GROUP_PROFILE_UPDATE;

const GROUP_CREATED = 'groupCreated';
/* harmony export (immutable) */ __webpack_exports__["O"] = GROUP_CREATED;

const USER_ADDED = 'userAdded';
/* harmony export (immutable) */ __webpack_exports__["_69"] = USER_ADDED;

const USER_LEFT = 'userLeft';
/* harmony export (immutable) */ __webpack_exports__["_73"] = USER_LEFT;

const USER_REMOVED = 'userRemoved';
/* harmony export (immutable) */ __webpack_exports__["_74"] = USER_REMOVED;

const MADE_ADMIN = 'madeAdmin';
/* harmony export (immutable) */ __webpack_exports__["_7"] = MADE_ADMIN;

const PROFILE_UPDATED = 'profileUpdated';
/* harmony export (immutable) */ __webpack_exports__["_44"] = PROFILE_UPDATED;

const TO_JID_FORMAT = 'toJidFormatRequired';
/* unused harmony export TO_JID_FORMAT */

const MSG_BODY_REQUIRED = 'messageBodyRequired';
/* unused harmony export MSG_BODY_REQUIRED */


// Status
const RECENT_CHAT = 'recent_chat';
/* harmony export (immutable) */ __webpack_exports__["_46"] = RECENT_CHAT;

const SINGLE_CHAT = 'single_chat';
/* harmony export (immutable) */ __webpack_exports__["_53"] = SINGLE_CHAT;

const BLOCK_USER = 'block_user';
/* harmony export (immutable) */ __webpack_exports__["n"] = BLOCK_USER;

const SINGLE_CHAT_MEDIA = 'single_chat_media';
/* harmony export (immutable) */ __webpack_exports__["_54"] = SINGLE_CHAT_MEDIA;

const SINGLE_CHAT_FULL_MEDIA = 'single_chat_fullmedia';
/* unused harmony export SINGLE_CHAT_FULL_MEDIA */

const REPLY_MESSAGE = 'reply_message';
/* harmony export (immutable) */ __webpack_exports__["_48"] = REPLY_MESSAGE;

const SET_FAVOURITE_MESSAGE = 'set_favourite_message';
/* harmony export (immutable) */ __webpack_exports__["_51"] = SET_FAVOURITE_MESSAGE;

const UPDATE_FAVOURITE_MESSAGE = 'update_favourite_message';
/* harmony export (immutable) */ __webpack_exports__["_66"] = UPDATE_FAVOURITE_MESSAGE;

const GET_FAVOURITE_MESSAGE = 'get_favourite_message';
/* harmony export (immutable) */ __webpack_exports__["E"] = GET_FAVOURITE_MESSAGE;

const CLEARALL_FAVOURITE_MESSAGE = 'clearall_favourite_message';
/* harmony export (immutable) */ __webpack_exports__["r"] = CLEARALL_FAVOURITE_MESSAGE;

const CLEAR_MESSAGE = 'clear_message';
/* harmony export (immutable) */ __webpack_exports__["t"] = CLEAR_MESSAGE;

const CLEAR_ALL = 'clear_all';
/* harmony export (immutable) */ __webpack_exports__["s"] = CLEAR_ALL;

const DELETE_MESSAGE = 'delete_message';
/* harmony export (immutable) */ __webpack_exports__["y"] = DELETE_MESSAGE;

const CREATE_GROUP = 'create_group';
/* harmony export (immutable) */ __webpack_exports__["x"] = CREATE_GROUP;

const GROUP_PROFILE_UPDATED = 'group_profile_updated';
/* harmony export (immutable) */ __webpack_exports__["R"] = GROUP_PROFILE_UPDATED;

const ADD_PARTICIPANTS = 'add_participants';
/* harmony export (immutable) */ __webpack_exports__["a"] = ADD_PARTICIPANTS;

const SET_GROUP_INFO = 'set_group_info';
/* harmony export (immutable) */ __webpack_exports__["_52"] = SET_GROUP_INFO;

const GET_GROUP_ID = 'get_group_id';
/* harmony export (immutable) */ __webpack_exports__["F"] = GET_GROUP_ID;

const GET_GROUP_PROFILE = 'get_group_profile';
/* harmony export (immutable) */ __webpack_exports__["G"] = GET_GROUP_PROFILE;

const GET_PARTICIPANTS = 'get_participants';
/* harmony export (immutable) */ __webpack_exports__["H"] = GET_PARTICIPANTS;

const ADMIN_REMOVE_ADMIN = 'admin_remove_admin';
/* harmony export (immutable) */ __webpack_exports__["c"] = ADMIN_REMOVE_ADMIN;

const ADMIN_REMOVE_PARTICIPANT = 'admin_remove_participant';
/* harmony export (immutable) */ __webpack_exports__["d"] = ADMIN_REMOVE_PARTICIPANT;

const MAKE_ADMIN = 'make_admin';
/* harmony export (immutable) */ __webpack_exports__["_8"] = MAKE_ADMIN;

const ADMIN_EXIT_GROUP = 'admin_exit_group';
/* harmony export (immutable) */ __webpack_exports__["b"] = ADMIN_EXIT_GROUP;

const USER_EXIT_GROUP = 'user_exit_group';
/* harmony export (immutable) */ __webpack_exports__["_72"] = USER_EXIT_GROUP;

const USER_DELETE_GROUP = 'user_delete_group';
/* harmony export (immutable) */ __webpack_exports__["_71"] = USER_DELETE_GROUP;

const GROUP_CHAT = 'group_chat';
/* harmony export (immutable) */ __webpack_exports__["M"] = GROUP_CHAT;

const COMPOSING = 'composing';
/* harmony export (immutable) */ __webpack_exports__["u"] = COMPOSING;

const GONE = 'gone';
/* harmony export (immutable) */ __webpack_exports__["I"] = GONE;

const GROUP_CHAT_MEDIA = 'group_chat_media';
/* harmony export (immutable) */ __webpack_exports__["N"] = GROUP_CHAT_MEDIA;

const GROUP_MESSAGE_STATUS = 'group_message_status';
/* harmony export (immutable) */ __webpack_exports__["P"] = GROUP_MESSAGE_STATUS;

const UPDATE_MUTE_NOTIFICATION = 'update_mute_notification';
/* harmony export (immutable) */ __webpack_exports__["_67"] = UPDATE_MUTE_NOTIFICATION;

const UPDATE_UNREAD_COUNT = 'update_unread_count';
/* harmony export (immutable) */ __webpack_exports__["_68"] = UPDATE_UNREAD_COUNT;

const NO_MEESAGE_FOUND_DB = 'No message found in DB';
/* harmony export (immutable) */ __webpack_exports__["_28"] = NO_MEESAGE_FOUND_DB;

// NS xmls
const NS_CARBON = 'urn:xmpp:carbons:2';
/* harmony export (immutable) */ __webpack_exports__["_30"] = NS_CARBON;

const NS_RECEIPTS = 'urn:xmpp:receipts';
/* harmony export (immutable) */ __webpack_exports__["_37"] = NS_RECEIPTS;

const NS_BLOCKING = 'urn:xmpp:blocking';
/* harmony export (immutable) */ __webpack_exports__["_29"] = NS_BLOCKING;

const NS_PING = 'urn:xmpp:ping';
/* harmony export (immutable) */ __webpack_exports__["_36"] = NS_PING;

const NS_CONTENT = 'urn:xmpp:content';
/* harmony export (immutable) */ __webpack_exports__["_32"] = NS_CONTENT;

const NS_USER_ACTIVITIES = 'jabber:iq:user_activities';
/* harmony export (immutable) */ __webpack_exports__["_38"] = NS_USER_ACTIVITIES;

const NS_LAST = 'jabber:iq:last';
/* harmony export (immutable) */ __webpack_exports__["_35"] = NS_LAST;

const NS_VCARD = 'vcard-temp';
/* harmony export (immutable) */ __webpack_exports__["_40"] = NS_VCARD;

const NS_USER_FAV = 'jabber:iq:user_fav';
/* harmony export (immutable) */ __webpack_exports__["_39"] = NS_USER_FAV;

const NS_CHATSTATES = 'http://jabber.org/protocol/chatstates';
/* harmony export (immutable) */ __webpack_exports__["_31"] = NS_CHATSTATES;

const NS_HINTS = 'urn:xmpp:hints';
/* harmony export (immutable) */ __webpack_exports__["_34"] = NS_HINTS;

const NS_GROUP_MIX = 'jabber:iq:mixgroupchat';
/* harmony export (immutable) */ __webpack_exports__["_33"] = NS_GROUP_MIX;


// Values
const RECENT_LIST_COUNT = 0;
/* harmony export (immutable) */ __webpack_exports__["_47"] = RECENT_LIST_COUNT;

const CALLBACK_LISTENERS = ['connectionListener', 'presenceListener', 'friendsListListener', 'messageListener', 'userProfileListener', 'replyMessageListener', 'favouriteMessageListener', 'groupProfileListener', 'groupMsgInfoListener', 'mediaUploadListener', 'mediaDownloadListener', 'blockUserListener'];
/* harmony export (immutable) */ __webpack_exports__["p"] = CALLBACK_LISTENERS;

const TOKEN_EXPIRY_TIME = 54 * 60;
/* harmony export (immutable) */ __webpack_exports__["_60"] = TOKEN_EXPIRY_TIME;
 // In Seconds - 54 Minitues
const TOKEN_EXPIRY_INTERVAL = 1 * 60 * 1000;
/* harmony export (immutable) */ __webpack_exports__["_59"] = TOKEN_EXPIRY_INTERVAL;
 // In Seconds - 5 Mins Interval
const IMAGE_THUMB_QUALITY = 0.5;
/* harmony export (immutable) */ __webpack_exports__["V"] = IMAGE_THUMB_QUALITY;

const GOOGLE_TRANSLATE_URL = 'https://translation.googleapis.com/language/translate/v2';
/* harmony export (immutable) */ __webpack_exports__["J"] = GOOGLE_TRANSLATE_URL;


// Regex
const BARE_JID_OLD = /[\w]+@([\w.]{1,})/;
/* unused harmony export BARE_JID_OLD */

const JID_OLD = /^[\w-\.]+@([\w-]+\/)+[Web]+\-[0-9a-zA-Z-]{1,}/;
/* unused harmony export JID_OLD */

const BARE_JID = /^([^( "'&\/:<>@\\)])+\@(((?!mix\.).)[^( "'&\/:<>@\\)]{1,})$/;
/* harmony export (immutable) */ __webpack_exports__["m"] = BARE_JID;

const MIX_BARE_JID = /^([^( "'&\/:<>@\\)])+\@(mix\.[^( "'&\/:<>@\\)]{1,})$/;
/* harmony export (immutable) */ __webpack_exports__["_23"] = MIX_BARE_JID;

const JID = /^([^( "'&\/:<>@\\)])+\@([^( "'&\/:<>@\\)]{1,})+\/((Web|Mobile)[^( "'&\/:<>@\\)]{1,})/;
/* unused harmony export JID */

const EMAIL = /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/;
/* harmony export (immutable) */ __webpack_exports__["B"] = EMAIL;

const TIMESTAMP = /^([0-9]{13,16}$)/;
/* unused harmony export TIMESTAMP */


// Options
const FS_OPTIONS = { encoding: 'utf-8' };
/* unused harmony export FS_OPTIONS */

const APIIV = 'ddc0f15cc2c90fca';
/* harmony export (immutable) */ __webpack_exports__["f"] = APIIV;


const ALLOWED_IMAGE_VIDEO_FORMATS = ['png', 'jpeg', 'jpg', 'mp4'];
/* unused harmony export ALLOWED_IMAGE_VIDEO_FORMATS */

const ALLOWED_AUDIO_FORMATS = ['mp3', 'aac', 'wav'];
/* unused harmony export ALLOWED_AUDIO_FORMATS */

const AUDIO_VIDEO_FORMATS = ['mp3', 'aac', 'wav', 'mp4'];
/* unused harmony export AUDIO_VIDEO_FORMATS */

const ALLOWED_DOCUMENT_FORMATS = ['doc', 'docx', 'pdf', 'xls', 'xlsx', 'txt', 'csv', 'ppt', 'pptx', 'zip', 'rar'];
/* unused harmony export ALLOWED_DOCUMENT_FORMATS */


// MEDIA CONSTANTS
const IMAGE_FORMATS = ['image/png', 'image/jpeg', 'image/jpg'];
/* harmony export (immutable) */ __webpack_exports__["U"] = IMAGE_FORMATS;

const IOS_IMAGE_FORMATS = ['image', 'image/png', 'image/jpeg', 'image/jpg'];
/* harmony export (immutable) */ __webpack_exports__["Y"] = IOS_IMAGE_FORMATS;

const AUDIO_FORMATS = ['audio/mp3', 'audio/wav', 'audio/x-wav', 'audio/mpeg', 'audio/aac', 'audio/vnd.dlna.adts'];
/* harmony export (immutable) */ __webpack_exports__["k"] = AUDIO_FORMATS;

const VIDEO_FORMATS = ['video/mp4'];
/* harmony export (immutable) */ __webpack_exports__["_78"] = VIDEO_FORMATS;

const IOS_VIDEO_FORMATS = ['video', 'video/mov'];
/* harmony export (immutable) */ __webpack_exports__["Z"] = IOS_VIDEO_FORMATS;

const DOCUMENT_FORMATS = ['application/pdf', 'application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'text/plain', 'text/csv', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/zip', 'application/x-zip-compressed', 'application/rar', 'application/vnd.rar', 'application/excel', 'application/x-excel', 'application/x-msexcel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'];
/* harmony export (immutable) */ __webpack_exports__["A"] = DOCUMENT_FORMATS;

const ALLOWED_ALL_FILE_FORMATS = ['jpg', 'jpeg', 'png', 'mp3', 'wav', 'aac', 'mpeg', 'mp4', 'doc', 'docx', 'pdf', 'xls', 'xlsx', 'txt', 'csv', 'ppt', 'zip', 'rar', 'pptx', 'acc'];
/* unused harmony export ALLOWED_ALL_FILE_FORMATS */

const CHAT_IMAGES = 'chatimages';
/* unused harmony export CHAT_IMAGES */

const CHAT_AUDIOS = 'chataudios';
/* unused harmony export CHAT_AUDIOS */


const MAX_WIDTH_WEB = 330;
/* harmony export (immutable) */ __webpack_exports__["_12"] = MAX_WIDTH_WEB;

const MIN_WIDTH_WEB = 240;
/* harmony export (immutable) */ __webpack_exports__["_21"] = MIN_WIDTH_WEB;

const MAX_HEIGHT_WEB = 338;
/* harmony export (immutable) */ __webpack_exports__["_10"] = MAX_HEIGHT_WEB;

const MIN_HEIGHT_WEB = 83;
/* harmony export (immutable) */ __webpack_exports__["_18"] = MIN_HEIGHT_WEB;


const MAX_WIDTH_AND = 250;
/* harmony export (immutable) */ __webpack_exports__["_11"] = MAX_WIDTH_AND;

const MIN_WIDTH_AND = 210;
/* harmony export (immutable) */ __webpack_exports__["_20"] = MIN_WIDTH_AND;

const MAX_HEIGHT_AND = 320;
/* harmony export (immutable) */ __webpack_exports__["_9"] = MAX_HEIGHT_AND;

const MIN_HEIGHT_AND = 80;
/* harmony export (immutable) */ __webpack_exports__["_17"] = MIN_HEIGHT_AND;


const MIN_OFFSET_WIDTH = 280;
/* unused harmony export MIN_OFFSET_WIDTH */

const MIN_OFFSET_HEIGHT = 280;
/* unused harmony export MIN_OFFSET_HEIGHT */


const MIN_THUMB_WIDTH = 322;
/* harmony export (immutable) */ __webpack_exports__["_19"] = MIN_THUMB_WIDTH;


const PREVIEW_MEDIA_TYPES = ['image', 'video', 'audio', 'file'];
/* unused harmony export PREVIEW_MEDIA_TYPES */

const MEDIA_MESSAGE_TYPES = ['image', 'video', 'audio', 'file'];
/* unused harmony export MEDIA_MESSAGE_TYPES */

const INITIAL_LOAD_MEDIA_LIMIT = 20;
/* unused harmony export INITIAL_LOAD_MEDIA_LIMIT */

const LOAD_MORE_MEDIA_LIMIT = 10;
/* unused harmony export LOAD_MORE_MEDIA_LIMIT */

const CAPTION_CHARACTER_LIMIT = 1024;
/* unused harmony export CAPTION_CHARACTER_LIMIT */

const ALLOWED_KEY_CODES = [8, 35, 36, 37, 38, 39, 40, 46, 65, 67, 86];
/* unused harmony export ALLOWED_KEY_CODES */

const TYPE_DELAY_TIME = 5000;
/* unused harmony export TYPE_DELAY_TIME */

const CHAT_HISTORY_LIMIT = 20;
/* unused harmony export CHAT_HISTORY_LIMIT */


// api call error message
const NETWORK_ERROR = 'Network Error';
/* harmony export (immutable) */ __webpack_exports__["_25"] = NETWORK_ERROR;

const USER_CANCELLED = 'User Cancelled!';
/* harmony export (immutable) */ __webpack_exports__["_70"] = USER_CANCELLED;


// Notification Message Contents
const NOTIFY_CONTENTS = ['Text', 'Image', 'Video', 'Audio', 'Document', 'Location'];
/* harmony export (immutable) */ __webpack_exports__["_27"] = NOTIFY_CONTENTS;


//error
const ERROR_CODE = "403";
/* unused harmony export ERROR_CODE */

const ERROR_MESSAGE = "Feature unavailable for your plan";
/* unused harmony export ERROR_MESSAGE */

const LOGIN_EXCEEDED_ERROR_MESSAGE = "You have reached maximum sessions allowed.";
/* unused harmony export LOGIN_EXCEEDED_ERROR_MESSAGE */

const API_BASE_URL_EMPTY_ERROR_MESSAGE = "API base url cannot be empty";
/* unused harmony export API_BASE_URL_EMPTY_ERROR_MESSAGE */

const LICENSE_KEY_EMPTY_ERROR_MESSAGE = "License key cannot be null or empty";
/* unused harmony export LICENSE_KEY_EMPTY_ERROR_MESSAGE */

const INVALID_LICENSE_KEY_ERROR_MESSAGE = "Invalid License key";
/* unused harmony export INVALID_LICENSE_KEY_ERROR_MESSAGE */

const INVALID_API_BASE_URL_ERROR_MESSAGE = "Invalid api base url";
/* unused harmony export INVALID_API_BASE_URL_ERROR_MESSAGE */

const API_BASE_URL_NOT_CONFIGURED_ERROR_MESSAGE = "SDK is not initialized successfully, Please initialize the SDK.";
/* harmony export (immutable) */ __webpack_exports__["g"] = API_BASE_URL_NOT_CONFIGURED_ERROR_MESSAGE;

const LICENSE_KEY_NOT_CONFIGURED_ERROR_MESSAGE = "License key is not configured, Please configure license key in initializeSDK.";
/* harmony export (immutable) */ __webpack_exports__["_5"] = LICENSE_KEY_NOT_CONFIGURED_ERROR_MESSAGE;

const USER_IDENTIFIER_EMPTY_ERROR_MESSAGE = "User identifier is empty, Please pass valid user identifier";
/* unused harmony export USER_IDENTIFIER_EMPTY_ERROR_MESSAGE */

const USER_IDENTIFIER_WHITE_SPACE_ERROR_MESSAGE = "User identifier should not contain the whitespaces";
/* unused harmony export USER_IDENTIFIER_WHITE_SPACE_ERROR_MESSAGE */

const USER_IDENTIFIER_SPECIAL_CHARACTER_ERROR_MESSAGE = "User identifiers can only contain lowercase alphanumeric characters, hyphens (-), and underscores (_).";
/* unused harmony export USER_IDENTIFIER_SPECIAL_CHARACTER_ERROR_MESSAGE */

const XMPP_CONNECTION_ERROR_MESSAGE = "Not registered with MirrorFly SDK, Please call SDK.register() or SDK.connect() method before call this function";
/* unused harmony export XMPP_CONNECTION_ERROR_MESSAGE */

const TOJID_COMPARE_WITH_LOCAL_JID_ERROR_MESSAGE = "toJid should not be current user jid";
/* unused harmony export TOJID_COMPARE_WITH_LOCAL_JID_ERROR_MESSAGE */

const TOJID_COMPARE_WITH_API_BASE_URL_ERROR_MESSAGE = "Invalid toJid, Please get toJid from SDK.getJid() by passing user identifier";
/* unused harmony export TOJID_COMPARE_WITH_API_BASE_URL_ERROR_MESSAGE */

const TOJID_EMPTY_ERROR_MESSAGE = "ToJid cannot be empty";
/* unused harmony export TOJID_EMPTY_ERROR_MESSAGE */

const TEXT_MESSAGE_ERROR_MESSAGE = "Provided text message is empty";
/* unused harmony export TEXT_MESSAGE_ERROR_MESSAGE */

const MESSAGE_META_DATA_ERROR_MESSAGE = "Message Meta data type should be string";
/* unused harmony export MESSAGE_META_DATA_ERROR_MESSAGE */

const MESSAGE_TOPIC_ID_ERROR_MESSAGE = "Message Topic Id type should be string";
/* unused harmony export MESSAGE_TOPIC_ID_ERROR_MESSAGE */

const TOPIC_META_DATA_ERROR_MESSAGE = "Topic Meta data type should be string";
/* unused harmony export TOPIC_META_DATA_ERROR_MESSAGE */

const MEETLINK_ERROR_MESSAGE = "Meet link should not be empty or null";
/* unused harmony export MEETLINK_ERROR_MESSAGE */

const SCHEDULEDDATETIME_ERROR_MESSAGE = "Scheduled DateTime should not be empty or null";
/* unused harmony export SCHEDULEDDATETIME_ERROR_MESSAGE */

const SCHEDULEDDATETIME_INVALID_ERROR_MESSAGE = "Scheduled DateTime is invalid";
/* unused harmony export SCHEDULEDDATETIME_INVALID_ERROR_MESSAGE */

const INVALID_INPUT_DATA = "meetMessageObject is not valid";
/* unused harmony export INVALID_INPUT_DATA */


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_bind_js__ = __webpack_require__(169);




// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_bind_js__["a" /* default */])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

/* harmony default export */ __webpack_exports__["a"] = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
});

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(8)))

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(258).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module)))

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_strophe_js__ = __webpack_require__(209);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_strophe_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_strophe_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
// migration done (14-12-21)





let connection, XMPP_SOCKET_HOST;

/**
 * Creates New Strophe (XMPP) Connection
 * @returns Strophe Connection
 */
const createNewConnection = () => {
  if (connection) {
    return connection;
  }
  // Getting configuration details from common module
  const configurations = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["f" /* getConfiguration */])();
  XMPP_SOCKET_HOST = configurations.SSL === true ? "wss://" : "ws://";
  XMPP_SOCKET_HOST += configurations.XMPP_SERVER_HOST + ":" + configurations.XMPP_SERVER_PORT + "/websocket";
  // Creating new connection
  connection = new __WEBPACK_IMPORTED_MODULE_0_strophe_js__["Strophe"].Connection(XMPP_SOCKET_HOST, { sync: true, connectionId: Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["c" /* getActiveConnectionId */])() });
  connection.options.sync = true;
  connection.options.keepalive = true;
  return connection;
};
/* unused harmony export createNewConnection */


/**
 * @returns Active Strophe Connection, Creates new Connection if not Exists Already
 */
const getConnection = () => {
  if (!connection) {
    return createNewConnection();
  }
  return connection;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getConnection;


const getConnectionObj = () => connection;
/* harmony export (immutable) */ __webpack_exports__["c"] = getConnectionObj;


/**
 * @returns UniqueId for resource
 */
const getResource = () => connection && connection.getUniqueId();
/* harmony export (immutable) */ __webpack_exports__["d"] = getResource;


const getServer = () => {
  const configurations = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["f" /* getConfiguration */])();
  return configurations.XMPP_SERVER_HOST;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = getServer;


const disconnect = () => {
  if (connection) {
    connection.options.sync = true;
    connection.flush();
    connection.disconnect();
    connection = null;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["a"] = disconnect;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(9);
var minAssert = __webpack_require__(11);
var minUtils = __webpack_require__(150);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_realm__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_realm___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_realm__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Schema__ = __webpack_require__(315);



let realmDB;

const openRealmDB = async () => {
  return __WEBPACK_IMPORTED_MODULE_0_realm___default.a.open(__WEBPACK_IMPORTED_MODULE_1__Schema__["a" /* realmConfig */]);
};

/**
 * Helper function to open the realm DB of not open and return it
 * @returns {Promise<Realm>}
 */
const getRealmDB = async () => {
  if (realmDB) {
    return realmDB;
  }
  realmDB = await openRealmDB();
  return realmDB;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = getRealmDB;


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__media__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__service_api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__helpers_constants__ = __webpack_require__(6);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };











const consoleLog = (title, valObj) => {
    console.log(title, valObj);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = consoleLog;


/**
 * Return the local user jid for call
 * If the custom userJid is set return that, otherwise return the default local user jid
 */
const getCallLocalUserJid = () => Object(__WEBPACK_IMPORTED_MODULE_0__config__["h" /* getLocalUserCustomJid */])() || Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["o" /* getLocalUserJid */])();
/* harmony export (immutable) */ __webpack_exports__["e"] = getCallLocalUserJid;


/**
 * To get the logged in User's Full JID with Resource
 */
const getCallLocalUserJidWithResource = () => {
    const localUserCustomJid = Object(__WEBPACK_IMPORTED_MODULE_0__config__["h" /* getLocalUserCustomJid */])();
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["p" /* getLocalUserJidWithResource */])(localUserCustomJid);
};
/* unused harmony export getCallLocalUserJidWithResource */


/**
 * Generate & return the send messages to users in the room
 * @param {*} type - Message payload
 * @param {*} payload - Additional payload
 */
const getSendMessage = (type, data = {}) => {
    // type is must to get the message
    if (!type) return undefined;
    const socketId = data.socketId,
          roomId = data.roomId,
          callType = data.callType,
          userCallId = data.userCallId,
          to = data.to;
    var _data$payload = data.payload;
    const payload = _data$payload === undefined ? {} : _data$payload;

    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_0__config__["e" /* getCallInfo */])();
    const room = roomId || callInfo && callInfo.roomId;
    if (!room) return undefined;
    const message = {
        from: socketId || Object(__WEBPACK_IMPORTED_MODULE_0__config__["k" /* getSocketId */])(),
        type,
        room,
        payload: _extends({
            callerDevice: __WEBPACK_IMPORTED_MODULE_1__constants__["b" /* CALLER_DEVICE */],
            callType: callType || callInfo.callType,
            userJid: getCallLocalUserJid(),
            userCallId: userCallId || Object(__WEBPACK_IMPORTED_MODULE_0__config__["g" /* getLocalUserCallId */])()
        }, payload)
        // To user socket Id
    };if (to) {
        message['to'] = to;
    }

    return _extends({}, message);
};
/* harmony export (immutable) */ __webpack_exports__["j"] = getSendMessage;


/**
 * Generate object which will send to client
 * @param {*} dataObj
 */
const getClientData = (dataObj = {}) => {
    const localUserJid = getCallLocalUserJid();
    let dataToSend = _extends({}, dataObj);

    if ([__WEBPACK_IMPORTED_MODULE_1__constants__["n" /* CALL_STATE_CALL_STATUS */], __WEBPACK_IMPORTED_MODULE_1__constants__["A" /* CALL_STATE_MISSED_CALL */], __WEBPACK_IMPORTED_MODULE_1__constants__["v" /* CALL_STATE_INCOMING_CALL */], __WEBPACK_IMPORTED_MODULE_1__constants__["w" /* CALL_STATE_INVITE_USERS */]].indexOf(dataObj.sdkStatus) > -1) {
        const callStatus = dataToSend.status;
        dataToSend['status'] = callStatus && callStatus.toLowerCase() || '';
    }

    if (dataToSend.fromUserJid) {
        dataToSend['userJid'] = dataToSend.fromUserJid;
        delete dataToSend.fromUserJid;
    }

    if (!dataToSend.userJid) {
        dataToSend['userJid'] = localUserJid;
    }

    dataToSend['localUser'] = dataToSend.userJid === localUserJid;

    if (dataObj.sdkStatus === __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]) {
        delete dataToSend.userJid;
    }
    return _extends({}, dataToSend);
};
/* unused harmony export getClientData */


/**
 * Verify the callListener callbacks regitered or not.
 * Send the data to client by calling the registered callback listener
 * @param {*} dataObj
 */
const sendDataToClient = dataObj => {
    const eventListenerMap = {
        [__WEBPACK_IMPORTED_MODULE_1__constants__["n" /* CALL_STATE_CALL_STATUS */]]: 'callStatusListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["A" /* CALL_STATE_MISSED_CALL */]]: 'missedCallListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["B" /* CALL_STATE_MUTE_STATUS */]]: 'muteStatusListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["G" /* CALL_STATE_USER_TRACK */]]: 'userTrackListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["o" /* CALL_STATE_CALL_SWITCH */]]: 'callSwitchListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]]: 'mediaErrorListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["v" /* CALL_STATE_INCOMING_CALL */]]: 'incomingCallListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["w" /* CALL_STATE_INVITE_USERS */]]: 'inviteUsersListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["e" /* CALL_CUSTOM_DATA */]]: 'customDataListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["V" /* CALL_STATUS_SPEAKING */]]: 'callSpeakingListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["_6" /* CALL_USERS_UPDATE */]]: 'callUsersUpdateListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["_7" /* CALL_USER_JOINED */]]: 'callUserJoinedListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["_8" /* CALL_USER_LEFT */]]: 'callUserLeftListener',
        [__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]]: 'helper'
    };
    const callbackListener = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])();
    dataObj = getClientData(dataObj);
    const sdkStatus = dataObj.sdkStatus;
    let statusListener = eventListenerMap[sdkStatus];
    if (!callbackListener[statusListener]) {
        statusListener = statusListener || sdkStatus;
        console.error(`${statusListener} callback method is not registered. So user will not receive the data from SDK.`);
        return;
    }
    delete dataObj.sdkStatus;

    if (sdkStatus === __WEBPACK_IMPORTED_MODULE_1__constants__["e" /* CALL_CUSTOM_DATA */]) {
        dataObj = dataObj.customData;
    }
    callbackListener[statusListener](dataObj);
};
/* harmony export (immutable) */ __webpack_exports__["x"] = sendDataToClient;


/**
 * Check Given user or local user is the call initiator or not
 * @param {*} filterVal - can be userJid|userCallId|socketId
 */
const isUserCallInitiator = filterVal => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    const user = Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && user.callInitiator);
};
/* harmony export (immutable) */ __webpack_exports__["r"] = isUserCallInitiator;


/**
 * Check Given user or local user is already in the call or not
 * @param {*} filterVal - can be userJid|userCallId|socketId
 * @param {object} user - user detail object
 */
const isUserOnCall = (filterVal, user) => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    user = user || Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && [__WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */], __WEBPACK_IMPORTED_MODULE_1__constants__["U" /* CALL_STATUS_RINGING */], __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */], __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */], __WEBPACK_IMPORTED_MODULE_1__constants__["X" /* CALL_STATUS_SUBSCRIBED */]].indexOf(user.status) > -1);
};
/* harmony export (immutable) */ __webpack_exports__["u"] = isUserOnCall;


/**
 * Check whether the given status is call status or not
 * @param {*} status
 */
const isCallStatus = status => {
    return [__WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */], __WEBPACK_IMPORTED_MODULE_1__constants__["U" /* CALL_STATUS_RINGING */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */], __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["J" /* CALL_STATUS_BUSY */], __WEBPACK_IMPORTED_MODULE_1__constants__["P" /* CALL_STATUS_ENGAGED */], __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* CALL_STATUS_ENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["N" /* CALL_STATUS_DISCONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["S" /* CALL_STATUS_RECEIVED */], __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */]].indexOf(status) > -1;
};
/* unused harmony export isCallStatus */


/**
 * Check given user is attended the call or not.
 * Attended call means, it will not contain the CALL_STATUS_CALLING && CALL_STATUS_RINGING status
 * @param {*} filterVal
 * @param {object} user - user detail object
 */
const isUserAttendedCall = (filterVal, user) => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    user = user || Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && [__WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */], __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */]].indexOf(user.status) > -1);
};
/* harmony export (immutable) */ __webpack_exports__["q"] = isUserAttendedCall;


/**
 * Check given user is joining the call or not.
 * Attended call means, it will not contain the CALL_STATUS_JOINING
 * @param {*} filterVal
 * @param {object} user - user detail object
 */
const isUserJoiningCall = (filterVal, user) => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    user = user || Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && [__WEBPACK_IMPORTED_MODULE_1__constants__["R" /* CALL_STATUS_JOINING */]].indexOf(user.status) > -1);
};
/* harmony export (immutable) */ __webpack_exports__["t"] = isUserJoiningCall;


/**
 * Check given user is connected the call or not.
 * Connected call means, it will contain CALL_STATUS_CONNECTED && CALL_STATUS_RECONNECT status only
 * @param {*} filterVal
 * @param {object} user - user detail object
 */
const isUserConnectedCall = (filterVal, user) => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    user = user || Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && [__WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */]].indexOf(user.status) > -1);
};
/* harmony export (immutable) */ __webpack_exports__["s"] = isUserConnectedCall;


/**
 * Check atleast one user is connected the call or not
 * @return {bool} true - atleast one user connected to the call
 * false - No user connected to the call
 */
const isAUserConnectedCall = () => {
    const users = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    return !!users.some(user => !user.localUser && isUserConnectedCall(user[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]], user));
};
/* harmony export (immutable) */ __webpack_exports__["l"] = isAUserConnectedCall;


/**
 * Get the call session status exit|closed
 * @param {*} userFilterVal
 */
const getCallSessionStatus = userFilterVal => {
    let attendedCount = 0;
    let callingCount = 0;
    let sessionStatus = null;
    let localUserAttendedCall = false;
    let localUserSubscribedCall = false;
    const users = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    const callInitiator = Object(__WEBPACK_IMPORTED_MODULE_5__users__["c" /* getCallInitiator */])();
    users.forEach(user => {
        if (user.localUser) {
            const status = user.status;
            if ([__WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */]].indexOf(status) > -1) {
                localUserAttendedCall = true;
            }
            if ([__WEBPACK_IMPORTED_MODULE_1__constants__["X" /* CALL_STATUS_SUBSCRIBED */]].indexOf(status) > -1) {
                localUserSubscribedCall = true;
            }
        } else {
            const status = user.status;
            if ([__WEBPACK_IMPORTED_MODULE_1__constants__["T" /* CALL_STATUS_RECONNECT */], __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */], __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */], __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */], __WEBPACK_IMPORTED_MODULE_1__constants__["Q" /* CALL_STATUS_HOLD */]].indexOf(status) > -1) {
                attendedCount = attendedCount + 1;
            }

            if ([__WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */], __WEBPACK_IMPORTED_MODULE_1__constants__["U" /* CALL_STATUS_RINGING */]].indexOf(status) > -1) {
                callingCount = callingCount + 1;
            }
        }
    });

    var _getCallInfo = Object(__WEBPACK_IMPORTED_MODULE_0__config__["e" /* getCallInfo */])(),
        _getCallInfo$behaviou = _getCallInfo.behaviour;

    let behaviour = _getCallInfo$behaviou === undefined ? "call" : _getCallInfo$behaviou;

    if (localUserAttendedCall && behaviour === "call") {
        if (callInitiator && userFilterVal === callInitiator[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]] && attendedCount === 0 && callingCount === 0 || callingCount === 0 && attendedCount === 0) {
            sessionStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */];
        }
    } else if (localUserSubscribedCall && behaviour === "call") {
        if (callingCount === 0 && attendedCount === 1) {
            sessionStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */];
        }
    } else {
        if ((callInitiator && userFilterVal === callInitiator[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]] && attendedCount === 0 || callingCount === 0 && attendedCount === 0) && behaviour === "call") {
            sessionStatus = __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */];
        }
    }
    return sessionStatus;
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getCallSessionStatus;


/**
 * If session status is close, Need to reset the current call data
 * @param {*} sessionStatus
 */
const checkCallSessionStatus = sessionStatus => {
    if (sessionStatus === __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */]) {
        Object(__WEBPACK_IMPORTED_MODULE_3__call__["x" /* exit */])();
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = checkCallSessionStatus;


/**
 * Send the missed call data to client which occured while create/join in room
 * @param {*} incomingCallObj
 */
const sendMissedCallDataToClient = incomingCallObj => {
    const callInfoObj = {
        roomId: incomingCallObj.roomId,
        callType: incomingCallObj.callType,
        userCallId: Object(__WEBPACK_IMPORTED_MODULE_0__config__["d" /* generateLocalUserCallId */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_3__call__["y" /* exitRoom */])(callInfoObj);
    incomingCallObj['sdkStatus'] = __WEBPACK_IMPORTED_MODULE_1__constants__["A" /* CALL_STATE_MISSED_CALL */];
    sendDataToClient(incomingCallObj);
    Object(__WEBPACK_IMPORTED_MODULE_3__call__["D" /* setIncomingCallObj */])();
};
/* harmony export (immutable) */ __webpack_exports__["y"] = sendMissedCallDataToClient;


const isReconnectIntervalRunning = userFilterVal => {
    const user = Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(userFilterVal);
    return !!(user && user.reconnectInterval);
};
/* unused harmony export isReconnectIntervalRunning */


const clearReconnectInterval = userFilterVal => {
    const user = Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(userFilterVal);
    if (!user) return;
    user.reconnectInterval && clearInterval(user.reconnectInterval);
    Object(__WEBPACK_IMPORTED_MODULE_5__users__["a" /* addOrUpdateCallUser */])({
        reconnectInterval: undefined,
        reconnectIntervalCount: 0,
        [__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]]: user[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]]
    });
};
/* harmony export (immutable) */ __webpack_exports__["b"] = clearReconnectInterval;


const clearAllReconnectInterval = () => {
    const users = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    users.forEach(user => clearReconnectInterval(user[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]]));
};
/* unused harmony export clearAllReconnectInterval */


/**
 * Reset the call details.
 */
const resetCallData = async () => {
    Object(__WEBPACK_IMPORTED_MODULE_6__media__["f" /* stopStream */])();
    clearAllReconnectInterval();
    Object(__WEBPACK_IMPORTED_MODULE_3__call__["D" /* setIncomingCallObj */])();
    Object(__WEBPACK_IMPORTED_MODULE_0__config__["v" /* setLocalUserCallId */])();
    Object(__WEBPACK_IMPORTED_MODULE_0__config__["q" /* setCallInfo */])();
    Object(__WEBPACK_IMPORTED_MODULE_0__config__["z" /* setSubscribeRoomData */])();
    Object(__WEBPACK_IMPORTED_MODULE_5__users__["f" /* setCallUsers */])();
    Object(__WEBPACK_IMPORTED_MODULE_0__config__["x" /* setSubscribeCallRequest */])(null);
    Object(__WEBPACK_IMPORTED_MODULE_0__config__["t" /* setJoinCallRequest */])(null);
};
/* harmony export (immutable) */ __webpack_exports__["w"] = resetCallData;


const isRemoteAudioMuted = userJid => {
    const callUsers = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    return callUsers.some(user => user.userJid === userJid && !!user.audioMuted);
};
/* harmony export (immutable) */ __webpack_exports__["n"] = isRemoteAudioMuted;


const isRemoteVideoMuted = userJid => {
    const callUsers = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    return callUsers.some(user => user.userJid === userJid && !!user.videoMuted);
};
/* harmony export (immutable) */ __webpack_exports__["o"] = isRemoteVideoMuted;


const isAllUsersVideoMuted = () => {
    const callUsers = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    return callUsers.every(user => !!user.videoMuted);
};
/* harmony export (immutable) */ __webpack_exports__["m"] = isAllUsersVideoMuted;


const generateCallTime = () => {
    return new Date().getTime() * 1000 * 1000;
};
/* harmony export (immutable) */ __webpack_exports__["d"] = generateCallTime;


/**
 * Validate to check whether the toUsers array contain the local user details
 * @param {*} toUsers
 */
const validateToUsers = toUsers => {
    const localUserJid = getCallLocalUserJid();
    const localUserIndex = toUsers.indexOf(localUserJid);
    // If local user jid found in toUsers array, then delete the local user jid
    // and if array length is 0, return error response
    localUserIndex > -1 && toUsers.splice(localUserIndex, 1);
    if (toUsers.length === 0) {
        return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])("Invalid users. You can't make a call to the same user.");
    }
    return toUsers;
};
/* harmony export (immutable) */ __webpack_exports__["z"] = validateToUsers;


const isRoomMatch = roomId => {
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_0__config__["e" /* getCallInfo */])();
    return !!(roomId && callInfo.roomId && roomId === callInfo.roomId);
};
/* harmony export (immutable) */ __webpack_exports__["p"] = isRoomMatch;


const getCallUsersLength = () => {
    const users = Object(__WEBPACK_IMPORTED_MODULE_5__users__["e" /* getCallUsers */])();
    return users.filter(user => isUserConnectedCall(null, user)).length;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = getCallUsersLength;


const getRoomDetailsByLink = async link => {
    const userToken = await Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["v" /* getUserToken */])();
    const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["d" /* getApiEndPoints */])();
    return await Object(__WEBPACK_IMPORTED_MODULE_7__service_api__["a" /* sendRequest */])("GET", `${apiEndpoints.callRoomDetails}?roomLink=${link}`, "", userToken);
};
/* harmony export (immutable) */ __webpack_exports__["i"] = getRoomDetailsByLink;


const isUserSubscribedCall = (filterVal, user) => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    user = user || Object(__WEBPACK_IMPORTED_MODULE_5__users__["d" /* getCallUser */])(filterVal);
    return !!(user && [__WEBPACK_IMPORTED_MODULE_1__constants__["X" /* CALL_STATUS_SUBSCRIBED */]].indexOf(user.status) > -1);
};
/* harmony export (immutable) */ __webpack_exports__["v"] = isUserSubscribedCall;


const getUserDetails = callbackListener => {
    let displayName = "";
    if (!callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]]) {
        console.error(`${__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]} object is not implemented. So user details will send as null from SDK.`);
    } else if (!callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]].getDisplayName) {
        console.error(`${__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]} object getDisplayName method is not implemented. So user details will send as null from SDK.`);
    } else {
        displayName = callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]].getDisplayName();
    }

    return {
        displayName
    };
};
/* harmony export (immutable) */ __webpack_exports__["k"] = getUserDetails;


const getPermissionDeniedError = (callType, havingVideoPermission, havingAudioPermission) => {
    if (callType === __WEBPACK_IMPORTED_MODULE_8__helpers_constants__["_76" /* VIDEO */] && !havingVideoPermission && !havingAudioPermission) {
        return {
            message: "Camera and microphone permissions denied",
            error: "Both camera and microphone permissions denied",
            statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_9" /* CAMERA_MIC_PERMISSION_DENIED */],
            device: "mic & camera",
            action: "makeCall",
            sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
        };
    } else if (callType === __WEBPACK_IMPORTED_MODULE_8__helpers_constants__["_76" /* VIDEO */] && !havingVideoPermission) {
        return {
            message: "Camera permission denied",
            error: "Camera permission denied",
            statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_10" /* CAMERA_PERMISSION_DENIED */],
            device: "camera",
            action: "makeCall",
            sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
        };
    } else if (!havingAudioPermission) {
        return {
            message: "Microphone permission denied",
            error: "Microphone permission denied",
            statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIC_PERMISSION_DENIED */],
            device: "mic",
            action: "makeCall",
            sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
        };
    }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = getPermissionDeniedError;


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const CALLER_DEVICE = 'web';
/* harmony export (immutable) */ __webpack_exports__["b"] = CALLER_DEVICE;

const RECONNECT_INTERVAL_DURATION = 25;
/* unused harmony export RECONNECT_INTERVAL_DURATION */

const CALL_RINGING_DURATION = 30000;
/* harmony export (immutable) */ __webpack_exports__["j"] = CALL_RINGING_DURATION;

// Call log states
const CALL_LOG_OUTGOING_CALL_STATE = 1;
/* harmony export (immutable) */ __webpack_exports__["i"] = CALL_LOG_OUTGOING_CALL_STATE;

const CALL_LOG_MISSED_CALL_STATE = 0;
/* harmony export (immutable) */ __webpack_exports__["h"] = CALL_LOG_MISSED_CALL_STATE;

const CALL_LOG_ANSWERED_CALL_STATE = 2;
/* harmony export (immutable) */ __webpack_exports__["g"] = CALL_LOG_ANSWERED_CALL_STATE;

// Socket Event handler
const CALL_STATE_ID = 'id';
/* harmony export (immutable) */ __webpack_exports__["u"] = CALL_STATE_ID;

const CALL_STATE_CREATED = 'created';
/* harmony export (immutable) */ __webpack_exports__["r"] = CALL_STATE_CREATED;

const CALL_STATE_JOIN = 'join';
/* harmony export (immutable) */ __webpack_exports__["x"] = CALL_STATE_JOIN;

const CALL_STATE_JOINED = 'joined';
/* harmony export (immutable) */ __webpack_exports__["y"] = CALL_STATE_JOINED;

const CALL_STATE_SUBSCRIBED = 'subscribed';
/* harmony export (immutable) */ __webpack_exports__["E"] = CALL_STATE_SUBSCRIBED;

const CALL_STATE_FAILURE = 'failure';
/* harmony export (immutable) */ __webpack_exports__["t"] = CALL_STATE_FAILURE;

const CALL_STATE_OFFER = 'offer';
/* harmony export (immutable) */ __webpack_exports__["C"] = CALL_STATE_OFFER;

const CALL_STATE_ANSWER = 'answer';
/* harmony export (immutable) */ __webpack_exports__["l"] = CALL_STATE_ANSWER;

const CALL_STATE_CANDIDATE = 'candidate';
/* harmony export (immutable) */ __webpack_exports__["q"] = CALL_STATE_CANDIDATE;

const CALL_STATE_EXIT = 'exit';
/* harmony export (immutable) */ __webpack_exports__["s"] = CALL_STATE_EXIT;

const CALL_STATE_MESSAGE = 'message';
/* harmony export (immutable) */ __webpack_exports__["z"] = CALL_STATE_MESSAGE;

const CALL_STATE_PING = 'PING';
/* harmony export (immutable) */ __webpack_exports__["D"] = CALL_STATE_PING;

const CALL_STATE_USER_TRACK = 'USER_TRACK';
/* harmony export (immutable) */ __webpack_exports__["G"] = CALL_STATE_USER_TRACK;

const CALL_STATE_AUDIO_MUTE = 'AUDIO_MUTE';
/* harmony export (immutable) */ __webpack_exports__["m"] = CALL_STATE_AUDIO_MUTE;

const CALL_STATE_VIDEO_MUTE = 'VIDEO_MUTE';
/* harmony export (immutable) */ __webpack_exports__["H"] = CALL_STATE_VIDEO_MUTE;

const CALL_STATE_CALL_STATUS = 'CALL_STATUS';
/* harmony export (immutable) */ __webpack_exports__["n"] = CALL_STATE_CALL_STATUS;

const CALL_STATE_MUTE_STATUS = 'MUTE_STATUS';
/* harmony export (immutable) */ __webpack_exports__["B"] = CALL_STATE_MUTE_STATUS;

const CALL_STATE_MISSED_CALL = 'MISSED_CALL';
/* harmony export (immutable) */ __webpack_exports__["A"] = CALL_STATE_MISSED_CALL;

const CALL_STATE_CALL_SWITCH = 'CALL_CONVERSION';
/* harmony export (immutable) */ __webpack_exports__["o"] = CALL_STATE_CALL_SWITCH;

const CALL_STATE_CALL_SWITCH_RES = 'CALL_CONVERSION_RESPONSE';
/* harmony export (immutable) */ __webpack_exports__["p"] = CALL_STATE_CALL_SWITCH_RES;

const CALL_STATE_INVITE_USERS = 'INVITEUSERS';
/* harmony export (immutable) */ __webpack_exports__["w"] = CALL_STATE_INVITE_USERS;

const CALL_STATE_USER_ONLINE = 'USER_ONLINE';
/* harmony export (immutable) */ __webpack_exports__["F"] = CALL_STATE_USER_ONLINE;

const UPDATE_SOCKET_ID = 'UPDATE_SOCKET_ID';
/* harmony export (immutable) */ __webpack_exports__["_24"] = UPDATE_SOCKET_ID;

const CALL_STATE_INCOMING_CALL = 'INCOMING_CALL';
/* harmony export (immutable) */ __webpack_exports__["v"] = CALL_STATE_INCOMING_CALL;

const CALL_CUSTOM_DATA = 'CUSTOM_DATA';
/* harmony export (immutable) */ __webpack_exports__["e"] = CALL_CUSTOM_DATA;

const CALL_USERS_UPDATE = "CALL_USERS_UPDATE";
/* harmony export (immutable) */ __webpack_exports__["_6"] = CALL_USERS_UPDATE;

const CALL_USER_JOINED = "CALL_USER_JOINED";
/* harmony export (immutable) */ __webpack_exports__["_7"] = CALL_USER_JOINED;

const CALL_USER_LEFT = "CALL_USER_LEFT";
/* harmony export (immutable) */ __webpack_exports__["_8"] = CALL_USER_LEFT;

// Call Type
const CALL_TYPE_AUDIO = 'audio';
/* harmony export (immutable) */ __webpack_exports__["_4"] = CALL_TYPE_AUDIO;

const CALL_TYPE_VIDEO = 'video';
/* harmony export (immutable) */ __webpack_exports__["_5"] = CALL_TYPE_VIDEO;


// Call status
const CALL_STATUS_CALLING = 'CALLING';
/* harmony export (immutable) */ __webpack_exports__["K"] = CALL_STATUS_CALLING;

const CALL_STATUS_RINGING = 'RINGING';
/* harmony export (immutable) */ __webpack_exports__["U"] = CALL_STATUS_RINGING;

const CALL_STATUS_BUSY = 'BUSY';
/* harmony export (immutable) */ __webpack_exports__["J"] = CALL_STATUS_BUSY;

const CALL_STATUS_ENGAGED = 'ENGAGED';
/* harmony export (immutable) */ __webpack_exports__["P"] = CALL_STATUS_ENGAGED;

const CALL_STATUS_ENDED = 'ENDED';
/* harmony export (immutable) */ __webpack_exports__["O"] = CALL_STATUS_ENDED;

const CALL_STATUS_ATTENDED = 'ATTENDED';
/* harmony export (immutable) */ __webpack_exports__["I"] = CALL_STATUS_ATTENDED;

const CALL_STATUS_CONNECTED = 'CONNECTED';
/* harmony export (immutable) */ __webpack_exports__["L"] = CALL_STATUS_CONNECTED;

const CALL_STATUS_DISCONNECTED = 'DISCONNECTED';
/* harmony export (immutable) */ __webpack_exports__["N"] = CALL_STATUS_DISCONNECTED;

const CALL_STATUS_RECONNECT = 'RECONNECTING';
/* harmony export (immutable) */ __webpack_exports__["T"] = CALL_STATUS_RECONNECT;

const CALL_STATUS_CONNECTING = 'CONNECTING';
/* harmony export (immutable) */ __webpack_exports__["M"] = CALL_STATUS_CONNECTING;

const CALL_STATUS_RECEIVED = 'RECEIVED';
/* harmony export (immutable) */ __webpack_exports__["S"] = CALL_STATUS_RECEIVED;

const CALL_STATUS_SPEAKING = 'SPEAKING';
/* harmony export (immutable) */ __webpack_exports__["V"] = CALL_STATUS_SPEAKING;

const CALL_STATUS_USER_STATUS = 'USERSTATUS';
/* harmony export (immutable) */ __webpack_exports__["Y"] = CALL_STATUS_USER_STATUS;

const CALL_STATUS_STATUS = 'CALL_STATUS';
/* harmony export (immutable) */ __webpack_exports__["W"] = CALL_STATUS_STATUS;

const CALL_STATUS_HOLD = 'HOLD';
/* harmony export (immutable) */ __webpack_exports__["Q"] = CALL_STATUS_HOLD;

const CALL_STATUS_SUBSCRIBED = 'SUBSCRIBED';
/* harmony export (immutable) */ __webpack_exports__["X"] = CALL_STATUS_SUBSCRIBED;

const CALL_STATUS_JOINING = 'JOINING';
/* harmony export (immutable) */ __webpack_exports__["R"] = CALL_STATUS_JOINING;


// Media device
const MEDIA_DEVICE_MIC = 'mic';
/* harmony export (immutable) */ __webpack_exports__["_18"] = MEDIA_DEVICE_MIC;

const MEDIA_DEVICE_CAMERA = 'camera';
/* harmony export (immutable) */ __webpack_exports__["_17"] = MEDIA_DEVICE_CAMERA;

// Call session status
const CALL_SESSION_STATUS_EXIT = 'exit';
/* unused harmony export CALL_SESSION_STATUS_EXIT */

const CALL_SESSION_STATUS_CLOSED = 'closed';
/* harmony export (immutable) */ __webpack_exports__["k"] = CALL_SESSION_STATUS_CLOSED;

// PEER CONNECTION STATUS
const PEER_CONN_STATUS_CONNECTED = 'connected';
/* unused harmony export PEER_CONN_STATUS_CONNECTED */

const PEER_CONN_STATUS_FAILED = 'failed';
/* unused harmony export PEER_CONN_STATUS_FAILED */

const PEER_CONN_STATUS_DISCONNECTED = 'disconnected';
/* unused harmony export PEER_CONN_STATUS_DISCONNECTED */

const PEER_CONN_STATUS_CLOSED = 'closed';
/* unused harmony export PEER_CONN_STATUS_CLOSED */

// Call conversion status
const CALL_SWITCH_REQUEST = 'request';
/* harmony export (immutable) */ __webpack_exports__["_2"] = CALL_SWITCH_REQUEST;

const CALL_SWITCH_CANCEL = 'cancel';
/* harmony export (immutable) */ __webpack_exports__["_0"] = CALL_SWITCH_CANCEL;

const CALL_SWITCH_ACCEPT = 'accept';
/* harmony export (immutable) */ __webpack_exports__["Z"] = CALL_SWITCH_ACCEPT;

const CALL_SWITCH_DECLINE = 'decline';
/* harmony export (immutable) */ __webpack_exports__["_1"] = CALL_SWITCH_DECLINE;

const CALL_SWITCH_TIMEOUT = 'timeout';
/* harmony export (immutable) */ __webpack_exports__["_3"] = CALL_SWITCH_TIMEOUT;

// Media Error
const MEDIA_ACCESS_ERROR = 'MEDIA_ACCESS_ERROR';
/* harmony export (immutable) */ __webpack_exports__["_16"] = MEDIA_ACCESS_ERROR;

const CALL_DISCONNECTED_ALREADY = "Call Disconnected Already";
/* harmony export (immutable) */ __webpack_exports__["f"] = CALL_DISCONNECTED_ALREADY;

const HELPER = "helper";
/* harmony export (immutable) */ __webpack_exports__["_11"] = HELPER;

//Status Code
const BADREQUEST = 400;
/* unused harmony export BADREQUEST */

const SUCCESS = 200;
/* harmony export (immutable) */ __webpack_exports__["_21"] = SUCCESS;

//Call Type
const AUDIO = "audio";
/* harmony export (immutable) */ __webpack_exports__["a"] = AUDIO;

//Success Message
const SUCCESS_CODE = 100500;
/* harmony export (immutable) */ __webpack_exports__["_22"] = SUCCESS_CODE;

//Error Messages
const INVALID_CALL_LINK_CODE = 100601;
/* harmony export (immutable) */ __webpack_exports__["_15"] = INVALID_CALL_LINK_CODE;

const INVALID_CALL_LINK = "Not a valid call link";
/* harmony export (immutable) */ __webpack_exports__["_14"] = INVALID_CALL_LINK;

const CALL_ALREADY_ENDED_CODE = 100602;
/* harmony export (immutable) */ __webpack_exports__["d"] = CALL_ALREADY_ENDED_CODE;

const CALL_ALREADY_ENDED = "Call already ended";
/* harmony export (immutable) */ __webpack_exports__["c"] = CALL_ALREADY_ENDED;

const INTERNAL_SERVER_ERROR_CODE = 100605;
/* harmony export (immutable) */ __webpack_exports__["_13"] = INTERNAL_SERVER_ERROR_CODE;

const INTERNAL_SERVER_ERROR = "Internal server error";
/* harmony export (immutable) */ __webpack_exports__["_12"] = INTERNAL_SERVER_ERROR;

const SUCCESS_MESSAGE = "Success";
/* harmony export (immutable) */ __webpack_exports__["_23"] = SUCCESS_MESSAGE;

const PERMISSION_DENIED = "Permission denied";
/* harmony export (immutable) */ __webpack_exports__["_20"] = PERMISSION_DENIED;

const MIC_PERMISSION_DENIED = 100606;
/* harmony export (immutable) */ __webpack_exports__["_19"] = MIC_PERMISSION_DENIED;

const CAMERA_PERMISSION_DENIED = 100607;
/* harmony export (immutable) */ __webpack_exports__["_10"] = CAMERA_PERMISSION_DENIED;

const CAMERA_MIC_PERMISSION_DENIED = 100608;
/* harmony export (immutable) */ __webpack_exports__["_9"] = CAMERA_MIC_PERMISSION_DENIED;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(11);
var inherits = __webpack_require__(0);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__db_controllers_OfflineActionTable__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__db_realmDB__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__service_auth__ = __webpack_require__(96);
// migration Done (09-12-21)

/* eslint-disable prefer-const */
/* eslint-disable arrow-body-style */







const KEY_TOKEN = 'mirrorFlyToken';
const KEY_USER_PROFILE = 'profile';

let /* _indexDbSupported = false, */
// _db,
_token,

// _transaction,
// isOnline,
_sdk_offlineStanzas = [];

/**
 * returns true if the currentState is "active"
 * and false for other states like "inactive" or "background"
 * @returns {boolean}
 */
// export const getOnlineStatus = () => isOnline;
const getOnlineStatus = () => __WEBPACK_IMPORTED_MODULE_1_react_native__["AppState"].currentState === 'active' && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])() && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])().connected && __WEBPACK_IMPORTED_MODULE_5__service_auth__["b" /* connectionStatus */].isConnected;
/* harmony export (immutable) */ __webpack_exports__["b"] = getOnlineStatus;


// const addEventListeners = () => {
//   window.addEventListener("online", async () => {
//     isOnline = true;
//   });
//   window.addEventListener("offline", () => {
//     isOnline = false;
//   });
// };

// const dbHasObjectStore = (objectName) => {
//   if (!_db || !objectName) return false;
//   return _db.objectStoreNames.contains(objectName);
// };

// const createObjectStore = (objectName) => {
//   if (!_db || !objectName) return;
//   !dbHasObjectStore(objectName) && _db.createObjectStore(objectName);
// };

const getStanzas = async () => _sdk_offlineStanzas.length ? _sdk_offlineStanzas : await Object(__WEBPACK_IMPORTED_MODULE_3__db_controllers_OfflineActionTable__["c" /* getOfflineAction */])();
/* unused harmony export getStanzas */


const processFailedStanzas = async () => {
  const pendingStanzas = await getStanzas();
  for (const element of pendingStanzas) {
    const stanza = element;
    const xmlDoc = new window.DOMParser().parseFromString(stanza, 'text/xml').firstChild;
    if (getOnlineStatus()) {
      Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["b" /* getConnection */])().sendIQ(xmlDoc);
      Object(__WEBPACK_IMPORTED_MODULE_3__db_controllers_OfflineActionTable__["b" /* deleteOfflineAction */])(element);
    } else {
      break;
    }
  }
  _sdk_offlineStanzas = [];
};
/* harmony export (immutable) */ __webpack_exports__["e"] = processFailedStanzas;


// export const initializeDatabase = () => {
//   return new Promise((resolve) => {
//     if (_db) {
//       resolve();
//       return;
//     }

//     require("fake-indexeddb/auto");
//     _indexDbSupported = false;
//     _db = null;
//     _token = null;
//     isOnline = navigator.onLine;
//     // addEventListeners(); // unsupported code

//     if ("indexedDB" in window) {
//       const openRequest = window.indexedDB.open("mirrorfly", 1);
//       openRequest.onupgradeneeded = (e) => {
//         _db = e.target.result;
//         createObjectStore("userDetails");
//       };
//       openRequest.onsuccess = (e) => {
//         _indexDbSupported = true;
//         _db = e.target.result;
//         resolve();
//       };
//       openRequest.onerror = (e) => {
//         resolve(e);
//       };
//     }
//   });
// };

const setStanza = allStanzas => {
  _sdk_offlineStanzas = allStanzas;
};
/* unused harmony export setStanza */


const addStanza = async (stanza, id = '', type = '') => {
  _sdk_offlineStanzas.push(stanza);
  const params = {
    _id: id,
    toJid: id,
    actionType: type,
    iqString: stanza
  };
  Object(__WEBPACK_IMPORTED_MODULE_3__db_controllers_OfflineActionTable__["a" /* createOfflineAction */])(params);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = addStanza;


const removeStanza = async msgId => {
  const _offlineStanzas = await getStanzas();
  const realm = await Object(__WEBPACK_IMPORTED_MODULE_4__db_realmDB__["a" /* getRealmDB */])();
  const updatedStanza = _offlineStanzas.filter(element => {
    const stanza = realm.objects('OfflineActionTable').filtered(`iqString CONTAINS[c] "${msgId}"`);
    if (element === stanza[0].iqString) {
      // We have check this for multiple stanza remove
      Object(__WEBPACK_IMPORTED_MODULE_3__db_controllers_OfflineActionTable__["b" /* deleteOfflineAction */])(element);
    }
    if (element !== stanza[0].iqString) return element;
  });
  setStanza(updatedStanza);
  // const updatedStanza = _offlineStanzas.foreach(xmlString => {
  //   console.log(xmlString.includes(`id='${msgId}'`), 'xmlString.includes()');
  //   if (xmlString.includes(`id='${msgId}'`)) {
  //     console.log(xmlString, 'removeStanza xmlString');
  //     deleteOfflineAction(xmlString);
  //   }
  //   if (!xmlString.includes(`id='${msgId}'`)) return xmlString;
  // });
  // setStanza(updatedStanza);
};
/* harmony export (immutable) */ __webpack_exports__["f"] = removeStanza;


/**
 * Sets the data to the given key in AsyncStorage
 * @returns {Promise}
 */
const setAsyncData = (key, value) => {
  let updatedValue = value;
  if (typeof value === 'object') {
    updatedValue = JSON.stringify(value);
  }
  return __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default.a.setItem(key, updatedValue);
};

/**
 * Gets the data for the given key from AsyncStorage
 * @returns {Promise}
 */
const getAsyncData = key => __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default.a.getItem(key);

/**
 * Gets the data for the given key from AsyncStorage and parse the string to JSON(object)
 * @returns {Promise}
 */
const getJSONParsedAsyncData = key => getAsyncData(key).then(data => JSON.parse(data || '{}'));

// const getCookie = (sKey) => {
//   const cookie =
//     decodeURIComponent(
//       document.cookie.replace(
//         new RegExp(
//           "(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"
//         ),
//         "$1"
//       )
//     ) || null;
//   return Promise.resolve(cookie);
// };

// const setCookie = (sKey, sValue, vEnd, sPath, sDomain, bSecure) => {
//   if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
//     return false;
//   }
//   let sExpires = "";
//   if (vEnd) {
//     switch (vEnd.constructor) {
//       case Number:
//         sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
//         break;
//       case String:
//         sExpires = "; expires=" + vEnd;
//         break;
//       case Date:
//         sExpires = "; expires=" + vEnd.toUTCString();
//         break;
//       default:
//         break;
//     }
//   }
//   document.cookie =
//     encodeURIComponent(sKey) +
//     "=" +
//     encodeURIComponent(sValue) +
//     sExpires +
//     (sDomain ? "; domain=" + sDomain : "") +
//     (sPath ? "; path=" + sPath : "") +
//     (bSecure ? "; secure" : "");
//   return true;
// };

const setToken = token => {
  _token = token;
  return setAsyncData(KEY_TOKEN, token);
  // window.localStorage.setItem("token", token);
  // if (!_indexDbSupported) return setCookie("token", token);
  // _transaction = _db.transaction(["userDetails"], "readwrite");
  // _transaction.objectStore("userDetails").put(token, "token");
  // _token = token;
  // return token;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = setToken;


const getToken = () => {
  if (_token) return Promise.resolve(_token);
  return getAsyncData(KEY_TOKEN);
  // if (!_indexDbSupported) return getCookie("token");
  // return new Promise((resolve) => {
  //   _transaction = _db.transaction(["userDetails"], "readwrite");
  //   _transaction.objectStore("userDetails").get("token").onsuccess = (e) => resolve(e.target.result);
  // });
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getToken;


const setUserProfile = profile => {
  // setAsyncData(KEY_USER_PROFILE, JSON.stringify(profile));
  // updateVcardDetail(profile)
  // if (!_indexDbSupported) return setCookie("profile", JSON.stringify(profile));
  // _transaction = _db.transaction(["userDetails"], "readwrite");
  // _transaction.objectStore("userDetails").put(JSON.stringify(profile), "profile");
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["h"] = setUserProfile;


const getUserProfile = async () => {
  return getJSONParsedAsyncData(KEY_USER_PROFILE);
  // if (!_indexDbSupported) {
  //   const userProfile = (await getCookie("profile")) || "{}";
  //   return JSON.parse(userProfile);
  // }
  // return new Promise((resolve) => {
  //   _transaction = _db.transaction(["userDetails"], "readwrite");
  //   _transaction.objectStore("userDetails").get("profile").onsuccess = (e) =>
  //     resolve(e.target.result ? JSON.parse(e.target.result) : {});
  // });
};
/* harmony export (immutable) */ __webpack_exports__["d"] = getUserProfile;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_18__;

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__strophe_msgstanza__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__controllers_messageTable__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_moment__ = __webpack_require__(380);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_utils__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_native_fs__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_native_fs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_react_native_fs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__controllers_recentTable__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__controllers_roasterTable__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__controllers_messageDetailTable__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__controllers_mediaDetailTable__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__realmDB__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__controllers_locationMessageTable__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__controllers_contactMessageTable__ = __webpack_require__(196);

















const handleUnSentMsg = async () => {
  try {
    const unSentMessages = await Object(__WEBPACK_IMPORTED_MODULE_4__controllers_messageTable__["d" /* getAllUnSentMsg */])();
    let replyTo = '';
    unSentMessages.forEach(async element => {
      let msgResponse, cypherText, fileToken;
      if (element.msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */]) {
        msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_6__modules_utils__["d" /* handleMessages */])(element.msgBody.message, __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */], element.msgId, replyTo, element.fromUserJid, '', {});
        cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), element.msgId);
        // Validating JID to Send Message to Single/Group Chat
        if (__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_23" /* MIX_BARE_JID */].test(element.fromUserJid)) Object(__WEBPACK_IMPORTED_MODULE_3__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(element.fromUserJid, element.mid, __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */], cypherText);
        Object(__WEBPACK_IMPORTED_MODULE_3__strophe_msgstanza__["d" /* sendMessageIQ */])(element.fromUserJid, element.msgId, __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */], cypherText);
      }
      if (element.msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */] || element.msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */]) {
        var _element$msgBody$medi = element.msgBody.media;
        const caption = _element$msgBody$medi.caption,
              duration = _element$msgBody$medi.duration,
              local_path = _element$msgBody$medi.local_path,
              file_size = _element$msgBody$medi.file_size,
              originalWidth = _element$msgBody$medi.originalWidth,
              originalHeight = _element$msgBody$medi.originalHeight,
              fileName = _element$msgBody$medi.fileName,
              thumb_image = _element$msgBody$medi.thumb_image,
              file_url = _element$msgBody$medi.file_url,
              webWidth = _element$msgBody$medi.webWidth,
              webHeight = _element$msgBody$medi.webHeight;

        const file = {
          modificationTimestamp: Date.now(),
          extension: local_path,
          uri: local_path,
          fileSize: file_size,
          width: originalWidth,
          height: originalHeight,
          filename: fileName,
          duration: duration
        },
              fileOptions = {
          caption: caption,
          thumbImage: thumb_image,
          fileToken: file_url,
          webHeight,
          webWidth
        };
        msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_6__modules_utils__["d" /* handleMessages */])('', element.msgBody.message_type, element.msgId, '', element.fromUserJid, file, fileOptions);
        cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), element.msgId);
        fileToken = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["o" /* getFileTokenFromMsgBody */])(msgResponse.message);
        if (msgResponse.statusCode === 200) {
          if (__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_23" /* MIX_BARE_JID */].test(element.fromUserJid)) return Object(__WEBPACK_IMPORTED_MODULE_3__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(element.fromUserJid, element.msgId, element.msgBody.message_type, cypherText, fileToken, msgResponse.message.media.thumb_image);
          return Object(__WEBPACK_IMPORTED_MODULE_3__strophe_msgstanza__["d" /* sendMessageIQ */])(element.fromUserJid, element.msgId, element.msgBody.message_type, cypherText, fileToken, msgResponse.message.media.thumb_image);
        }
      }
    });
  } catch (error) {
    console.log('handleUnSentMsg', error);
  }
};
/* unused harmony export handleUnSentMsg */


/**
 * changeTimeFormat() method to perform convert Timestamp it's effectively works for 16 digit to Time format.
 *
 * @param {timeStamp} time
 */

const changeTimeFormat = time => {
  if (!time) {
    return '';
  } else if (time.toString().length === 16) {
    return __WEBPACK_IMPORTED_MODULE_5_moment___default()(time / 1000000 * 1000).utc().format('YYYY-MM-DD HH:mm:ss');
  } else {
    return __WEBPACK_IMPORTED_MODULE_5_moment___default()(time).utc().format('YYYY-MM-DD HH:mm:ss');
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = changeTimeFormat;

const getRandomColorCode = () => {
  let colorCode;
  do {
    colorCode = '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
  } while (isTooLight(colorCode)); // Check if the color is too light
  return colorCode;
};
/* harmony export (immutable) */ __webpack_exports__["h"] = getRandomColorCode;


const isTooLight = colorCode => {
  // Convert colorCode to RGB values
  const r = parseInt(colorCode.substr(1, 2), 16);
  const g = parseInt(colorCode.substr(3, 2), 16);
  const b = parseInt(colorCode.substr(5, 2), 16);

  // Calculate relative luminance (perceptual brightness)
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

  // Return true if the luminance is too high (i.e., color is too light)
  return luminance > 0.5;
};

const dbClear = async () => {
  const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
  realm.write(() => {
    realm.deleteAll();
  });
};
/* harmony export (immutable) */ __webpack_exports__["c"] = dbClear;


const dbRegisterClear = async userIdentifier => {
  const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
  const prevUser = await __WEBPACK_IMPORTED_MODULE_0__react_native_async_storage_async_storage___default.a.getItem('prevUserIdentifier');
  if (prevUser && userIdentifier !== prevUser) {
    realm.write(() => {
      realm.deleteAll();
    });
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = dbRegisterClear;


const mediaDetailConstructor = (chatMessage, mediaDetail) => {
  try {
    return {
      androidHeight: mediaDetail.mobileHeight,
      androidWidth: mediaDetail.mobileWidth,
      caption: mediaDetail.caption,
      duration: mediaDetail.duration,
      fileName: mediaDetail.fileName,
      file_key: mediaDetail.fileKey,
      file_url: mediaDetail.fileUrl,
      file_size: mediaDetail.fileSize,
      is_downloaded: mediaDetail.isDownloaded,
      is_uploading: mediaDetail.isUploading,
      local_path: mediaDetail.localPath ? 'file://' + __WEBPACK_IMPORTED_MODULE_7_react_native_fs___default.a.DocumentDirectoryPath + '/' + mediaDetail.localPath : '',
      msgId: chatMessage.mid,
      originalHeight: mediaDetail.originalHeight,
      originalWidth: mediaDetail.originalWidth,
      thumb_image: mediaDetail.thumbImage,
      webWidth: mediaDetail.webWidth,
      webHeight: mediaDetail.webHeight,
      fileType: mediaDetail.fileType
    };
  } catch (error) {
    console.log('mediaDetailConstructor', error);
    return {};
  }
};
/* unused harmony export mediaDetailConstructor */


const replyMsgConstructor = (replyId, realm) => {
  const messageTable = realm.objectForPrimaryKey('MessageTable', replyId);
  let _msgBody = {};
  if (messageTable.msgType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */]) {
    _msgBody = Object(__WEBPACK_IMPORTED_MODULE_10__controllers_messageDetailTable__["b" /* getMessageDetail */])(replyId, realm);
  }
  if (messageTable.msgType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */] || messageTable.msgType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */] || messageTable.msgType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["i" /* AUDIO */] || messageTable.msgType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["C" /* FILE */]) {
    const mediaDetail = Object(__WEBPACK_IMPORTED_MODULE_11__controllers_mediaDetailTable__["c" /* getMediaDetailWithRealm */])(mid, realm);
    _msgBody = mediaDetailConstructor(messageTable, mediaDetail);
  }
  const chatType = !messageTable ? '' : messageTable.chatType,
        createdAt = !messageTable ? 0 : changeTimeFormat(messageTable.msgTime),
        deleteStatus = !messageTable ? 0 : messageTable.isDeleted,
        fromUserId = messageTable.publisherJid.split('@')[0],
        msgBody = _msgBody,
        msgId = !messageTable ? '' : messageTable.mid,
        msgStatus = !messageTable ? 3 : messageTable.status,
        msgType = !messageTable ? '' : messageTable.msgType,
        publisherId = !messageTable ? '' : messageTable.publisherJid.split('@')[0],
        timestamp = messageTable.msgTime;
  return {
    chatType,
    createdAt,
    deleteStatus,
    fromUserId,
    msgId,
    msgStatus,
    msgBody,
    msgType,
    publisherId,
    timestamp
  };
};
/* unused harmony export replyMsgConstructor */


const msgBodyConstructor = (chatMessage, realm, nickName = '') => {
  try {
    let msgBody = {};
    msgBody = Object(__WEBPACK_IMPORTED_MODULE_10__controllers_messageDetailTable__["b" /* getMessageDetail */])(chatMessage.mid, realm) || {};
    msgBody.nickName = nickName;
    msgBody.message_type = chatMessage.msgType;
    switch (chatMessage.msgType) {
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */]:
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */]:
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["i" /* AUDIO */]:
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["C" /* FILE */]:
        const mediaDetail = Object(__WEBPACK_IMPORTED_MODULE_11__controllers_mediaDetailTable__["c" /* getMediaDetailWithRealm */])(chatMessage.mid, realm);
        if (mediaDetail) {
          msgBody.media = mediaDetailConstructor(chatMessage, mediaDetail);
          msgBody.nickName = nickName;
        }
        break;
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_6" /* LOCATION */]:
        msgBody.location = Object(__WEBPACK_IMPORTED_MODULE_14__controllers_locationMessageTable__["b" /* getLocationMsg */])(realm, chatMessage.mid);
        break;
      case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["w" /* CONTACT */]:
        msgBody.contact = Object(__WEBPACK_IMPORTED_MODULE_15__controllers_contactMessageTable__["b" /* getContactMsg */])(realm, chatMessage.mid);
        break;
    }
    return msgBody;
  } catch (error) {
    console.log('msgBodyConstructor', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = msgBodyConstructor;


const deleteChatDB = toJid => {
  try {
    Object(__WEBPACK_IMPORTED_MODULE_9__controllers_roasterTable__["a" /* deleteRoaster */])(toJid);
    Object(__WEBPACK_IMPORTED_MODULE_8__controllers_recentTable__["a" /* deleteRecentChat */])(toJid);
    Object(__WEBPACK_IMPORTED_MODULE_4__controllers_messageTable__["a" /* clearChatDB */])(toJid);
  } catch (error) {
    console.log('deleteChatDB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = deleteChatDB;


const getMsgDetails = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
    const chatMessage = Object(__WEBPACK_IMPORTED_MODULE_4__controllers_messageTable__["e" /* getMessagefrmDB */])(realm, mid);
    let msgBody = {};
    if (chatMessage) {
      msgBody = msgBodyConstructor(chatMessage, realm);
    }
    return msgBody;
  } catch (error) {
    console.log('getMsgDetail', error);
    return {};
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = getMsgDetails;


const getMessageByIdDB = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
    const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    const messageTable = realm.objectForPrimaryKey('MessageTable', mid);
    if (!messageTable) {
      successRes.data = {};
      successRes.message = __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_28" /* NO_MEESAGE_FOUND_DB */];
      return successRes.data;
    }
    const recentChatList = realm.objects('RecentTable').filtered('mid = $0', mid);
    let chatUserJid, msgTime;
    if (recentChatList.length) {
      chatUserJid = recentChatList[0].jid;
      msgTime = recentChatList[0].msgTime;
    } else {
      chatUserJid = messageTable.chatUser;
      msgTime = messageTable.msgTime;
    }
    const roaster = realm.objectForPrimaryKey('RoasterTable', chatUserJid);
    const message = {
      mid: mid,
      msgType: messageTable ? messageTable.msgType : ''
    };
    const chatType = messageTable.chatType,
          createdAt = !messageTable ? '' : changeTimeFormat(messageTable.msgTime),
          deleteStatus = !messageTable ? 0 : messageTable.isDeleted,
          fromUserId = roaster.jid.split('@')[0],
          fromUserJid = roaster.jid,
          msgBody = msgBodyConstructor(message, realm, ''),
          msgId = !messageTable ? '' : messageTable.mid,
          msgStatus = !messageTable ? 4 : messageTable.status,
          msgType = !messageTable ? '' : messageTable.msgType,
          publisherId = !messageTable ? '' : messageTable.publisherJid.split('@')[0],
          publisherJid = messageTable.publisherJid,
          timestamp = msgTime,
          userId = roaster.jid.split('@')[0],
          userJid = roaster.jid;

    const data = {
      chatType,
      createdAt,
      deleteStatus,
      deletedBy: '0',
      fromUserId,
      fromUserJid,
      msgBody,
      msgId,
      msgStatus,
      msgType,
      profileUpdatedStatus: '',
      publisherId,
      publisherJid,
      timestamp,
      userId,
      userJid
    };
    Object(__WEBPACK_IMPORTED_MODULE_12__helpers_common__["a" /* callbackListeners */])().singleMessageDataListener && Object(__WEBPACK_IMPORTED_MODULE_12__helpers_common__["a" /* callbackListeners */])().singleMessageDataListener(data);
    successRes.data = data;
    return successRes;
  } catch (error) {
    console.log('getMessageByIdDB DB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getMessageByIdDB;


const dbCheckWithMsgId = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
    const messageTable = realm.objectForPrimaryKey('MessageTable', mid);
    return Boolean(messageTable);
  } catch (error) {
    return false;
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = dbCheckWithMsgId;


const getMessageByIdDBWithRealm = async (mid, realm) => {
  try {
    const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    const messageTable = realm.objectForPrimaryKey('MessageTable', mid);
    const recentChatList = realm.objects('RecentTable').filtered('mid = $0', mid);
    let chatUserJid, msgTime;
    if (recentChatList.length) {
      chatUserJid = recentChatList[0].jid;
      msgTime = recentChatList[0].msgTime;
    } else {
      chatUserJid = messageTable.chatUser;
      msgTime = messageTable.msgTime;
    }
    const roaster = realm.objectForPrimaryKey('RoasterTable', chatUserJid);
    const message = {
      mid: mid,
      msgType: messageTable ? messageTable.msgType : ''
    };
    const chatType = messageTable.chatType,
          createdAt = !messageTable ? '' : changeTimeFormat(messageTable.msgTime),
          deleteStatus = !messageTable ? 0 : messageTable.isDeleted,
          fromUserId = roaster.jid.split('@')[0],
          fromUserJid = roaster.jid,
          msgBody = msgBodyConstructor(message, realm, ''),
          msgId = !messageTable ? '' : messageTable.mid,
          msgStatus = !messageTable ? 4 : messageTable.status,
          msgType = !messageTable ? '' : messageTable.msgType,
          publisherId = !messageTable ? '' : messageTable.publisherJid.split('@')[0],
          publisherJid = messageTable.publisherJid,
          timestamp = msgTime,
          userId = roaster.jid.split('@')[0],
          userJid = roaster.jid;

    const data = {
      chatType,
      createdAt,
      deleteStatus,
      deletedBy: '0',
      fromUserId,
      fromUserJid,
      msgBody,
      msgId,
      msgStatus,
      msgType,
      profileUpdatedStatus: '',
      publisherId,
      publisherJid,
      timestamp,
      userId,
      userJid
    };
    successRes.data = data;
    return successRes;
  } catch (error) {
    console.log('getMessageByIdDB DB', error);
  }
};
/* unused harmony export getMessageByIdDBWithRealm */


const searchMessageDB = async (string, toJid) => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_13__realmDB__["a" /* getRealmDB */])();
    const messages = realm.objects('MessageDetailTable').filtered(`message CONTAINS[c] "${string}"`);
    const captions = realm.objects('MediaDetailTable').filtered(`caption CONTAINS[c] "${string}"`);
    const contactname = realm.objects('ContactMessageTable').filtered(`name CONTAINS[c] "${string}"`);
    const consolidatedArr = [...messages, ...captions, ...contactname];
    const fetchedVal = await Promise.allSettled(consolidatedArr.map(async item => {
      const msgObj = await getMessageByIdDBWithRealm(item.mid, realm);
      if (msgObj.statusCode === 200) {
        return msgObj.data;
      }
    }));
    const returnArr = fetchedVal.map(item => item.status === 'fulfilled' && item.value).filter(Boolean);
    const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    successRes.data = returnArr;
    return successRes;
  } catch (error) {
    console.log('searchMessageDB', error);
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["j"] = searchMessageDB;


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__users__ = __webpack_require__(25);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };







/**
 * User filter key
 */
const _SDK_USER_FILTER_KEY = 'userJid';
/* harmony export (immutable) */ __webpack_exports__["a"] = _SDK_USER_FILTER_KEY;


/**
 * Hold the local user jid which is given by user
 */
let _sdk_localUserCustomJid = null;
/**
 * Hold user online/offline status
 */
let _sdk_userOnline = false;

/**
 * Hole the local user call ID
 */
let _sdk_localUserCallId = null;
/**
 * Hold the socket connection object
 */
let _sdk_socket = null;
/**
 * Hold the socket ID
 * @exmple 'ntade6obZgBmxkcDAAUI'
 */
let _sdk_socketId = null;
/**
 * Hold the call detils default obejct
 */
let _sdk_default_callInfo = {
  roomId: null,
  roomLink: null,
  callType: null,
  groupId: null,
  isAudioMute: false,
  isVideoMute: false,
  joinMode: null,
  userDetails: {},
  toUsers: null,
  behaviour: "call"
};
/**
 * Hold the current call details
 * @exmple
 * {
 *      roomId: 'sdftgds',
 *      callType: audio|video,
 *      groupId: CALL_GROUP_ID
 * }
 */
let _sdk_callInfo = _extends({}, _sdk_default_callInfo);

let _sdk_calling_object = {};

/**
 * Set the custom jid given by user
 */
const setLocalUserCustomJid = value => _sdk_localUserCustomJid = value;
/* harmony export (immutable) */ __webpack_exports__["w"] = setLocalUserCustomJid;


/**
 * get the custom jid given by user
 */
const getLocalUserCustomJid = () => _sdk_localUserCustomJid;
/* harmony export (immutable) */ __webpack_exports__["h"] = getLocalUserCustomJid;


/**
 * Generate the local user call Id
 */
const generateLocalUserCallId = () => Object(__WEBPACK_IMPORTED_MODULE_1__functions__["e" /* getCallLocalUserJid */])();
/* harmony export (immutable) */ __webpack_exports__["d"] = generateLocalUserCallId;

/**
 * Getter of local user call Id
 */
const getLocalUserCallId = () => _sdk_localUserCallId;
/* harmony export (immutable) */ __webpack_exports__["g"] = getLocalUserCallId;

/**
 * Setter of local user call Id
 * @param {*} socketConnObj
 */
const setLocalUserCallId = localUserCallId => _sdk_localUserCallId = localUserCallId;
/* harmony export (immutable) */ __webpack_exports__["v"] = setLocalUserCallId;


/**
 * Get the local user filter value
 * Need to use this method to get the filter value for local. In future, If filter value is changed,
 * then change this method only, not any other code
 */
const getLocalUserFilterValue = () => {
  return _SDK_USER_FILTER_KEY === 'userCallId' ? getLocalUserCallId() : Object(__WEBPACK_IMPORTED_MODULE_1__functions__["e" /* getCallLocalUserJid */])();
};
/* harmony export (immutable) */ __webpack_exports__["i"] = getLocalUserFilterValue;


/**
 * Generate the some random string & return it
 */
const generateRoomId = () => Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["s" /* getRandomNumber */])().toString(36).replace(/[^a-z]+/g, "").substring(0, 9);
/* unused harmony export generateRoomId */


/**
 * return the user online/offline status
 */
const isUserOnline = () => _sdk_userOnline;
/* harmony export (immutable) */ __webpack_exports__["m"] = isUserOnline;


/**
 * set the user online/offline status
 */
const setIsUserOnline = onlineStatus => {
  _sdk_userOnline = onlineStatus;
};
/* harmony export (immutable) */ __webpack_exports__["s"] = setIsUserOnline;


/**
 * Getter of socket connection object
 */
const getSocket = () => {
  if (!_sdk_socket) {
    return null;
  }
  return _sdk_socket;
};
/* harmony export (immutable) */ __webpack_exports__["j"] = getSocket;


/**
 * Setter of socket connection object
 * @param {*} socketConnObj
 */
const setSocket = socketConnObj => _sdk_socket = socketConnObj;
/* unused harmony export setSocket */


/**
 * Add/Update the socket connection object
 * @param {*} socket
 */
const addOrUpdateSocket = socket => setSocket(socket);
/* harmony export (immutable) */ __webpack_exports__["b"] = addOrUpdateSocket;


/**
 * Getter of socker ID
 */
const getSocketId = () => {
  if (!_sdk_socketId) {
    return null;
  }
  return _sdk_socketId;
};
/* harmony export (immutable) */ __webpack_exports__["k"] = getSocketId;


/**
 * Setter of socket ID
 * @param {*} socketId
 */
const setSocketId = socketId => _sdk_socketId = socketId;
/* unused harmony export setSocketId */


/**
 * Add/Update the socketId.
 * This method has been called in socket ID callback event
 * @param {*} socketId
 */
const addOrUpdateSocketId = socketId => {
  Object(__WEBPACK_IMPORTED_MODULE_1__functions__["c" /* consoleLog */])('socketId --- ', socketId);
  const currentSocketId = getSocketId();
  if ((Object(__WEBPACK_IMPORTED_MODULE_1__functions__["q" /* isUserAttendedCall */])() || Object(__WEBPACK_IMPORTED_MODULE_1__functions__["t" /* isUserJoiningCall */])()) && currentSocketId && currentSocketId !== socketId) {
    Object(__WEBPACK_IMPORTED_MODULE_2__call__["w" /* createAndJoinRoom */])();
  } else if (Object(__WEBPACK_IMPORTED_MODULE_1__functions__["v" /* isUserSubscribedCall */])() && currentSocketId && currentSocketId !== socketId) {
    Object(__WEBPACK_IMPORTED_MODULE_2__call__["F" /* subscribeRoom */])();
  }
  return setSocketId(socketId);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = addOrUpdateSocketId;


/**
 * Setter of current call details
 * @param {*} dataObj
 */
const setCallInfo = dataObj => {
  if (!dataObj) {
    _sdk_callInfo = _extends({}, _sdk_default_callInfo);
    return;
  }
  const callDetailKeysArr = Object.keys(_sdk_default_callInfo);
  const newDataObj = _extends({}, dataObj);
  for (const key in newDataObj) {
    if (callDetailKeysArr.indexOf(key) > -1 && typeof newDataObj[key] != 'undefined') {
      _sdk_callInfo[key] = newDataObj[key];
    }
  }
};
/* harmony export (immutable) */ __webpack_exports__["q"] = setCallInfo;


/**
 * Getter of current call details
 */
const getCallInfo = () => {
  return _extends({}, _sdk_callInfo);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = getCallInfo;


const onetooneCallTypeUpdate = () => {
  const users = Object(__WEBPACK_IMPORTED_MODULE_4__users__["e" /* getCallUsers */])();
  if (users && Array.isArray(users) && users.length === 2) {
    const isAllUsersVideoMuted = users.every(user => user.videoMuted);
    const callType = isAllUsersVideoMuted ? __WEBPACK_IMPORTED_MODULE_3__constants__["_4" /* CALL_TYPE_AUDIO */] : __WEBPACK_IMPORTED_MODULE_3__constants__["_5" /* CALL_TYPE_VIDEO */];
    setCallInfo({ callType });
  }
};
/* harmony export (immutable) */ __webpack_exports__["p"] = onetooneCallTypeUpdate;


const setCallingObject = data => {
  _sdk_calling_object = data;
};
/* harmony export (immutable) */ __webpack_exports__["r"] = setCallingObject;


const getCallingObject = () => _sdk_calling_object;
/* harmony export (immutable) */ __webpack_exports__["f"] = getCallingObject;


let _sdk_subscribe_call_request = null;

const subscribeCallRequest = () => _sdk_subscribe_call_request;
/* harmony export (immutable) */ __webpack_exports__["A"] = subscribeCallRequest;


const setSubscribeCallRequest = data => {
  _sdk_subscribe_call_request = data;
};
/* harmony export (immutable) */ __webpack_exports__["x"] = setSubscribeCallRequest;


let _sdk_subscribe_call_request_callback = null;

const subscribeCallRequestCallback = () => _sdk_subscribe_call_request_callback;
/* harmony export (immutable) */ __webpack_exports__["B"] = subscribeCallRequestCallback;


const setSubscribeCallRequestCallback = data => {
  _sdk_subscribe_call_request_callback = data;
};
/* harmony export (immutable) */ __webpack_exports__["y"] = setSubscribeCallRequestCallback;


let _sdk_join_call_request = null;

const joinCallRequest = () => _sdk_join_call_request;
/* harmony export (immutable) */ __webpack_exports__["n"] = joinCallRequest;


const setJoinCallRequest = data => {
  _sdk_join_call_request = data;
};
/* harmony export (immutable) */ __webpack_exports__["t"] = setJoinCallRequest;


let _sdk_join_call_request_callback = null;

const joinCallRequestCallback = () => _sdk_join_call_request_callback;
/* harmony export (immutable) */ __webpack_exports__["o"] = joinCallRequestCallback;


const setJoinCallRequestCallback = data => {
  _sdk_join_call_request_callback = data;
};
/* harmony export (immutable) */ __webpack_exports__["u"] = setJoinCallRequestCallback;


let subscribeRoomData = null;

const setSubscribeRoomData = data => {
  subscribeRoomData = data;
};
/* harmony export (immutable) */ __webpack_exports__["z"] = setSubscribeRoomData;


const getSubscribeRoomData = () => subscribeRoomData;
/* harmony export (immutable) */ __webpack_exports__["l"] = getSubscribeRoomData;


let joinRoomData = null;

const setJoinRoomData = data => {
  joinRoomData = data;
};
/* unused harmony export setJoinRoomData */


const getJoinRoomData = () => joinRoomData;
/* unused harmony export getJoinRoomData */


/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_21__;

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_native__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// migration done (14-12-21)






const CancelToken = __WEBPACK_IMPORTED_MODULE_0_axios__["a" /* default */].CancelToken;


let progressInterval = {};

const clearProgressInterval = mid => {
  if (progressInterval[mid]) {
    clearInterval(progressInterval[mid]);
  }
};

const progressListner = (msgId, type, item, timeInterval) => {
  if (msgId) {
    if (type === 'upload') {
      let progress = 0;
      progressInterval[msgId] = setInterval(() => {
        if (progress === 90) {
          clearProgressInterval(msgId);
          return;
        }
        progress = progress + 1;
        item.progress = progress;
        Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().mediaUploadListener && msgId !== '' && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().mediaUploadListener(item);
      }, timeInterval);
    }
  }
};

const uploadProgress = (msgId, type, contentlength, source) => {
  if (msgId && contentlength) {
    const item = {
      msgId: msgId,
      source: {
        cancel: msg => {
          clearProgressInterval(msgId);
          source.cancel(msg);
        }
      },
      progress: 0
    };
    const bandwidthBitsPerSecond = 1000000;
    const timeInterval = contentlength * 8 / bandwidthBitsPerSecond;
    progressListner(msgId, type, item, timeInterval);
  }
};

const sendRequest = async (method, apiEndPoint, inputdata, userToken, contentType, msgId = '', contentlength, type) => {
  const headers = _extends({
    'Content-Type': contentType ? contentType : 'application/json'
  }, userToken && { authorization: userToken });

  if (contentlength) {
    headers['Content-Length'] = contentlength;
  }
  const source = CancelToken.source();

  const options = {
    method,
    headers,
    url: apiEndPoint,
    data: inputdata,
    retry: 1,
    cancelToken: source.token, // Needed to Cancel API on Client Side
    onUploadProgress: p => {
      if (msgId) {
        if (!progressInterval[msgId]) {
          uploadProgress(msgId, type, contentlength, source);
        }
      }
    },
    onDownloadProgress: p => {
      const item = {
        msgId: msgId,
        source: source, // Sending Cancel Source to Cancel Request by Message Id
        progress: Math.ceil(p.loaded / p.total * 100)
      };
      Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener && msgId !== '' && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener(item);
    }
  };
  if (type === 'download') {
    options.responseType = 'arraybuffer';
  }
  try {
    const response = await Object(__WEBPACK_IMPORTED_MODULE_0_axios__["a" /* default */])(options);
    clearProgressInterval(msgId);
    return response.data;
  } catch (err) {
    clearProgressInterval(msgId);
    return { status: 500, message: err.message || '' };
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = sendRequest;


const accessTokenRegenerate = async () => {
  const credentials = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["g" /* getCredentials */])(),
        apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["d" /* getApiEndPoints */])();
  const data = {
    password: credentials.password,
    username: credentials.username,
    type: __WEBPACK_IMPORTED_MODULE_4_react_native__["Platform"].OS // TODO: change this as per the requirement once migration is done
  };
  const apiResponse = await sendRequest(__WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.login, JSON.stringify(data), '', '');

  if (apiResponse && apiResponse.status === 200) {
    const userToken = apiResponse.data.token;
    Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["z" /* setUserToken */])(userToken);
    return userToken;
  }
  return apiResponse;
};
/* unused harmony export accessTokenRegenerate */


// If the Request is Failed due to Invalid Token, Get Latest Token and Retrying the Request Again
__WEBPACK_IMPORTED_MODULE_0_axios__["a" /* default */].interceptors.response.use(null, async error => {
  if (error.config && error.response && error.response.status === 401) {
    error.config.__retryCount = error.config.__retryCount || 0;

    if (error.config.__retryCount >= error.config.retry) {
      return Promise.reject(error);
    }

    error.config.__retryCount += 1;
    return accessTokenRegenerate().then(token => {
      error.config.__isRetryRequest = true;
      error.config.headers.authorization = token;
      return __WEBPACK_IMPORTED_MODULE_0_axios__["a" /* default */].request(error.config);
    });
  }

  return Promise.reject(error);
});

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer
var Transform = __webpack_require__(58).Transform
var StringDecoder = __webpack_require__(27).StringDecoder
var inherits = __webpack_require__(0)

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functions__ = __webpack_require__(14);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





/**
 * Hold the current call user details key list. The listed values in this array only can be keys
 * to _sdk_callUsers array of object.
 */
let _sdk_callUserObjKey = ['socketId', 'userJid', 'userCallId', 'status', 'audioMuted', 'videoMuted', 'callInitiator', 'localUser', 'offerTimestamp', 'peerConn', 'reconnectInterval', 'reconnectIntervalCount', 'userDetails'];

/**
 * Hold the current call user details. The array will contain the object value
 * So each user value will object
 * @example
 * {
 *      socketId:'ntade6obZgBmxkcDAAUI',
 *      userJid: USER_JID_ID,
 *      userCallId: USER_UNIQUE_ID_FOR_CALL,
 *      status: CALLING|RINGING|CONNECTED|CONNECTING...,
 *      audioMuted: BOOLEAN,
 *      videoMuted: BOOLEAN,
 *      callInitiator: BOOLEAN,
 *      localUser: BOOLEAN,
 *      offerTimestamp: TIMESTAMP,
 *      peerConn: PEER_CONNECTION_OBJECT,
 *      reconnectInterval: RECONNECT_INTERVAL_OBJECT,
 *      reconnectIntervalCount: NUMBER
 * }
 */
let _sdk_callUsers = [];

/**
 * Setter of current call user details
 */
const setCallUsers = data => {
    _sdk_callUsers = data || [];
};
/* harmony export (immutable) */ __webpack_exports__["f"] = setCallUsers;


/**
 * Getter of current call user details
 */
const getCallUsers = () => _sdk_callUsers;
/* harmony export (immutable) */ __webpack_exports__["e"] = getCallUsers;


/**
 * add or update the call user details
 * @param {*} dataObj
 */
const addOrUpdateCallUser = (dataObj = {}) => {
    const newDataObj = _extends({}, dataObj);
    const userCallId = newDataObj.userCallId,
          userJid = newDataObj.userJid;

    let callUsers = getCallUsers();
    const userIndex = callUsers.findIndex(usr => usr.userCallId && usr.userCallId === userCallId || usr.userJid && usr.userJid === userJid);
    const user = userIndex > -1 ? callUsers[userIndex] : {};
    const dataToUpdate = {};
    for (const key in newDataObj) {
        // _sdk_callUserObjKey variable we declared, what the values could be key to this object
        // that's why, we check condition here, given dataObj key is match with _sdk_callUserObjKey array value.
        if (_sdk_callUserObjKey.indexOf(key) > -1 && (typeof newDataObj[key] != 'undefined' || user[key])) {
            dataToUpdate[key] = newDataObj[key];
        }
    }
    let newCallUsers = [...callUsers];
    if (userIndex > -1) {
        newCallUsers = [...callUsers];
        let newCallUsersData = newCallUsers.map((ele, ind) => ind === userIndex ? _extends({}, ele, dataToUpdate) : _extends({}, ele));
        callUsers = [...newCallUsersData];
        setCallUsers(callUsers);
        return callUsers;
    }
    dataToUpdate['localUser'] = !!dataToUpdate.localUser;
    dataToUpdate['callInitiator'] = !!dataToUpdate.callInitiator;
    callUsers.push(dataToUpdate);
    return callUsers;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = addOrUpdateCallUser;


/**
 * Delete user from call users array of object
 * @param {*} userFilterVal
 */
const deleteCallUser = (userFilterVal, key) => {
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["b" /* clearReconnectInterval */])(userFilterVal);
    let callUsers = getCallUsers();
    key = key || __WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */];
    callUsers = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["y" /* removeArrayObjectByAttr */])(callUsers, key, userFilterVal);
    setCallUsers(callUsers);
    return callUsers;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = deleteCallUser;


/**
 * Get a user from callUsers array
 * @param {*} filterVal
 */
const getCallUser = filterVal => {
    filterVal = filterVal || Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])();
    const callUsers = getCallUsers();
    return callUsers && Array.isArray(callUsers) && callUsers.find(user => user[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]] === filterVal || user.userJid === filterVal) || undefined;
};
/* harmony export (immutable) */ __webpack_exports__["d"] = getCallUser;


/**
 * Get the call initiator details
 */
const getCallInitiator = () => {
    const users = getCallUsers();
    return users.find(user => user.callInitiator);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getCallInitiator;


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);

  __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ __webpack_exports__["a"] = (AxiosError);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(223).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = __webpack_require__(79);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(0);
/*</replacement>*/

var Readable = __webpack_require__(124);
var Writable = __webpack_require__(80);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__service_feedback__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__realmDB__ = __webpack_require__(13);





// Read all statuses
const readAllVcardDetails = async () => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])();
    return realm.objects('VcardTable');
  } catch (error) {
    console.error('Failed to read VcardTable', error);
  }
};
/* unused harmony export readAllVcardDetails */


const getVcardDetial = async jid => {
  try {
    if (jid) {
      const realm = await Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])();
      const vCardDetail = realm.objectForPrimaryKey('VcardTable', jid);
      let profileDetail;
      if (vCardDetail) {
        profileDetail = {
          email: vCardDetail.email.toString(),
          fromUser: jid.toString(),
          image: vCardDetail.image,
          mobileNumber: vCardDetail.mobileNo.toString(),
          nickName: vCardDetail.nickName.toString(),
          status: vCardDetail.status.toString(),
          thumbImage: vCardDetail.thumbnailImage,
          userId: jid.split('@')[0].toString()
        };
        return JSON.parse(JSON.stringify(profileDetail));
      }
      return profileDetail;
    }
  } catch (error) {
    console.log('getVcardDetial error', error);
    return { status: 500, message: 'Get Vcard Detail Error' };
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = getVcardDetial;


const handleVcardDetail = async jid => {
  if (!jid) return;
  let fetchedVcardDetail = await Object(__WEBPACK_IMPORTED_MODULE_2__service_feedback__["c" /* fetchVcard */])(jid.split('@')[0]);
  if (fetchedVcardDetail.statusCode !== 200) {
    updateVcardDetail(fetchedVcardDetail);
    fetchedVcardDetail = {
      data: {
        userId: jid.split('@')[0]
      }
    };
  }
  const vcardDetail = await getVcardDetial(jid);
  if (vcardDetail && vcardDetail.fromUser == jid) {
    updateVcardDetail(fetchedVcardDetail.data);
  } else {
    createVcardDetail(jid, fetchedVcardDetail.data);
  }
  let profileDetail;
  if (fetchedVcardDetail.statusCode == 200) {
    profileDetail = {
      email: fetchedVcardDetail.data.email,
      fromUser: jid,
      image: fetchedVcardDetail.data.image,
      mobileNumber: fetchedVcardDetail.data.mobileNo,
      nickName: fetchedVcardDetail.data.nickName,
      status: fetchedVcardDetail.data.status,
      thumbImage: fetchedVcardDetail.data.thumbnailImage,
      userId: jid.split('@')[0].toString(),
      userJid: jid
    };
  } else {
    profileDetail = {
      email: '',
      fromUser: jid,
      image: '',
      mobileNumber: '',
      nickName: jid.split('@')[0].toString(),
      status: '',
      thumbImage: '',
      userId: jid.split('@')[0].toString(),
      userJid: jid
    };
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = handleVcardDetail;


/**
 * Create a status
 * @example createStatus(status);
 * @param {String} status
 * properties: {
 *   _id: 'string', // 0: id
 *  type: { type: 'string', default: '' },//1: type
 *   status: { type: 'string', default: '' },//2: status
}
 */
const createVcardDetail = async (jid, profileDetail) => {
  try {
    const email = profileDetail.email,
          fromUser = profileDetail.fromUser,
          image = profileDetail.image,
          isAdminBlocked = profileDetail.isAdminBlocked,
          mobileNumber = profileDetail.mobileNumber,
          nickName = profileDetail.nickName,
          status = profileDetail.status,
          thumbImage = profileDetail.thumbImage,
          userId = profileDetail.userId;

    if (jid) {
      const realm = await Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])();
      realm.write(() => {
        realm.create('VcardTable', {
          jid: jid,
          nickName: nickName,
          email: email,
          image: image,
          status: status,
          mobileNo: mobileNumber,
          thumbImage: thumbImage
        });
      });
    }
  } catch (error) {
    console.log('Failed to create VcardTable', error);
  }
};
/* unused harmony export createVcardDetail */


// Update a Vcard
const updateVcardDetail = async profileDetail => {
  try {
    const email = profileDetail.email,
          image = profileDetail.image,
          fromUser = profileDetail.fromUser,
          nickName = profileDetail.nickName,
          mobileNumber = profileDetail.mobileNumber,
          status = profileDetail.status,
          userId = profileDetail.userId;

    const jid = await Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["m" /* getJid */])(userId).userJid;
    if (jid) {
      const realm = await Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])();
      const vCardDetail = realm.objectForPrimaryKey('VcardTable', jid);
      if (vCardDetail) {
        realm.write(() => {
          vCardDetail.nickName = nickName;
          vCardDetail.image = image;
          vCardDetail.status = status;
          vCardDetail.mobileNo = mobileNumber;
          vCardDetail.email = email;
        });
        // onChangeVcardTable(profileDetail)
      } else {
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])('vCardDetail not found');
      }
    } else Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])('JID must be pass');
  } catch (error) {
    Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])('Failed to update vCardDetail');
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = updateVcardDetail;


// Delete a status
const deleteVcard = async _id => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])();
    const status = realm.objectForPrimaryKey('VcardTable', _id);
    if (status) {
      realm.write(() => {
        realm.delete(status);
      });
    } else {
      console.log('vCardDetail not found');
    }
  } catch (error) {
    console.log('Failed to delete Status', error);
  }
};
/* unused harmony export deleteVcard */


// Set up the change listener for VcardTable
const onChangeVcardTable = item => {
  Object(__WEBPACK_IMPORTED_MODULE_3__realmDB__["a" /* getRealmDB */])().then(realm => {
    const vcardDetail = realm.objects('VcardTable');
    vcardDetail.addListener((collection, changes) => {});
  }).catch(error => {
    console.log('Failed to set up VcardTable change listener', error);
  });
};
/* unused harmony export onChangeVcardTable */


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["f"] = extractVersion;
/* harmony export (immutable) */ __webpack_exports__["i"] = wrapPeerConnectionEvent;
/* harmony export (immutable) */ __webpack_exports__["d"] = disableLog;
/* harmony export (immutable) */ __webpack_exports__["e"] = disableWarnings;
/* harmony export (immutable) */ __webpack_exports__["h"] = log;
/* harmony export (immutable) */ __webpack_exports__["b"] = deprecated;
/* harmony export (immutable) */ __webpack_exports__["c"] = detectBrowser;
/* harmony export (immutable) */ __webpack_exports__["a"] = compactObject;
/* unused harmony export walkStats */
/* harmony export (immutable) */ __webpack_exports__["g"] = filterStats;
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
          this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
          this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
    'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator ||
      !window.navigator.userAgent) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
      /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
      /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
      /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}



/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["M"] = updateMuteNotification;
/* harmony export (immutable) */ __webpack_exports__["v"] = messageSearch;
/* harmony export (immutable) */ __webpack_exports__["N"] = updateRecentChatUnreadCount;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__service_api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__profile__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__db_controllers_messageDetailTable__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__db_controllers_recentTable__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__app_reconnect__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__db_controllers_vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__call_communication_iq__ = __webpack_require__(192);
// migration done (10-12-21) - (13-12-21)



















/**
 * Get Recent Chat Conversations
 * @example SDK.getRecentChat();
 * @returns {Object} Success/Error Response with Data
 */
const getRecentChatsDB = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_10__db_controllers_recentTable__["b" /* getRecentChatsfrmDB */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["t"] = getRecentChatsDB;


/**
 * Get Recent Chat Conversations
 * @example SDK.getRecentChat();
 * @returns {Object} Success/Error Response with Data
 */
const getRecentChats = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["l" /* getRecentChatsIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["s"] = getRecentChats;


/**
 * Get Single/Group Chat Conversation Messages with Pagination
 * @param {String} toJid - To User Jid (Username with Domain)
 * @returns {Object} Success/Error Response
 */
const getChatMessagesDB = toJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["f" /* getMessages */])(toJid);
    }
  } catch (error) {
    console.log('getChatMessagesDB error', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["m"] = getChatMessagesDB;


const getMessageInfo = mid => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_messageDetailTable__["c" /* getMessageStatus */])(mid);
  } catch (error) {
    console.log('getMessageInfo error', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["q"] = getMessageInfo;


/**
 * Get Single/Group Chat Conversation Messages with Pagination
 * @param {String} toJid - To User Jid (Username with Domain)
 * @param {String} position - Scroll Position - up/down
 * @param {String} lastRowId - Last MySql Row Id - Needed For Pagination
 * @param {Number} limit - No. of Message for Per Page
 * @returns {Object} Success/Error Response
 */
const getChatMessages = (toJid, position, lastRowId, limit = 20, sendSeen = true) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);

    if (response.statusCode === 200) {
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["f" /* getGroupChatIQ */])(toJid, position, lastRowId, limit, sendSeen);
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["n" /* getSingleChatIQ */])(toJid, position, lastRowId, limit, sendSeen);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["l"] = getChatMessages;


/**
 * Sending Text Message to Single/Group Chat
 * @example SDK.sendTextMessage("1111111111@xmppdomain", "Hey");
 * @example SDK.sendTextMessage("1111111111@mix.xmppdomain", "Hey");
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {String} msgBody - Message Body
 * @param {String} replyTo - Optional - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendTextMessage = async (toJid, msgBody, msgId, replyTo = '') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'msgBody',
      value: msgBody,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);

    if (response.statusCode === 200) {
      const messageId = msgId ? msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
      const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])(msgBody, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */], messageId, replyTo, toJid, '', {});
      if (msgResponse.statusCode === 200) {
        Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, msgBody, msgId, replyTo, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */]);
        const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), messageId);
        // Validating JID to Send Message to Single/Group Chat
        if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, messageId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */], cypherText);
        return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, messageId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */], cypherText);
      }
      return msgResponse;
    }
    return response;
  } catch (error) {
    throw new Error(error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["G"] = sendTextMessage;


/**
 * Sending Location/Contact Message to Single/Group Chat - Not Exported Externally
 * @example SDK.sendAttachmentMessage("1111111111@xmppdomain", {}, "chat");
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {String} options - Options
 * @param {String} type - type - "location"/"contact"
 * @param {String} replyTo - Optional - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendAttachmentMessage = async (toJid, options, type, msgId, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
  }]);

  if (response.statusCode === 200) {
    const messageId = msgId || Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', type, messageId, replyTo, toJid, '', options);

    if (msgResponse.statusCode === 200) {
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), messageId);
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, messageId, type, cypherText);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, messageId, type, cypherText);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["x"] = sendAttachmentMessage;


/**
 * Sending Image Message to Single/Group Chat
 * @example SDK.sendImageMessage("1111111111@xmppdomain", File, { caption: "" });
 * @example SDK.sendImageMessage("1111111111@mix.xmppdomain", File, { caption: "" });
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {File} imageFile - Image File - Accepts file type which starts with "image"
 * @param {Object} fileOptions - File Options
 * @param {String} replyTo - Optional - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendImageMessage = async (toJid, imageFile, fileOptions, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
  }, {
    key: 'imageFile',
    value: imageFile,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["T" /* IMAGEFILE_REQUIRED */]
  }, {
    key: 'fileOptions',
    value: fileOptions,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_42" /* OBJECT_REQUIRED */]
  }]);
  if (response.statusCode === 200) {
    const msgId = fileOptions.msgId ? fileOptions.msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */], msgId, replyTo, toJid, imageFile, fileOptions);

    if (msgResponse && msgResponse.statusCode === 200) {
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), msgId),
            fileToken = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["o" /* getFileTokenFromMsgBody */])(msgResponse.message);

      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */], cypherText, fileToken, msgResponse.message.media.thumb_image);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */], cypherText, fileToken, msgResponse.message.media.thumb_image);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["B"] = sendImageMessage;


/**
 * Sending Audio Message to Single/Group Chat
 * @example SDK.sendAudioMessage("1111111111@xmppdomain", File, { caption: "" });
 * @example SDK.sendAudioMessage("1111111111@mix.xmppdomain", File, { caption: "" });
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {File} audioFile - Audio File - Accepts file type which starts with "audio"
 * @param {Object} fileOptions - File Options
 * @param {String} replyTo - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendAudioMessage = async (toJid, audioFile, fileOptions, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
  }, {
    key: 'audioFile',
    value: audioFile,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["j" /* AUDIOFILE_REQUIRED */]
  }, {
    key: 'fileOptions',
    value: fileOptions,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_42" /* OBJECT_REQUIRED */]
  }]);

  if (response.statusCode === 200) {
    const msgId = fileOptions.msgId ? fileOptions.msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["i" /* AUDIO */], msgId, replyTo, toJid, audioFile, fileOptions);

    if (msgResponse && msgResponse.statusCode === 200) {
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), msgId),
            fileToken = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["o" /* getFileTokenFromMsgBody */])(msgResponse.message);

      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["i" /* AUDIO */], cypherText, fileToken);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["i" /* AUDIO */], cypherText, fileToken);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["y"] = sendAudioMessage;


/**
 * Sending Video Message to Single/Group Chat
 * @example SDK.sendVideoMessage("1111111111@xmppdomain", File, { caption: "" });
 * @example SDK.sendVideoMessage("1111111111@mix.xmppdomain", File, { caption: "" });
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {File} videoFile - Video File - Accepts file type which starts with "video"
 * @param {Object} fileOptions - File Options
 * @param {String} replyTo - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendVideoMessage = async (toJid, videoFile, fileOptions, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
  }, {
    key: 'videoFile',
    value: videoFile,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_77" /* VIDEOFILE_REQUIRED */]
  }, {
    key: 'fileOptions',
    value: fileOptions,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_42" /* OBJECT_REQUIRED */]
  }]);
  if (response.statusCode === 200) {
    const msgId = fileOptions.msgId ? fileOptions.msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */], msgId, replyTo, toJid, videoFile, fileOptions);

    if (msgResponse && msgResponse.statusCode === 200) {
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), msgId),
            fileToken = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["o" /* getFileTokenFromMsgBody */])(msgResponse.message);

      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */], cypherText, fileToken, msgResponse.message.media.thumb_image);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */], cypherText, fileToken, msgResponse.message.media.thumb_image);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["J"] = sendVideoMessage;


/**
 * Sending Document Message to Single/Group Chat
 * @example SDK.sendDocumentMessage("1111111111@xmppdomain", File, { caption: "" });
 * @example SDK.sendDocumentMessage("1111111111@mix.xmppdomain", File, { caption: "" });
 * @param {String} toJid - To User Jid (Username with Domain)
 * @param {File} documentFile - Document File - Accepts file type which starts with "video"
 * @param {Object} fileOptions - File Options
 * @param {String} replyTo - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendDocumentMessage = async (toJid, documentFile, fileOptions, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
    key: 'toJid',
    value: toJid,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
  }, {
    key: 'documentFile',
    value: documentFile,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["z" /* DOCUMENTFILE_REQUIRED */]
  }, {
    key: 'fileOptions',
    value: fileOptions,
    rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_42" /* OBJECT_REQUIRED */]
  }]);

  if (response.statusCode === 200) {
    const msgId = fileOptions.msgId ? fileOptions.msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["C" /* FILE */], msgId, replyTo, toJid, documentFile, fileOptions);

    if (msgResponse && msgResponse.statusCode === 200) {
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), msgId),
            fileToken = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["o" /* getFileTokenFromMsgBody */])(msgResponse.message);

      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["C" /* FILE */], cypherText, fileToken);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, msgId, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["C" /* FILE */], cypherText, fileToken);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["A"] = sendDocumentMessage;


/**
 * Sending Media Message Data (URL - Already Uploaded Media) to Single/Group Chat
 * @example SDK.sendMediaMessageData("1111111111@xmppdomain", "image", { fileURL: "", fileSize: 1000, fileName: "" });
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {String} msgType - Message Type
 * @param {Object} fileOptions - File Options - caption, fileSize, fileName, fileURL, duration & thumbImg
 * @param {String} replyTo - Reply Message Id
 * @returns {Object} Success/Error Response
 */
const sendMediaMessageData = async (toJid, msgType, fileOptions, msgId, replyTo = '') => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["d" /* customValiadtionMediaMessage */])(toJid, msgType, fileOptions);

  if (response.statusCode === 200) {
    const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* composeMediaMessage */])(msgType, fileOptions, replyTo);
    if (msgResponse.statusCode === 200) {
      const messageId = msgId || Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["i" /* encryptMsg */])(JSON.stringify(msgResponse.message), messageId);
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["c" /* sendGroupMessageIQ */])(toJid, messageId, msgType, cypherText);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["d" /* sendMessageIQ */])(toJid, messageId, msgType, cypherText);
    }
    return msgResponse;
  }
  return response;
};
/* harmony export (immutable) */ __webpack_exports__["E"] = sendMediaMessageData;


/**
 * Sends Seen Status for a Message
 * @example SDK.sendSeenStatus("1111111111@xmppdomain", "123abc123");
 * @param {String} toJid - To User Jid (Username with Domain)
 * @param {String} msgId - Unique id of the Message
 * @returns {Object} Success/Error Response
 */
const sendSeenStatus = (toJid, msgId, groupId) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }, {
      key: 'msgId',
      value: msgId,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["e" /* sendSeenStatusIQ */])(toJid, msgId, groupId);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["F"] = sendSeenStatus;


/**
 * Get Media Messages of Particular Single/Group Chat
 * @example SDK.getMediaMessages("2222222222@xmppdomain"); - Without Pagination
 * @example SDK.getMediaMessages("2222222222@xmppdomain", "123abc123"); - With Pagination
 * @example SDK.getMediaMessages("2222222222@mix.xmppdomain"); - Group Chat
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {String} msgId - Unique Id of the Message - Needed on Pagination (Last Msg ID)
 * @returns {Object} Success/Error Response with Data
 */
const getMediaMessages = (toJid, msgId = '') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["k" /* getMediaMessagesIQ */])(toJid, msgId);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["n"] = getMediaMessages;


/**
 * Get Message by ID
 * @example SDK.getMessageById("123abc456");
 * @param {String} msgId - Reply Message Id
 * @param {String} chatType - Optional - Type of the Chat
 * @returns {Object} Success/Error Response
 */
const getMessageById = (msgId, chatType) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'msgId',
      value: msgId,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_11__db_Utils__["f" /* getMessageByIdDB */])(msgId);
      /**return getMessageByIdIQ(msgId, chatType);*/
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["p"] = getMessageById;


/**
 * Get Reply Message by Message ID
 * @example SDK.getReplyMessage("123abc456");
 * @param {String} replyMsgId - Reply Message Id
 * @param {String} chatType - Optional - Type of the Chat
 * @returns {Object} Success/Error Response (Emit array of object will be received in callbacks.replyMessageListener)
 */
const getReplyMessage = (replyMsgId, chatType) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'replyMsgId',
      value: replyMsgId,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["m" /* getReplyMessageIQ */])(replyMsgId, chatType);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["u"] = getReplyMessage;


/**
 * Forward an Message to Other Single User/Group
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {Array} msgIds - Original Message Ids
 * @param {Boolean} isAsync - `true` If Forward has to be One by One - To Maintain Order
 * @returns {Object} Success/Error Response
 */
const forwardMessages = async (toJid, msgIds, isAsync = true) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'msgIds',
      value: msgIds,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      for (let i = 0; i < msgIds.length; i++) {
        const msgId = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
        if (isAsync) await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* forwardMessageIQ */])(msgIds[i], msgId, toJid);else Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* forwardMessageIQ */])(msgIds[i], msgId, toJid);
      }
      return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = forwardMessages;


/**
 * Forward an Message to Multiple User/Group
 * @param {Array} toJids - Array of To Jid (Username with Domain)
 * @param {Array} msgIds - Array of Original Message Ids
 * @param {Boolean} isAsync - `true` If Forward has to be One by One - To Maintain Order
 * @returns {Object} Success/Error Response
 */
const forwardMessagesToMultipleUsers = async (toJids, msgIds, isAsync = true, newMsgIds = []) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJids',
      value: toJids,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }, {
      key: 'msgIds',
      value: msgIds,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      // Iterating Each Message and Each User Jid
      let msdIdIndex = 0;
      for (let msgId of msgIds) {
        for (let toJid of toJids) {
          const newmsgId = newMsgIds[msdIdIndex] || Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
          msdIdIndex++;
          if (isAsync) await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* forwardMessageIQ */])(msgId, newmsgId, toJid);else Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* forwardMessageIQ */])(msgId, newmsgId, toJid);
        }
      }
      return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = forwardMessagesToMultipleUsers;


/**
 * Add/Remove Favourite Message by ID
 * @example SDK.updateFavouriteStatus("123abc123", true);
 * @example SDK.updateFavouriteStatus("123abc123", false);
 * @param {String} msgId - Array of Message Ids
 * @param {Boolean} isFavourite - Favourite type - true - Add to Favourite - false - Remove from Favourite
 * @returns {Object} Success/Error Response
 */
const updateFavouriteStatus = (toJid, msgIds, isFavourite) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'msgIds',
      value: msgIds,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }, {
      key: 'isFavourite',
      value: isFavourite,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      for (let i = 0; i < msgIds.length; i++) {
        Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["w" /* updateFavouriteStatusIQ */])(toJid, msgIds[i], isFavourite);
      }
      return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["L"] = updateFavouriteStatus;


/**
 * Get All Favourited Messages List of Current User
 * @example SDK.getAllFavouriteMessages();
 * @returns {Object} Success/Error Response (Emit array of objects. It will be received in callbacks.favouriteMessageListener)
 */
const getAllFavouriteMessages = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["e" /* getFavouritedMsgListIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["j"] = getAllFavouriteMessages;


/**
 * Remove All Favourite Messages of Current User
 * @example SDK.removeAllFavouriteMessages()
 * @returns {Object} Success/Error Response
 */
const removeAllFavouriteMessages = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["r" /* removeAllFavouritedMsgIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["w"] = removeAllFavouriteMessages;


/**
 * Clear Particular Chat Messages
 * @example SDK.clearChat("1111111111@xmppdomain", false);
 * @example SDK.clearChat("1111111111@mix.xmppdomain", true);
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {Boolean} favourites - To Delete All Messages along With Favourites
 * @returns {Object} Success/Error Response
 */
const clearChat = async (toJid, favourites = true) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["a" /* clearChatDB */])(toJid);
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["b" /* clearOrDeleteChatMsgIQ */])(toJid, 1, favourites);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = clearChat;


/**
 * Clear Particular Chat Messages
 * @example SDK.deleteChat("1111111111@xmppdomain", false);
 * @example SDK.deleteChat("1111111111@mix.xmppdomain", true);
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {Boolean} favourites - To Delete All Messages along With Favourites
 * @returns {Object} Success/Error Response
 */
const deleteChat = (toJid, favourites = true) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_11__db_Utils__["e" /* deleteChatDB */])(toJid);
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["b" /* clearOrDeleteChatMsgIQ */])(toJid, 0, favourites);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = deleteChat;


/**
 * Clear All Chat Messages
 * @example SDK.clearAllChat();
 * @returns {Object} Success/Error Response
 */
const clearAllChat = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["q" /* removeAllChatMsgIQ */])(1);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = clearAllChat;


/**
 * Delete All Recent Chats
 * @example SDK.deleteAllChat();
 * @returns {Object} Success/Error Response
 */
const deleteAllChat = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["q" /* removeAllChatMsgIQ */])(0);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = deleteAllChat;


/**
 * Delete One or More Messages - (Delete For Me) - Single/Group Chat
 * @example SDK.deleteMessagesForMe(["123abc123", "456def456"], "11111111111@xmppdomain");
 * @example SDK.deleteMessagesForMe(["456def456", "123abc456"], "11111111111@mix.xmppdomain");
 * @param {Array} msgIds - Array of Unique Message Ids
 * @param {String} toJid - To Jid (Username with Domain)
 * @returns {Object} Success/Error Response
 */
const deleteMessagesForMe = async (toJid, msgIds, deleteMediaFromMobile) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'msgIds',
      value: msgIds,
      rules: 'arrayRequired|isArray'
    }]);
    if (response.statusCode === 200) {
      const iqSendMsdIds = await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["b" /* deleteMessageDB */])(toJid, msgIds);
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["d" /* deleteMessageIQ */])(toJid, iqSendMsdIds.join());
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = deleteMessagesForMe;


/**
 * Delete One or More Messages - (Delete For Everyone) - Single/Group Chat
 * @example SDK.deleteMessagesForEveryone(["123abc123"], "2222222222@xmppdomain");
 * @example SDK.deleteMessagesForEveryone(["456def456"], "2222222222@mix.xmppdomain");
 * @param {String} toJid - To Jid (Username with Domain)
 * @param {Array} msgIds - Array of Unique Message Ids
 * @returns {Object} Success/Error Response
 */
const deleteMessagesForEveryone = async (toJid, msgIds, deleteMediaFromMobile) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'msgIds',
      value: msgIds,
      rules: 'arrayRequired|isArray'
    }]);
    if (response.statusCode === 200) {
      const iqSendMsdIds = await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["c" /* deleteMessagesForEveryoneDB */])(toJid, msgIds);
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["p" /* recallGroupMessageIQ */])(toJid, iqSendMsdIds.join());
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["a" /* recallMessageIQ */])(toJid, iqSendMsdIds.join());
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = deleteMessagesForEveryone;


/**
 * Sending User Typing Status to Single/Group Chat
 * @example SDK.sendTypingStatus("2222222222@xmppdomain");
 * @example SDK.sendTypingStatus("2222222222@mix.xmppdomain");
 * @param {String} toJid - To Jid (Username with Domain)
 * @returns {Object} Success/Error Response
 */
const sendTypingStatus = toJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["u" /* sendTypingStatusGroupIQ */])(toJid);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["g" /* sendTypingStatusIQ */])(toJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["I"] = sendTypingStatus;


/**
 * Sending User Typing Gone Status to Single/Group Chat
 * @example SDK.sendTypingGoneStatus("2222222222@xmppdomain");
 * @example SDK.sendTypingGoneStatus("2222222222@mix.xmppdomain");
 * @param {String} toJid - To Jid (Username with Domain)
 * @returns {Object} Success/Error Response
 */
const sendTypingGoneStatus = toJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["t" /* sendTypingGoneStatusGroupIQ */])(toJid);
      return Object(__WEBPACK_IMPORTED_MODULE_1__strophe_msgstanza__["f" /* sendTypingGoneStatusIQ */])(toJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["H"] = sendTypingGoneStatus;


const showChatNotification = async rmtMsg => {
  try {
    await Object(__WEBPACK_IMPORTED_MODULE_12__app_reconnect__["a" /* reconnect */])();
    let requestHashMap = {
      offline: 'false',
      carbon: '',
      messageId: rmtMsg.data.message_id,
      messageTo: '',
      messageFrom: '',
      chatType: rmtMsg.data.chat_type
    };
    if (rmtMsg.data.chat_type == 'chat') {
      requestHashMap.carbon = false;
      requestHashMap.messageTo = rmtMsg.data.sent_from;
      requestHashMap.messageFrom = rmtMsg.data.user_jid;
      requestHashMap.groupId = '';
    }
    let foundMsg;
    let profileDetail;
    if (rmtMsg) {
      foundMsg = await getMessageById(requestHashMap.messageId, requestHashMap.chatType);
      profileDetail = await Object(__WEBPACK_IMPORTED_MODULE_7__profile__["i" /* getUserProfile */])(foundMsg.data.fromUserJid);
      if (foundMsg.statusCode == 200 && profileDetail.statusCode == 200) {
        const date = new Date();
        const title = profileDetail.data.nickName ? profileDetail.data.nickName : foundMsg.data.fromUser;
        const body = foundMsg.data.msgBody.message;
        let response = {
          date: date,
          title: title,
          body: body
        };
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])(response);
      } else Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])({ statusCode: 500, message: 'Failed to get message' });
    }
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["K"] = showChatNotification;


const getCallNotification = async remoteMessage => {
  try {
    const type = remoteMessage.data.type;


    if (type === 'mediacall' && __WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS === 'android') {
      return Object(__WEBPACK_IMPORTED_MODULE_17__call_communication_iq__["d" /* validateAndHandleCallMessage */])(remoteMessage);
    } else if (__WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS === 'ios' && type === 'media_call') {
      return Object(__WEBPACK_IMPORTED_MODULE_17__call_communication_iq__["c" /* handleIncomingCall */])(remoteMessage);
    }
  } catch (error) {
    console.log('getCallNotification', error);
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["k"] = getCallNotification;


const getNotificationData = async remoteMessage => {
  try {
    const resourceId = await __WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage___default.a.getItem('resourceId', resourceId);
    var _remoteMessage$messag = remoteMessage.messageId;
    const messageId = _remoteMessage$messag === undefined ? '' : _remoteMessage$messag,
          contentAvailable = remoteMessage.contentAvailable,
          mutableContent = remoteMessage.mutableContent;
    var _remoteMessage$notifi = remoteMessage.notification;
    _remoteMessage$notifi = _remoteMessage$notifi === undefined ? {} : _remoteMessage$notifi;
    var _remoteMessage$notifi2 = _remoteMessage$notifi.title;
    const title = _remoteMessage$notifi2 === undefined ? '' : _remoteMessage$notifi2;
    var _remoteMessage$data = remoteMessage.data;
    const type = _remoteMessage$data.type,
          chat_type = _remoteMessage$data.chat_type,
          to_user = _remoteMessage$data.to_user,
          message_time = _remoteMessage$data.message_time,
          message_content = _remoteMessage$data.message_content,
          push_from = _remoteMessage$data.push_from,
          userDomain = _remoteMessage$data.userDomain,
          from_user = _remoteMessage$data.from_user,
          user_type = _remoteMessage$data.user_type,
          androidTitle = _remoteMessage$data.title,
          androidMessageId = _remoteMessage$data.message_id,
          androidUserJid = _remoteMessage$data.user_jid,
          androidSentFrom = _remoteMessage$data.sent_from,
          androidToJid = _remoteMessage$data.to_jid,
          androidMessageTime = _remoteMessage$data.message_time;


    if (androidTitle === 'seen') {
      return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])('Data Saved');
    }

    if (__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_27" /* NOTIFY_CONTENTS */].includes(androidTitle)) {
      const reqPayload = {
        carbon: false,
        chatType: chat_type,
        deviceId: resourceId,
        lastMessageDateTime: __WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS == 'ios' ? message_time : androidMessageTime,
        messageFrom: __WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS === 'ios' ? push_from : androidToJid,
        messageId: __WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS === 'ios' ? messageId : androidMessageId,
        messageTo: __WEBPACK_IMPORTED_MODULE_14_react_native__["Platform"].OS === 'ios' ? from_user : androidSentFrom,
        offline: false
      };
      if (messageId) {
        const delivered_api_url = await __WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage___default.a.getItem('delivered_api_url');
        const iv = await __WEBPACK_IMPORTED_MODULE_13__react_native_async_storage_async_storage___default.a.getItem('iv');
        const userToken = await Object(__WEBPACK_IMPORTED_MODULE_15__helpers_localDb__["c" /* getToken */])();
        const foundMsg = await Object(__WEBPACK_IMPORTED_MODULE_6__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_16" /* METHOD_PUT */], delivered_api_url, reqPayload, userToken);
        /**
         console.log(
           'SDK getNotificationData msgBody',
           JSON.stringify(foundMsg, null, 2),
         );
         const msgBody = decryptMsg(foundMsg.data.messageContent, messageId);
        */
        if (foundMsg.status == 200) {
          await Object(__WEBPACK_IMPORTED_MODULE_16__db_controllers_vcardTable__["b" /* handleVcardDetail */])(reqPayload.messageFrom);
          return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["r" /* getNotifyMessageConstructor */])(foundMsg.data, iv);
        } else Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Failed to get message');
      } else Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Message ID not found');
    }
  } catch (error) {
    console.log('getNotificationData', error);
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["r"] = getNotificationData;


const getMediaURL = async (fileToken, mediaType) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'File Token',
      value: fileToken,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);

    if (response.statusCode === 200) {
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
      const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])();
      const fileUrl = apiEndPoints.mediaDownload + fileToken;
      successRes.data = { fileUrl, token };
      return successRes;
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["o"] = getMediaURL;


/**
 * Update Chat Mute Notification
 * @example SDK.updateMuteNotification("1111111111@xmppdomain", true);
 * @param {String} toJid
 * @param {String} isMuted
 * @returns {Object} Success/Error Response
 */
async function updateMuteNotification(toJid, isMuted) {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'isMuted',
      value: isMuted,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["x" /* updateMuteStatusIQ */])(toJid, isMuted);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

const clearDBData = async () => {
  await Object(__WEBPACK_IMPORTED_MODULE_11__db_Utils__["c" /* dbClear */])();
};
/* harmony export (immutable) */ __webpack_exports__["c"] = clearDBData;


/**
 * Update Chat Mute Notification
 * @example SDK.updateMuteNotification("1111111111@xmppdomain", true);
 * @param {String} toJid
 * @param {String} isMuted
 * @returns {Object} Success/Error Response
 */
async function messageSearch(string, toJid) {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_11__db_Utils__["j" /* searchMessageDB */])(string, toJid);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

const sendLocationMessage = async (toJid, lat, long, msgId, replyTo = '') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);

    if (response.statusCode === 200) {
      const messageId = msgId ? msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
      const fileOptions = {
        latitude: lat.toString(),
        longitude: long.toString()
      };
      const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], messageId, replyTo, toJid, {}, fileOptions);
      if (msgResponse.statusCode === 200) {
        Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, '', msgId, replyTo, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], {}, fileOptions);
        // Validating JID to Send Message to Single/Group Chat
        // if (MIX_BARE_JID.test(toJid))
        //   return sendGroupMessageIQ(toJid, messageId, LOCATION, cypherText);
        return sendAttachmentMessage(toJid, fileOptions, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], msgId, replyTo);
      }
      return msgResponse;
    }
    return response;
  } catch (error) {
    console.log('Error in sendLocationMessage', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["C"] = sendLocationMessage;


/**
 * @typedef ContactWithMsgId
 * @property {string} name
 * @property {Array<string>} phone_number
 * @property {boolean} active_status
 * @property {string | undefined} msgId
 */

/**
 *
 * @param {string} toJid
 * @param {Array<ContactWithMsgId>} contacts
 * @param {string} replyTo
 * @returns
 */
const sendContactMessage = async (toJid, contacts, replyTo = '') => {
  try {
    // validating the params
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }, {
      key: 'contacts',
      value: contacts,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      const messageResArr = [];
      for (const contact of contacts) {
        const msgId = contact.msgId;

        const messageId = msgId ? msgId : Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA');
        const msgResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleMessages */])('', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], messageId, replyTo, toJid, {}, contact);
        if (msgResponse.statusCode === 200) {
          // Storing data in DB
          Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, '', messageId, replyTo, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], {}, contact);
          // sending IQ to server
          const result = await sendAttachmentMessage(toJid, contact, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], msgId, replyTo);
          messageResArr.push(result);
        }
      }
      // success callback
      const allSuccess = messageResArr.every(res => res.statusCode === 200);
      if (allSuccess) {
        return Promise.resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])());
      } else {
        return Promise.resolve(messageResArr.find(res => res.statusCode !== 200) || Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Something went wrong'));
      }
    } else {
      return response;
    }
  } catch (error) {
    console.log('Error in sendContactMessage', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["z"] = sendContactMessage;


/**
 * Update Unread Count on Recent Chat
 * @example SDK.updateRecentChatUnreadCount("1111111111@xmppdomain");
 * @param {String} toJid
 * @returns {Object} Success/Error Response
 */
async function updateRecentChatUnreadCount(toJid) {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["y" /* updateRecentChatUnreadCountIQ */])(toJid);
      Object(__WEBPACK_IMPORTED_MODULE_10__db_controllers_recentTable__["e" /* updateRecentChatUnreadCountInDB */])(toJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

const sendMediaMessage = async (toJid, msgId, type = '', file = {}, fileOptions = {}, replyTo = '') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toJid',
      value: toJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_2" /* JID_REQUIRED */]
    }]);
    if (response.statusCode !== 200) {
      return response;
    }

    let _file = file,
        _fileOptions = fileOptions,
        _replyTo = replyTo,
        _type = type;
    const _foundMsg = await getMessageById(msgId);
    if (_foundMsg.statusCode === 200 && Object.keys(_foundMsg.data).length > 0) {
      var _fileObjConstructor = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["k" /* fileObjConstructor */])(_foundMsg.data, 'foundMsg');

      const fileObj = _fileObjConstructor.fileObj,
            fileOptionsObj = _fileObjConstructor.fileOptionsObj,
            replyToMsgId = _fileObjConstructor.replyToMsgId;

      _file = fileObj;
      _fileOptions = fileOptionsObj;
      _replyTo = replyToMsgId;
      _type = _foundMsg.data.msgBody.message_type;
    }
    if (!_type) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Media type is required', 202);
    }
    switch (_type) {
      case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["C" /* FILE */]:
        return sendDocumentMessage(toJid, _file, _fileOptions, _replyTo);
      case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */]:
        return sendImageMessage(toJid, _file, _fileOptions, _replyTo);
      case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */]:
        return sendVideoMessage(toJid, _file, _fileOptions, _replyTo);
      case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["i" /* AUDIO */]:
        return sendAudioMessage(toJid, _file, _fileOptions, _replyTo);
      default:
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Invalid Media type', 202);
    }
  } catch (error) {
    console.log('sendMediaMessage', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["D"] = sendMediaMessage;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(2).Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = __webpack_require__(116);
var Writable = __webpack_require__(120);
__webpack_require__(0)(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = __webpack_require__(144);
var Writable = __webpack_require__(148);
__webpack_require__(0)(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__roasterTable__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__recentTable__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__messageDetailTable__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mediaDetailTable__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_react_native_fs__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_react_native_fs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_react_native_fs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__realmDB__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__locationMessageTable__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__contactMessageTable__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__modules_app_common__ = __webpack_require__(45);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };


















/**
 * Create Message in MessageTable
 * @example realm, params
 *  @param chatUser: toJid,
    @param fromUserJid: fromUserJid ,
    @param mid: msgId,
    @param msgTime: msgTime,
    @param chatType: chatType,
    @param msgType: type,
    @param publisherJid: publisherJid
    @example const realm = await getRealmDB();
    @example const messageData = {
            chatUser: toJid,
            fromUserJid: JSON.parse(currentUserJid),
            mid: msgId,
            msgTime: msgTime,
            chatType: 'chat',
            msgType: type,
            publisherJid: JSON.parse(currentUserJid)
        }
 */
const createMsgTable = async (realm, params) => {
  try {
    realm.write(() => {
      realm.create('MessageTable', _extends({}, params));
    });
  } catch (error) {
    console.log('createMsgTable', error);
  }
};
/* unused harmony export createMsgTable */


const getMessagefrmDB = (realm, mid) => {
  try {
    return realm.objectForPrimaryKey('MessageTable', mid);
  } catch (error) {
    console.log('getMessage MessageTable', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = getMessagefrmDB;


const getMessages = async jid => {
  try {
    const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    successRes.userJid = jid;
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    const filteredChatUser = realm.objects('MessageTable').filtered('chatUser = $0', jid);
    if (!filteredChatUser.length) successRes.data = [];else {
      const chatConversation = filteredChatUser.map(chatMessage => {
        let nickName = '';
        // = realm.objectForPrimaryKey('VcardTable', chatMessage.fromUserJid).nickName
        let msgBody = Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["i" /* msgBodyConstructor */])(chatMessage, realm, nickName);
        return {
          createdAt: Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["a" /* changeTimeFormat */])(chatMessage.msgTime),
          chatType: chatMessage.chatType,
          favouriteBy: '',
          favouriteStatus: chatMessage.isFavourite,
          deleteStatus: chatMessage.isDeleted,
          fromUserJid: chatMessage.fromUserJid.split('@')[0],
          fromUserJid: chatMessage.fromUserJid,
          publisherJid: chatMessage.publisherJid,
          publisherId: chatMessage.publisherJid.split('@')[0],
          timestamp: chatMessage.msgTime,
          msgId: chatMessage.mid,
          msgStatus: chatMessage.status,
          isSender: chatMessage.isSender,
          msgBody: msgBody
        };
      });
      successRes.data = JSON.parse(JSON.stringify(chatConversation));
    }
    return successRes;
  } catch (error) {
    console.log('getMessages DB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getMessages;


const handleMessageCreate = async (toJid, msgBody = '', msgId, replyTo = '', type, file = {}, fileOptions = {}) => {
  try {
    console.log(msgId, 'handleMessageCreate msgId');
    const dbCheck = await Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["b" /* dbCheckWithMsgId */])(msgId);
    console.log(dbCheck, 'dbCheck');
    if (dbCheck) {
      return;
    }
    const currentUserJid = await __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage___default.a.getItem('currentUserJID');
    const parsedCurrentJid = JSON.parse(currentUserJid);
    let userJid, chatType;
    if (__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) {
      chatType = __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["L" /* GROUPCHAT */];
    } else {
      chatType = __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["q" /* CHAT */];
      userJid = toJid.split('@').length > 1 ? toJid : `${toJid}@${parsedCurrentJid.split('@')[1]}`;
    }
    Object(__WEBPACK_IMPORTED_MODULE_0__roasterTable__["d" /* handleRoaster */])(userJid, chatType);
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    const msgDetail = {
      mid: msgId,
      message_type: type,
      message: msgBody,
      replyTo: replyTo
    };
    Object(__WEBPACK_IMPORTED_MODULE_6__messageDetailTable__["a" /* createMsgDetailTable */])(realm, msgDetail);
    if (type === __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_6" /* LOCATION */]) {
      const _locationData = {
        mid: msgId,
        latitude: fileOptions.latitude,
        longitude: fileOptions.longitude
      };
      _locationData.mid = msgId;
      Object(__WEBPACK_IMPORTED_MODULE_13__locationMessageTable__["a" /* createLocationMsg */])(realm, _locationData);
    }
    if (type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */] || type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */] || type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["i" /* AUDIO */] || type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["C" /* FILE */]) {
      var _file$type = file.type;
      const type = _file$type === undefined ? '' : _file$type;
      var _file$name = file.name;
      const name = _file$name === undefined ? '' : _file$name;
      var _file$size = file.size;
      const size = _file$size === undefined ? 0 : _file$size;
      var _file$duration = file.duration;
      const duration = _file$duration === undefined ? 0 : _file$duration,
            localPath = file.localPath;
      var _fileOptions$caption = fileOptions.caption;
      const caption = _fileOptions$caption === undefined ? '' : _fileOptions$caption;
      var _fileOptions$androidH = fileOptions.androidHeight;
      const androidHeight = _fileOptions$androidH === undefined ? 0 : _fileOptions$androidH;
      var _fileOptions$androidW = fileOptions.androidWidth;
      const androidWidth = _fileOptions$androidW === undefined ? 0 : _fileOptions$androidW;
      var _fileOptions$webHeigh = fileOptions.webHeight;
      const webHeight = _fileOptions$webHeigh === undefined ? 0 : _fileOptions$webHeigh;
      var _fileOptions$webWidth = fileOptions.webWidth;
      const webWidth = _fileOptions$webWidth === undefined ? 0 : _fileOptions$webWidth;
      var _fileOptions$thumbIma = fileOptions.thumbImage;
      const thumbImage = _fileOptions$thumbIma === undefined ? '' : _fileOptions$thumbIma;
      var _fileOptions$width = fileOptions.width;
      const width = _fileOptions$width === undefined ? 0 : _fileOptions$width;
      var _fileOptions$height = fileOptions.height;
      const height = _fileOptions$height === undefined ? 0 : _fileOptions$height;
      var _fileOptions$fileURL = fileOptions.fileURL;
      const fileURL = _fileOptions$fileURL === undefined ? '' : _fileOptions$fileURL;
      var _fileOptions$isDownlo = fileOptions.isDownloaded;
      const isDownloaded = _fileOptions$isDownlo === undefined ? 0 : _fileOptions$isDownlo;
      var _fileOptions$isUpload = fileOptions.isUploading;
      const isUploading = _fileOptions$isUpload === undefined ? 3 : _fileOptions$isUpload;

      const mediaDetail = {
        mid: msgId,
        caption: caption,
        duration: duration,
        fileName: name,
        fileSize: size,
        fileType: type,
        fileUrl: fileURL,
        isDownloaded: isDownloaded,
        isUploading: isUploading,
        localPath: localPath,
        thumbImage: thumbImage,
        webWidth: webWidth,
        webHeight: webHeight,
        mobileWidth: androidWidth,
        mobileHeight: androidHeight,
        originalWidth: width,
        originalHeight: height
      };
      Object(__WEBPACK_IMPORTED_MODULE_7__mediaDetailTable__["a" /* createMediaDetailTable */])(realm, mediaDetail);
    }
    if (type === __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["w" /* CONTACT */]) {
      const _contactData = {
        mid: msgId,
        name: fileOptions.name,
        phone_number: fileOptions.phone_number,
        active_status: fileOptions.active_status
      };
      Object(__WEBPACK_IMPORTED_MODULE_14__contactMessageTable__["a" /* createContactMsg */])(realm, _contactData);
    }
    realm.write(() => {
      realm.create('MessageStatusTable', {
        _id: Date.now().toString(),
        jid: userJid,
        mid: msgId,
        chatType: 'chat'
      });
    });
    const msgTime = Date.now() * 1000;
    const messageData = {
      chatUser: userJid,
      fromUserJid: parsedCurrentJid,
      mid: msgId,
      msgTime: msgTime,
      chatType: 'chat',
      msgType: type,
      publisherJid: parsedCurrentJid
    };
    createMsgTable(realm, messageData);
    Object(__WEBPACK_IMPORTED_MODULE_5__recentTable__["c" /* handleRecentTable */])({
      jid: userJid,
      mid: msgId,
      msgTime: msgTime
    });
  } catch (error) {
    console.log('handleMessageCreate DB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = handleMessageCreate;


const updateMessageStatus = params => {
  try {
    const type = params.type,
          msgId = params.msgId,
          fromUserJid = params.fromUserJid,
          fromUserId = params.fromUserId,
          msgType = params.msgType,
          timestamp = params.timestamp,
          msgStatus = params.msgStatus;

    Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])().then(realm => {
      const messageStatus = realm.objects('MessageStatusTable').filtered('mid = $0', msgId);
      const message = realm.objectForPrimaryKey('MessageTable', msgId);
      if (messageStatus.length && timestamp) {
        if (msgType == 'acknowledge') {
          realm.write(() => {
            messageStatus[0].ackTime = Number(timestamp);
          });
        }
        if (msgType == 'delivered') {
          realm.write(() => {
            messageStatus[0].receivedTime = Number(timestamp);
          });
        }
        if (msgType == 'seen') {
          realm.write(() => {
            messageStatus[0].seenTime = Number(timestamp);
          });
        }
      }
      const validStatus = [0, 1, 2];
      if (message && validStatus.includes(msgStatus)) {
        realm.write(() => {
          message.status = msgStatus;
        });
        if (msgType == 'acknowledge') {
          if (type == 'delivered') realm.write(() => {
            message.status = 1;
          });
          if (type == 'seen') realm.write(() => {
            message.status = 2;
          });
        }
      }
    }).catch(error => {
      console.log('then updateMessageStatus', error);
    });
  } catch (error) {
    console.log('updateMessageStatus', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = updateMessageStatus;


const getAllUnSentMsg = async () => {
  const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
  const filteredUnsetMessage = realm.objects('MessageTable').filtered('status = $0', 3);
  if (!filteredUnsetMessage.length) return [];
  const chatMsg = filteredUnsetMessage.map(chatMessage => ({
    chatType: chatMessage.chatType,
    favouriteBy: '',
    favouriteStatus: chatMessage.isFavourite,
    deleteStatus: chatMessage.isDeleted,
    fromUserJid: chatMessage.chatUser,
    timestamp: chatMessage.msgTime,
    msgId: chatMessage.mid,
    msgStatus: chatMessage.status,
    isSender: chatMessage.isSender,
    msgBody: Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["i" /* msgBodyConstructor */])(chatMessage, realm, '')
  }));
  return JSON.parse(JSON.stringify(chatMsg));
};
/* harmony export (immutable) */ __webpack_exports__["d"] = getAllUnSentMsg;


const handleMsgRstRecTables = (params, realm) => {
  try {
    const chatType = params.chatType,
          fromUserJid = params.fromUserJid,
          msgBody = params.msgBody,
          msgId = params.msgId,
          msgStatus = params.msgStatus,
          publisherJid = params.publisherJid,
          timestamp = params.timestamp;

    const messageData = {
      chatUser: fromUserJid,
      fromUserJid: fromUserJid,
      mid: msgId,
      msgTime: timestamp,
      chatType: chatType,
      status: msgStatus,
      publisherJid: publisherJid,
      msgType: msgBody.message_type
    };
    createMsgTable(realm, messageData);
    Object(__WEBPACK_IMPORTED_MODULE_0__roasterTable__["d" /* handleRoaster */])(fromUserJid, chatType);
    const shouldUpdateUnreadCount = Object(__WEBPACK_IMPORTED_MODULE_15__modules_app_common__["d" /* getActiveChatUser */])() !== fromUserJid;
    Object(__WEBPACK_IMPORTED_MODULE_5__recentTable__["c" /* handleRecentTable */])({
      jid: fromUserJid,
      mid: msgId,
      msgTime: timestamp
    }, shouldUpdateUnreadCount);
  } catch (error) {
    console.log('handleMsgRstRecTables', error);
  }
};

const handleCreateIncomingMsg = async params => {
  try {
    const chatType = params.chatType,
          msgBody = params.msgBody,
          msgId = params.msgId;

    const dbCheck = await Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["b" /* dbCheckWithMsgId */])(msgId);
    if (dbCheck) return;
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    if (msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */] && chatType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["q" /* CHAT */]) {
      realm.write(() => {
        realm.create('MessageDetailTable', {
          mid: msgId,
          message_type: msgBody.message_type,
          message: msgBody.message,
          replyTo: msgBody.replyTo || ''
        });
      });
    }
    if (msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_6" /* LOCATION */]) {
      const location = msgBody.location;

      const locationDetail = {
        mid: msgId,
        latitude: location.latitude.toString() || '',
        longitude: location.longitude.toString() || ''
      };
      Object(__WEBPACK_IMPORTED_MODULE_13__locationMessageTable__["a" /* createLocationMsg */])(realm, locationDetail);
    }
    if (msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["w" /* CONTACT */]) {
      const contact = msgBody.contact;

      const contactDetail = {
        mid: msgId,
        name: contact.name,
        phone_number: contact.phone_number || [],
        active_status: contact.active_status || []
      };
      Object(__WEBPACK_IMPORTED_MODULE_14__contactMessageTable__["a" /* createContactMsg */])(realm, contactDetail);
    }
    if (chatType == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["q" /* CHAT */] && (msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */] || msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */] || msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["C" /* FILE */] || msgBody.message_type == __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["i" /* AUDIO */])) {
      const media = msgBody.media;

      realm.write(() => {
        realm.create('MediaDetailTable', {
          mid: msgId,
          caption: media.caption || '',
          duration: media.duration || 0,
          fileName: media.fileName || '',
          fileSize: media.file_size,
          fileType: msgBody.message_type,
          fileUrl: media.file_url,
          isDownloaded: media.is_downloaded,
          isUploading: media.is_uploading,
          localPath: media.local_path,
          thumbImage: media.thumb_image,
          webWidth: media.webWidth,
          webHeight: media.webHeight,
          mobileWidth: media.androidWidth,
          mobileHeight: media.androidHeight,
          originalWidth: media.originalWidth,
          originalHeight: media.originalHeight
        });
      });
    }
    handleMsgRstRecTables(params, realm);
  } catch (error) {
    console.log('handleCreateIncomingMsg', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = handleCreateIncomingMsg;


const deleteMsgBody = async (message, realm) => {
  const mid = message.mid,
        msgType = message.msgType;
  // Delete records based on msgType

  switch (msgType) {
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_57" /* TEXT */]:
      realm.write(() => {
        const textMessage = realm.objectForPrimaryKey('MessageDetailTable', mid);
        if (textMessage) {
          realm.delete(textMessage);
        }
      });
      break;
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["S" /* IMAGE */]:
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_76" /* VIDEO */]:
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["C" /* FILE */]:
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["i" /* AUDIO */]:
      realm.write(() => {
        const mediaMessage = realm.objectForPrimaryKey('MediaDetailTable', mid);
        if (mediaMessage) {
          if (mediaMessage.localPath) __WEBPACK_IMPORTED_MODULE_8_react_native_fs___default.a.unlink(mediaMessage.localPath);
          realm.delete(mediaMessage);
        }
      });
      break;
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_6" /* LOCATION */]:
      realm.write(() => {
        const locationMessage = realm.objectForPrimaryKey('LocationMessageTable', mid);
        if (locationMessage) {
          realm.delete(locationMessage);
        }
      });
      break;
    case __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["w" /* CONTACT */]:
      realm.write(() => {
        const contactMessage = realm.objectForPrimaryKey('ContactMessageTable', mid);
        if (contactMessage) {
          realm.delete(contactMessage);
        }
      });
      break;
    default:
      console.log(`Unhandled msgType: ${msgType}`);
      break;
  }
};

const clearChatDB = async toJid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    Object(__WEBPACK_IMPORTED_MODULE_5__recentTable__["d" /* removedMsgfrmRecentTable */])(toJid);
    const messagesToDelete = realm.objects('MessageTable').filtered('chatUser = $0', toJid);
    const extractedData = messagesToDelete.map(message => {
      return {
        mid: message.mid,
        msgType: message.msgType
      };
    });
    if (extractedData.length) extractedData.forEach(message => {
      deleteMsgBody(message, realm);
    });
    realm.write(() => {
      realm.delete(messagesToDelete);
    });
  } catch (error) {
    console.log('clearChatDB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = clearChatDB;


const getLatestMessageByChatUser = async chatUser => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    const latestMessage = realm.objects('MessageTable').filtered('chatUser = $0 AND (isDeleted = $1 OR isDeleted = $2)', chatUser, 0, 1) // if message is not deleted or it should be deleted for everyone
    .sorted('msgTime', true)[0];
    return latestMessage;
  } catch (error) {
    console.error('Error getting latest message:', error);
    return null;
  }
};
/* unused harmony export getLatestMessageByChatUser */


const deleteMessageDB = async (toJid, msgIds) => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    const iqSendMsdIds = [];
    let messageToDelete;
    msgIds.forEach(messageId => {
      messageToDelete = realm.objectForPrimaryKey('MessageTable', messageId);
      if (messageToDelete) {
        if (messageToDelete.status === 3) {
          Object(__WEBPACK_IMPORTED_MODULE_11__helpers_localDb__["f" /* removeStanza */])(messageId);
        }
        if (messageToDelete.status !== 3) {
          iqSendMsdIds.push(messageId);
        }
        realm.write(() => {
          messageToDelete.isDeleted = 2;
        });
      }
    });
    const latestMessage = await getLatestMessageByChatUser(toJid);
    let chatType = '';
    if (__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid)) {
      chatType = __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["L" /* GROUPCHAT */];
    } else {
      chatType = __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["q" /* CHAT */];
    }
    let params = {
      mid: '',
      msgTime: 0
    };
    let item = {
      chatType,
      fromUserId: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["u" /* getUserIdFromJid */])(toJid),
      lastMsgId: '',
      msgIds: msgIds,
      msgType: 'deleteMessage'
    };
    if (latestMessage) {
      params = {
        mid: latestMessage.mid,
        msgTime: latestMessage.msgTime * 1000
      };
      item.lastMsgId = latestMessage.mid;
    }
    Object(__WEBPACK_IMPORTED_MODULE_5__recentTable__["f" /* updateRecentMsg */])(toJid, params);
    if (Object(__WEBPACK_IMPORTED_MODULE_10__strophe_connection__["c" /* getConnectionObj */])() && !Object(__WEBPACK_IMPORTED_MODULE_10__strophe_connection__["c" /* getConnectionObj */])().connected || messageToDelete.status === 3) {
      Object.keys(item).length > 0 && Object(__WEBPACK_IMPORTED_MODULE_9__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_9__helpers_common__["a" /* callbackListeners */])().messageListener(item);
    }
    return iqSendMsdIds;
  } catch (error) {
    console.error('deleteMessageForMeDB', error);
    return [];
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = deleteMessageDB;


const deleteMessagesForEveryoneDB = async (toJid, msgIds) => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_12__realmDB__["a" /* getRealmDB */])();
    const iqSendMsdIds = [];
    msgIds.forEach(async messageId => {
      const messageToDelete = realm.objectForPrimaryKey('MessageTable', messageId);
      if (messageToDelete) {
        if (messageToDelete.status !== 3) {
          iqSendMsdIds.push(messageId);
        }
        realm.write(() => {
          messageToDelete.isDeleted = 1;
        });
      }
      if (Object(__WEBPACK_IMPORTED_MODULE_10__strophe_connection__["c" /* getConnectionObj */])() && !Object(__WEBPACK_IMPORTED_MODULE_10__strophe_connection__["c" /* getConnectionObj */])().connected || messageToDelete.status === 3) {
        if (messageToDelete.status === 3) {
          deleteMessageDB(toJid, [messageId]);
        } else {
          const item = {
            fromUserId: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["u" /* getUserIdFromJid */])(toJid),
            fromUserJid: toJid,
            msgId: messageId,
            msgType: 'acknowledge',
            timestamp: Date.now(),
            type: 'recall'
          };
          Object.keys(item).length > 0 && Object(__WEBPACK_IMPORTED_MODULE_9__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_9__helpers_common__["a" /* callbackListeners */])().messageListener(item);
        }
      }
    });
    return iqSendMsdIds;
  } catch (error) {
    console.error('deleteMessagesForEveryoneDB', error);
    return [];
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = deleteMessagesForEveryoneDB;


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__callSwitch__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__communication_callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__callLogs__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__service_notification__ = __webpack_require__(379);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__service_notification___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__service_notification__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__janus_index__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__service_api__ = __webpack_require__(22);















/**
 * Initialize the call
 * @example
 * SDK.initializeCall("signalserver.com");
 * @export
 * @param {String} signallingServer - URL of signal server
 * @returns {Object} success or failure and socketId for transmitting the payload
 */
const initializeCall = (signallingServer = null, options = {}) => {
    try {
        const valiationRules = [{
            key: "signallingServer",
            value: signallingServer,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_55" /* STRING_REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);

        if (response.statusCode !== 200) return response;
        if (typeof options !== 'object') return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('initializeCall options must be an object.');
        const jid = options.jid;

        jid && Object(__WEBPACK_IMPORTED_MODULE_7__config__["w" /* setLocalUserCustomJid */])(jid);

        return Object(__WEBPACK_IMPORTED_MODULE_6__communication_callAdapter__["c" /* initConnection */])(signallingServer);
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_10__functions__["c" /* consoleLog */])('Initialize Call Error - ', error);
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["m"] = initializeCall;


/**
 * Initialize a call to users
 * @param {*} dataObj
 */
const makeCall = dataObj => {
    let toUsers = dataObj.toUsers;


    const valiationRules = [{
        key: "toUsers",
        value: toUsers,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;

    toUsers = toUsers.filter(userJid => userJid);
    if (toUsers.length === 0) return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Invalid data.');
    const maxRemoteUsersInCall = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["q" /* getMaxUsersOfCall */])() - 1;
    if (toUsers.length > maxRemoteUsersInCall) return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(`Max ${Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["q" /* getMaxUsersOfCall */])()} members allowed in a call.`);

    dataObj['toUsers'] = !Array.isArray(toUsers) ? [toUsers] : toUsers;
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["m" /* _makeCall */])(dataObj);
};

/**
 * Make onetoone voice call
 * @param {*} toUserJid - touser jid
 */
const makeVoiceCall = (toUserJid, groupId) => {
    let checkAccess = false;

    // if(toUserJid && toUserJid.length > 1){
    //     checkAccess = havingAccessOrNot(GROUP_CALLS);
    // }else{
    //     checkAccess = havingAccessOrNot(ONE_TO_ONE_CALLS);
    // }

    // if(!checkAccess){
    //   console.error(ERROR_CODE, ERROR_MESSAGE);
    //   return featureErrorResponse(ERROR_MESSAGE);
    // }

    return makeCall({
        toUsers: toUserJid,
        groupId,
        callType: __WEBPACK_IMPORTED_MODULE_3__constants__["_4" /* CALL_TYPE_AUDIO */]
    });
};
/* harmony export (immutable) */ __webpack_exports__["t"] = makeVoiceCall;


/**
 * Make onetoone video call
 * @param {*} toUserJid - touser jid
 */
const makeVideoCall = (toUserJid, groupId) => {
    // let checkAccess = false;

    // if(toUserJid && toUserJid.length > 1){
    //     checkAccess = havingAccessOrNot(GROUP_CALLS);
    // }else{
    //     checkAccess = havingAccessOrNot(ONE_TO_ONE_CALLS);
    // }

    // if(!checkAccess){
    //   console.error(ERROR_CODE, ERROR_MESSAGE);
    //   return featureErrorResponse(ERROR_MESSAGE);
    // }

    return makeCall({
        toUsers: toUserJid,
        groupId,
        callType: __WEBPACK_IMPORTED_MODULE_3__constants__["_5" /* CALL_TYPE_VIDEO */]
    });
};
/* harmony export (immutable) */ __webpack_exports__["s"] = makeVideoCall;


/**
 * Attend the received call
 */
const answerCall = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["a" /* _answerCall */])();
};
/* harmony export (immutable) */ __webpack_exports__["b"] = answerCall;


/**
 * Send RECEIVED acknowledgement for receiving CALLING status
 */
const callReceived = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["c" /* _callReceived */])();
};
/* harmony export (immutable) */ __webpack_exports__["d"] = callReceived;


const declineCall = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["d" /* _declineCall */])();
};
/* harmony export (immutable) */ __webpack_exports__["f"] = declineCall;


const callEngaged = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["b" /* _callEngaged */])();
};
/* harmony export (immutable) */ __webpack_exports__["c"] = callEngaged;


const endCall = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["e" /* _endCall */])();
};
/* harmony export (immutable) */ __webpack_exports__["h"] = endCall;


const startScreenShare = () => Object(__WEBPACK_IMPORTED_MODULE_4__call__["r" /* _startScreenShare */])();
/* harmony export (immutable) */ __webpack_exports__["z"] = startScreenShare;


const stopScreenShare = () => Object(__WEBPACK_IMPORTED_MODULE_4__call__["s" /* _stopScreenShare */])();
/* harmony export (immutable) */ __webpack_exports__["A"] = stopScreenShare;


const muteAudio = isMuted => {
    const valiationRules = [{
        key: "Audio mute",
        value: isMuted,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["n" /* _muteAudio */])(isMuted);
};
/* harmony export (immutable) */ __webpack_exports__["u"] = muteAudio;


const muteVideo = isMuted => {
    const valiationRules = [{
        key: "Video mute",
        value: isMuted,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["o" /* _muteVideo */])(isMuted);
};
/* harmony export (immutable) */ __webpack_exports__["v"] = muteVideo;


/**
 * @typedef {Object} ValidationResult
 * @property {number} statusCode - The status code indicating the validation result.
 * @property {string} message - The message associated with the validation result.
 */

/**
 * Check if remote audio is muted for a user.
 * @param {string} userJid - The user's JID (Jabber ID).
 * @returns {ValidationResult|boolean} - The validation result or the result of _isRemoteAudioMuted.
 */
const isRemoteAudioMuted = userJid => {
    const validationRules = [{
        key: "userJid",
        value: userJid,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(validationRules);
    if (response.statusCode !== 200) return response;
    let data = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    data.isRemoteAudioMuted = Object(__WEBPACK_IMPORTED_MODULE_4__call__["j" /* _isRemoteAudioMuted */])(userJid);
    return data;
};
/* harmony export (immutable) */ __webpack_exports__["q"] = isRemoteAudioMuted;


const isRemoteVideoMuted = userJid => {
    const valiationRules = [{
        key: "userJid",
        value: userJid,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    let data = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    data.isRemoteVideoMuted = Object(__WEBPACK_IMPORTED_MODULE_4__call__["k" /* _isRemoteVideoMuted */])(userJid);
    return data;
};
/* harmony export (immutable) */ __webpack_exports__["r"] = isRemoteVideoMuted;


const callSwitch = status => {
    try {
        const valiationRules = [{
            key: "status",
            value: status,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_55" /* STRING_REQUIRED */]
        }];

        let response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        return Object(__WEBPACK_IMPORTED_MODULE_5__callSwitch__["a" /* _callSwitch */])(status);
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};

const requestVideoCallSwitch = () => {
    return callSwitch(__WEBPACK_IMPORTED_MODULE_3__constants__["_2" /* CALL_SWITCH_REQUEST */]);
};
/* harmony export (immutable) */ __webpack_exports__["w"] = requestVideoCallSwitch;


const cancelVideoCallSwitchRequest = () => {
    return callSwitch(__WEBPACK_IMPORTED_MODULE_3__constants__["_0" /* CALL_SWITCH_CANCEL */]);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = cancelVideoCallSwitchRequest;


const acceptVideoCallSwitchRequest = () => {
    return callSwitch(__WEBPACK_IMPORTED_MODULE_3__constants__["Z" /* CALL_SWITCH_ACCEPT */]);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = acceptVideoCallSwitchRequest;


const declineVideoCallSwitchRequest = () => {
    return callSwitch(__WEBPACK_IMPORTED_MODULE_3__constants__["_1" /* CALL_SWITCH_DECLINE */]);
};
/* harmony export (immutable) */ __webpack_exports__["g"] = declineVideoCallSwitchRequest;


const inviteUsers = toUsers => {
    // const checkAccess = havingAccessOrNot(GROUP_CALLS);

    // if(!checkAccess){
    //   console.error(ERROR_CODE, ERROR_MESSAGE);
    //   return featureErrorResponse(ERROR_MESSAGE);
    // }

    try {
        const valiationRules = [{
            key: "toUsers",
            value: toUsers,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["h" /* ARRAY_REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        const usersLength = parseInt(toUsers.length) + parseInt(Object(__WEBPACK_IMPORTED_MODULE_10__functions__["g" /* getCallUsersLength */])());
        if (usersLength > Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["q" /* getMaxUsersOfCall */])()) return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(`Max ${Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["q" /* getMaxUsersOfCall */])()} members allowed in a call.`);
        return Object(__WEBPACK_IMPORTED_MODULE_4__call__["h" /* _inviteUsers */])(toUsers);
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["o"] = inviteUsers;


const getCallInfo = () => {
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_7__config__["e" /* getCallInfo */])();
    if (callInfo) {
        return callInfo;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])("You are not in the call");
};
/* harmony export (immutable) */ __webpack_exports__["j"] = getCallInfo;


const isAllUsersVideoMuted = () => {
    return Object(__WEBPACK_IMPORTED_MODULE_4__call__["i" /* _isAllUsersVideoMuted */])();
};
/* harmony export (immutable) */ __webpack_exports__["p"] = isAllUsersVideoMuted;


const sendCustomData = data => {
    try {
        const valiationRules = [{
            key: "Custom data",
            value: data,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        return Object(__WEBPACK_IMPORTED_MODULE_4__call__["q" /* _sendCustomData */])(data);
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["x"] = sendCustomData;


const endUserFromCall = userJid => {
    try {
        const valiationRules = [{
            key: "User Jid",
            value: userJid,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        return Object(__WEBPACK_IMPORTED_MODULE_4__call__["f" /* _endUserFromCall */])(userJid);
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = endUserFromCall;


const getUserCallStatus = userJid => {
    try {
        const valiationRules = [{
            key: "User Jid",
            value: userJid,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        return Object(__WEBPACK_IMPORTED_MODULE_4__call__["g" /* _getUserCallStatus */])(userJid);
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["l"] = getUserCallStatus;


const getCallLogs = async pageNumber => {
    return await __WEBPACK_IMPORTED_MODULE_8__callLogs__["a" /* _sdk_callLogs */].getCallLogs(pageNumber);
};
/* harmony export (immutable) */ __webpack_exports__["k"] = getCallLogs;


const showCallNotification = dataObj => {
    try {
        const valiationRules = [{
            key: "Input data",
            value: dataObj,
            rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_42" /* OBJECT_REQUIRED */]
        }];
        const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
        if (response.statusCode !== 200) return response;
        __WEBPACK_IMPORTED_MODULE_9__service_notification__["browserNotify"].showCallNotification(dataObj);
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    } catch (error) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["y"] = showCallNotification;


const initializeJanus = async (server, stunTurnServers) => {
    Object(__WEBPACK_IMPORTED_MODULE_11__janus_index__["b" /* configureJanus */])(server, stunTurnServers);
    Object(__WEBPACK_IMPORTED_MODULE_11__janus_index__["e" /* initiateConnection */])(successRes => {
        Object(__WEBPACK_IMPORTED_MODULE_10__functions__["c" /* consoleLog */])("janus connection established", successRes);
    }, errorRes => {
        Object(__WEBPACK_IMPORTED_MODULE_10__functions__["c" /* consoleLog */])("janus connection error => ", errorRes);
    });
};
/* harmony export (immutable) */ __webpack_exports__["n"] = initializeJanus;


const subscribeCall = (roomLink, displayName, callback) => {
    const valiationRules = [{
        key: "roomLink",
        value: roomLink,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
    }, {
        key: "callback",
        value: callback,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["D" /* FUNCTION_REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    Object(__WEBPACK_IMPORTED_MODULE_4__call__["t" /* _subscribeCall */])(roomLink, displayName, callback);
};
/* unused harmony export subscribeCall */


const unsubscribeCall = () => Object(__WEBPACK_IMPORTED_MODULE_4__call__["u" /* _unsubscribeCall */])();
/* unused harmony export unsubscribeCall */


const joinCall = callback => {
    const valiationRules = [{
        key: "callback",
        value: callback,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["D" /* FUNCTION_REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    Object(__WEBPACK_IMPORTED_MODULE_4__call__["l" /* _joinCall */])(callback);
};
/* unused harmony export joinCall */


const getCallLink = () => {
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_7__config__["e" /* getCallInfo */])();
    if (callInfo && callInfo.roomLink) {
        const res = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
        res.data = callInfo.roomLink;
        return res;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])("You are not in the call");
};
/* unused harmony export getCallLink */


const getCallUsername = userId => {
    const valiationRules = [{
        key: "userId",
        value: userId,
        rules: __WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_50" /* REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["b" /* clientSideValidation */])(valiationRules);
    if (response.statusCode !== 200) return response;
    const user = Object(__WEBPACK_IMPORTED_MODULE_12__users__["d" /* getCallUser */])(userId);
    if (user) {
        if (user.userDetails && user.userDetails.displayName) {
            return user.userDetails.displayName;
        }
        return undefined;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])("You are not in the call");
};
/* unused harmony export getCallUsername */


/**
 * To create meetlink 
 * @example SDK.createMeetLink();
 * @returns {Object} Success/Error Response
 */
const createMeetLink = async () => {
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
    const token = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["t" /* getToken */])();
    const response = await Object(__WEBPACK_IMPORTED_MODULE_13__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.createRoom, {}, token);
    if (response && response.status === 200) {
        const successResp = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
        successResp.data = response.data;
        successResp.message = response.message;
        return successResp;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(response.message);
};
/* unused harmony export createMeetLink */


const getCallBehaviour = () => {
    const callInfo = getCallInfo();
    const behaviour = callInfo.behaviour;

    const successResp = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    successResp.data = behaviour;
    return successResp;
};
/* unused harmony export getCallBehaviour */


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return _sdk_incomingCallObj; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__media__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__callHandleMessage__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__callLogs__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__janus_index__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };















/**
 * Hold the call end button trigger
 */
let havingAudioPermission = false;
let havingVideoPermission = false;
let incomingCallTimer = null;
let usersInCallStatusRemovalTimer = null;

/**
 * Hold the incoming call object
 */
let _sdk_incomingCallObj;
const setIncomingCallObj = incomingCallObj => _sdk_incomingCallObj = incomingCallObj;
/* harmony export (immutable) */ __webpack_exports__["D"] = setIncomingCallObj;


let _sdk_videoUnmuteDelay = 400; // Milliseconds
const setVideoUnmuteDelay = delay => _sdk_videoUnmuteDelay = delay;
/* unused harmony export setVideoUnmuteDelay */


const _isRemoteAudioMuted = __WEBPACK_IMPORTED_MODULE_5__functions__["n" /* isRemoteAudioMuted */];
/* harmony export (immutable) */ __webpack_exports__["j"] = _isRemoteAudioMuted;

const _isRemoteVideoMuted = __WEBPACK_IMPORTED_MODULE_5__functions__["o" /* isRemoteVideoMuted */];
/* harmony export (immutable) */ __webpack_exports__["k"] = _isRemoteVideoMuted;

const _isAllUsersVideoMuted = __WEBPACK_IMPORTED_MODULE_5__functions__["m" /* isAllUsersVideoMuted */];
/* harmony export (immutable) */ __webpack_exports__["i"] = _isAllUsersVideoMuted;


/**
 * Exit from the joined room
 * @param {object} data - addtional param object to attach in message
 */
const exitRoom = (data = {}) => {
  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["s" /* CALL_STATE_EXIT */], data);
};
/* harmony export (immutable) */ __webpack_exports__["y"] = exitRoom;


/**
 * Close all the peer connection, exit from room & reset the call data
 */
const exit = async () => {
  clearIncomingCallTimer();
  clearUsersInCallStatusRemovalTimer();
  const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])();
  if (callInfo.roomId) {
    exitRoom();
  }
  Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["d" /* destroySession */])();
  await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["w" /* resetCallData */])();
};
/* harmony export (immutable) */ __webpack_exports__["x"] = exit;


/**
 * Create and join into the room
 * @param {string} room - room ID
 * @param {String} callType - call type
 */
const createAndJoinRoom = async (room, isAudioMute, isVideoMute, joinMode, userDetails) => {
  const socket = Object(__WEBPACK_IMPORTED_MODULE_2__config__["j" /* getSocket */])();
  room = room || Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().roomId;
  isAudioMute = isAudioMute || Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().isAudioMute;
  isVideoMute = isVideoMute || Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().isVideoMute;
  joinMode = joinMode || Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().joinMode;
  userDetails = userDetails || Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().userDetails;
  const currentUserJid = await __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage___default.a.getItem('currentUserJID');
  const parsedCurrentJid = JSON.parse(currentUserJid);
  if (!room) {
    console.error("Invalid room ID & Can't join room");
    return;
  }
  let createAndJoinRoomPayload = {
    room,
    jid: parsedCurrentJid || Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])(),
    isAudioMute: isAudioMute,
    isVideoMute: isVideoMute,
    joinMode: joinMode,
    userDetails: userDetails
  };
  const behaviour = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().behaviour ? Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().behaviour : 'call';
  if (behaviour === 'meet') {
    const roomLink = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().roomLink ? Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])().roomLink : '';
    createAndJoinRoomPayload.roomLink = roomLink;
    createAndJoinRoomPayload.behaviour = behaviour;
  }
  socket.emit('createAndJoinRoom', createAndJoinRoomPayload);
};
/* harmony export (immutable) */ __webpack_exports__["w"] = createAndJoinRoom;


const _getUserCallStatus = userJid => {
  const user = Object(__WEBPACK_IMPORTED_MODULE_8__users__["d" /* getCallUser */])(userJid);
  if (!user || !user.status) return undefined;
  return user.status;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = _getUserCallStatus;


const removeUserInCallingStateAfterTimout = user => {
  clearUsersInCallStatusRemovalTimer();
  usersInCallStatusRemovalTimer = setTimeout(() => {
    if (_getUserCallStatus(user) === __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */] || _getUserCallStatus(user) === __WEBPACK_IMPORTED_MODULE_1__constants__["U" /* CALL_STATUS_RINGING */]) {
      Object(__WEBPACK_IMPORTED_MODULE_8__users__["b" /* deleteCallUser */])(user, 'userJid');
    }
  }, __WEBPACK_IMPORTED_MODULE_1__constants__["j" /* CALL_RINGING_DURATION */]);
};
/* harmony export (immutable) */ __webpack_exports__["C"] = removeUserInCallingStateAfterTimout;


const clearUsersInCallStatusRemovalTimer = () => {
  if (usersInCallStatusRemovalTimer !== null) {
    clearTimeout(usersInCallStatusRemovalTimer);
    usersInCallStatusRemovalTimer = null;
  }
};
/* unused harmony export clearUsersInCallStatusRemovalTimer */


/**
 * Handle the invite users data
 * @param {*} data
 */
const receiveInviteUsers = data => {
  // Set the called user status
  const localUserJid = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])();
  data.inviteUsers.map(inviteUser => {
    if (inviteUser !== localUserJid) {
      Object(__WEBPACK_IMPORTED_MODULE_8__users__["b" /* deleteCallUser */])(inviteUser, 'userJid');
      Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
        audioMuted: data.isAudioMute,
        videoMuted: data.isVideoMute,
        userJid: inviteUser,
        status: __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */]
      });
      removeUserInCallingStateAfterTimout(inviteUser);
    }
  });
  data.usersStatus = Object(__WEBPACK_IMPORTED_MODULE_8__users__["e" /* getCallUsers */])();
  Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(data);
  __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].update({
    userList: data.inviteUsers,
    callMode: 'onetomany'
  });
};
/* harmony export (immutable) */ __webpack_exports__["B"] = receiveInviteUsers;

/**
 * Handle the incoming call
 * @param {*} data - incoming call details
 */
const incomingCall = data => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(false);
  _sdk_incomingCallObj = data;
  let isVideoMute = true;
  if (data.callType === 'video') {
    isVideoMute = false;
  }
  const callbackListener = Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["a" /* callbackListeners */])();
  if (!callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]]) {
    console.error(`${__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]} object is not implemented. So user details will send as null from SDK.`);
  }
  if (callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]] && !callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]].getDisplayName) {
    console.error(`${__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]} object getDisplayName method is not implemented. So user details will send as null from SDK.`);
  }
  let displayName = '';
  if (callbackListener && callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]] && callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]].getDisplayName) {
    displayName = callbackListener[__WEBPACK_IMPORTED_MODULE_1__constants__["_11" /* HELPER */]].getDisplayName();
  }
  const userDetails = {
    displayName
  };
  createAndJoinRoom(data.roomId, false, isVideoMute, 'call', userDetails);
};
/* harmony export (immutable) */ __webpack_exports__["A"] = incomingCall;


/**
 * User end the call
 */
const _endCall = async status => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(true);
  status = status || __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* CALL_STATUS_ENDED */];
  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(status);
  __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].update({
    endTime: __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].getTime(),
    sessionStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */]
  });
  await exit();
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["e"] = _endCall;


/**
 * Initialize the call for given user
 * @param {*} dataObj
 */
const _makeCall = async dataObj => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(false);
  await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["w" /* resetCallData */])();
  const localUserCallId = Object(__WEBPACK_IMPORTED_MODULE_2__config__["d" /* generateLocalUserCallId */])();
  const toUsers = dataObj.toUsers,
        callType = dataObj.callType;


  const callbackListener = Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["a" /* callbackListeners */])();
  const userDetails = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["k" /* getUserDetails */])(callbackListener);

  const isAudioMute = false;
  let isVideoMute = false;
  if (callType === __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* AUDIO */]) {
    isVideoMute = true;
  }
  const updatedUsers = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["z" /* validateToUsers */])(toUsers);
  if (updatedUsers.statusCode === 500) {
    await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["w" /* resetCallData */])();
    return updatedUsers;
  }

  try {
    const makeCallStream = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["a" /* getMediaDevicesStream */])(callType);
    havingVideoPermission = callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */] ? true : false;
    havingAudioPermission = true;
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["e" /* setStream */])(makeCallStream);
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: localUserCallId,
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */]
    });
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
    // localStreamListener({
    //   stream: makeCallStream,
    //   uniqueId: localUserCallId,
    // });
  } catch (e) {
    const audioPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('audio', 'makeCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_18" /* MEDIA_DEVICE_MIC */]);
    if (audioPermissionResponse && (!audioPermissionResponse.statusCode || audioPermissionResponse.statusCode !== 500)) {
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["g" /* stopTracks */])(audioPermissionResponse);
      havingAudioPermission = true;
    } else {
      havingAudioPermission = false;
    }

    if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */]) {
      const videoPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('video_only', 'makeCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_17" /* MEDIA_DEVICE_CAMERA */]);
      if (videoPermissionResponse && (!videoPermissionResponse.statusCode || videoPermissionResponse.statusCode !== 500)) {
        Object(__WEBPACK_IMPORTED_MODULE_3__media__["g" /* stopTracks */])(videoPermissionResponse);
        havingVideoPermission = true;
      } else {
        havingVideoPermission = false;
      }
    }

    _endCall();

    const permissionDeniedError = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["h" /* getPermissionDeniedError */])(callType, havingVideoPermission, havingAudioPermission);
    Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(permissionDeniedError);
    return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(permissionDeniedError.message);
  }
  const callDisconnected = Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["e" /* getCallDisconnectedStatus */])();
  return new Promise((resolve, reject) => {
    if (!callDisconnected) {
      Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["a" /* attachPlugin */])(localUserCallId, isAudioMute, isVideoMute, () => {
        if (!callDisconnected) {
          Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["c" /* createRoom */])(null, createRoomResponse => {
            if (createRoomResponse) {
              const roomId = createRoomResponse;
              if (!callDisconnected) {
                Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["f" /* joinRoom */])(roomId, async joinRoomResponse => {
                  if (joinRoomResponse) {
                    const createAndJoinRoomSuccessResponse = await createAndJoinRoomSuccess(roomId, dataObj, localUserCallId, userDetails, isAudioMute, isVideoMute, updatedUsers);
                    resolve(createAndJoinRoomSuccessResponse);
                  } else {
                    reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])('Error in room joining janus'));
                  }
                });
              } else {
                reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])('Error in room creation janus'));
              }
            } else {
              reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])('Error in room creation janus'));
            }
          });
        } else {
          exit();
          reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["f" /* CALL_DISCONNECTED_ALREADY */]));
        }
      }, error => {
        console.error(error);
        Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
        reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(error));
      });
    } else {
      exit();
      reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["f" /* CALL_DISCONNECTED_ALREADY */]));
    }
  });
};
/* harmony export (immutable) */ __webpack_exports__["m"] = _makeCall;


const createAndJoinRoomSuccess = async (roomId, dataObj, localUserCallId, userDetails, isAudioMute, isVideoMute, updatedUsers) => {
  const callDisconnected = Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["e" /* getCallDisconnectedStatus */])();
  return new Promise((resolve, reject) => {
    Object(__WEBPACK_IMPORTED_MODULE_2__config__["v" /* setLocalUserCallId */])(localUserCallId);
    Object(__WEBPACK_IMPORTED_MODULE_2__config__["q" /* setCallInfo */])(_extends({}, dataObj, {
      isAudioMute,
      isVideoMute,
      joinMode: 'call',
      userDetails,
      roomId
    }));

    dataObj['toUsers'] = updatedUsers;
    dataObj.toUsers.map(toUser => {
      Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
        userJid: toUser,
        status: __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */]
      });
      removeUserInCallingStateAfterTimout(toUser);
    });

    // Set the local user status
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      socketId: Object(__WEBPACK_IMPORTED_MODULE_2__config__["k" /* getSocketId */])(),
      userJid: Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])(),
      userCallId: localUserCallId,
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */],
      localUser: true,
      callInitiator: true,
      userDetails: userDetails,
      videoMuted: isVideoMute,
      audioMuted: isAudioMute
    });

    if (!callDisconnected) {
      createAndJoinRoom(roomId, isAudioMute, isVideoMute, 'call', userDetails);
      const callingObj = _extends({}, dataObj);
      callingObj['roomId'] = roomId;
      callingObj['callFrom'] = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])();
      callingObj['callTime'] = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["d" /* generateCallTime */])();
      callingObj['status'] = __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */];
      callingObj['callMode'] = callingObj.groupId !== null && callingObj.groupId !== '' || callingObj.toUsers.length > 1 ? 'onetomany' : 'onetoone';
      if (!callDisconnected) {
        Object(__WEBPACK_IMPORTED_MODULE_2__config__["r" /* setCallingObject */])(callingObj);
        __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].insert({
          callState: __WEBPACK_IMPORTED_MODULE_1__constants__["i" /* CALL_LOG_OUTGOING_CALL_STATE */],
          fromUser: callingObj.callFrom,
          userList: callingObj.toUsers,
          callMode: callingObj.groupId !== null && callingObj.groupId !== '' || callingObj.toUsers.length > 1 ? 'onetomany' : 'onetoone'
        });
        const successRes = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
        resolve(_extends({}, successRes, {
          roomId,
          callType: dataObj.callType
        }));
      } else {
        exit();
        reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["f" /* CALL_DISCONNECTED_ALREADY */]));
      }
    } else {
      exit();
      reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["f" /* CALL_DISCONNECTED_ALREADY */]));
    }
  });
};

/**
 * Attend the received call & send the attended status to other users in the room
 */
const _answerCall = async () => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(false);
  const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])();
  const localUserCallId = Object(__WEBPACK_IMPORTED_MODULE_2__config__["d" /* generateLocalUserCallId */])();
  const roomId = callInfo.roomId,
        callType = callInfo.callType;

  try {
    const answerCallStream = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["a" /* getMediaDevicesStream */])(callType);
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["e" /* setStream */])(answerCallStream);
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: localUserCallId,
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["L" /* CALL_STATUS_CONNECTED */]
    });
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
    // localStreamListener({
    //   stream: answerCallStream,
    //   uniqueId: localUserCallId,
    // });
    havingAudioPermission = true;
    if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */]) {
      havingVideoPermission = true;
    } else {
      havingVideoPermission = false;
    }
  } catch (e) {
    // If media access has error, then need to find out exactly which media device mic or camera has the error
    // that's why in catch, get the audio & video track separately.
    const audioPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('audio', 'answerCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_18" /* MEDIA_DEVICE_MIC */]);
    if (audioPermissionResponse && (!audioPermissionResponse.statusCode || audioPermissionResponse.statusCode !== 500)) {
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["g" /* stopTracks */])(audioPermissionResponse);
      havingAudioPermission = true;
    } else {
      havingAudioPermission = false;
    }
    let videoPermissionResponse;
    if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */]) {
      videoPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('video_only', 'answerCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_17" /* MEDIA_DEVICE_CAMERA */]);
      if (videoPermissionResponse && (!videoPermissionResponse.statusCode || videoPermissionResponse.statusCode !== 500)) {
        Object(__WEBPACK_IMPORTED_MODULE_3__media__["g" /* stopTracks */])(videoPermissionResponse);
        havingVideoPermission = true;
      } else {
        havingVideoPermission = false;
      }
    } else {
      havingVideoPermission = true;
    }
    _endCall(__WEBPACK_IMPORTED_MODULE_1__constants__["J" /* CALL_STATUS_BUSY */]);
    if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */] && !havingVideoPermission && !havingAudioPermission) {
      const item = {
        message: videoPermissionResponse.message,
        error: videoPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_9" /* CAMERA_MIC_PERMISSION_DENIED */],
        device: 'mic & camera',
        action: 'makeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(videoPermissionResponse.message);
    } else if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */] && !havingVideoPermission) {
      const item = {
        message: videoPermissionResponse.message,
        error: videoPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_10" /* CAMERA_PERMISSION_DENIED */],
        device: videoPermissionResponse.device,
        action: 'makeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(videoPermissionResponse.message);
    } else if (!havingAudioPermission) {
      const item = {
        message: audioPermissionResponse.message,
        error: audioPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIC_PERMISSION_DENIED */],
        device: audioPermissionResponse.device,
        action: 'makeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(audioPermissionResponse.message);
    }
  }

  const isAudioMute = false;
  let isVideoMute = false;
  if (callType === __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* AUDIO */]) {
    isVideoMute = true;
  }

  // Set the local user status
  Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
    [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
    status: __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */]
  });
  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */]);
  return new Promise((resolve, reject) => {
    Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["a" /* attachPlugin */])(localUserCallId, isAudioMute, isVideoMute, () => {
      Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["f" /* joinRoom */])(roomId, async joinRoomResponse => {
        Object(__WEBPACK_IMPORTED_MODULE_2__config__["v" /* setLocalUserCallId */])(localUserCallId);
        if (joinRoomResponse) {
          __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].update({
            startTime: __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].getTime(),
            callState: __WEBPACK_IMPORTED_MODULE_1__constants__["g" /* CALL_LOG_ANSWERED_CALL_STATE */]
          });
          Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
            [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
            status: __WEBPACK_IMPORTED_MODULE_1__constants__["M" /* CALL_STATUS_CONNECTING */],
            audioMuted: isAudioMute,
            videoMuted: isVideoMute
          });
          clearIncomingCallTimer();
          resolve(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])());
        } else {
          reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])('Error in room joining janus'));
        }
      });
    }, error => {
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
      reject(Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(error));
    });
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = _answerCall;


/**
 * Send RECEIVED acknowledgement for receiving CALLING status
 */
const _callReceived = async () => {
  // Received state means, user received the CALLING payload & playing the ringtone
  // So need to update the CALLING status to RINGING
  Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
    [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
    status: __WEBPACK_IMPORTED_MODULE_1__constants__["U" /* CALL_STATUS_RINGING */]
  });

  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["S" /* CALL_STATUS_RECEIVED */]);

  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["c"] = _callReceived;


const _declineCall = async () => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(true);
  return _endCall(__WEBPACK_IMPORTED_MODULE_1__constants__["J" /* CALL_STATUS_BUSY */]);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = _declineCall;


const _callEngaged = async () => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(true);
  return _endCall(__WEBPACK_IMPORTED_MODULE_1__constants__["P" /* CALL_STATUS_ENGAGED */]);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = _callEngaged;


const _muteAudio = async isMuted => {
  if (havingAudioPermission) {
    Object(__WEBPACK_IMPORTED_MODULE_2__config__["q" /* setCallInfo */])({
      isAudioMute: isMuted
    });
    if (isMuted) {
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["d" /* muteAudioTrack */])();
      Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["g" /* muteAudio */])();
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["h" /* unmuteAudioTrack */])();
      Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["k" /* unmuteAudio */])();
    }
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
      audioMuted: isMuted
    });
    if (Object(__WEBPACK_IMPORTED_MODULE_5__functions__["s" /* isUserConnectedCall */])() && Object(__WEBPACK_IMPORTED_MODULE_2__config__["m" /* isUserOnline */])()) {
      Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["m" /* CALL_STATE_AUDIO_MUTE */], {
        payload: {
          isMute: isMuted
        }
      });
    }
    return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
  }
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["_20" /* PERMISSION_DENIED */]);
};
/* harmony export (immutable) */ __webpack_exports__["n"] = _muteAudio;


const _muteVideo = async (isMuted, local = false) => {
  if (isMuted) {
    if (!havingVideoPermission) {
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["_20" /* PERMISSION_DENIED */]);
    }
    Object(__WEBPACK_IMPORTED_MODULE_2__config__["q" /* setCallInfo */])({
      isVideoMute: isMuted
    });
    Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["h" /* muteVideo */])();
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
      videoMuted: isMuted
    });
  } else {
    const videoPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('video_only', 'muteVideo', __WEBPACK_IMPORTED_MODULE_1__constants__["_17" /* MEDIA_DEVICE_CAMERA */]);
    if (videoPermissionResponse && (!videoPermissionResponse.statusCode || videoPermissionResponse.statusCode !== 500)) {
      havingVideoPermission = true;
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["g" /* stopTracks */])(videoPermissionResponse);
      // const stream = getStream();
      // if (
      //   stream.getVideoTracks() !== null &&
      //   stream.getVideoTracks().length > 0
      // ) {
      //   stream.removeTrack(stream.getVideoTracks()[0]);
      // }
      // stream.addTrack(videoPermissionResponse[0]);
      Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
        videoMuted: isMuted
      });
      Object(__WEBPACK_IMPORTED_MODULE_2__config__["q" /* setCallInfo */])({
        isVideoMute: isMuted
      });
      // localStreamListener({
      //   stream: stream,
      //   uniqueId: getCallLocalUserJid(),
      // });
      // setStream(stream);
      if (!local) {
        Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["l" /* unmuteVideo */])();
      }
    } else {
      havingVideoPermission = false;
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["_20" /* PERMISSION_DENIED */]);
    }
  }

  if (Object(__WEBPACK_IMPORTED_MODULE_5__functions__["s" /* isUserConnectedCall */])() && Object(__WEBPACK_IMPORTED_MODULE_2__config__["m" /* isUserOnline */])() && !local) {
    Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["H" /* CALL_STATE_VIDEO_MUTE */], {
      payload: {
        isMute: isMuted
      }
    });
  }
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["o"] = _muteVideo;


const sendInviteViaSocket = async inviteObj => {
  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["w" /* CALL_STATE_INVITE_USERS */], {
    payload: _extends({}, inviteObj)
  });
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};

const _inviteUsers = async inviteUsers => {
  if (!Object(__WEBPACK_IMPORTED_MODULE_5__functions__["q" /* isUserAttendedCall */])()) return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])('You are not on call to invite new users.');
  const updatedUsers = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["z" /* validateToUsers */])(inviteUsers);
  if (updatedUsers.statusCode === 500) {
    return updatedUsers;
  }
  inviteUsers = updatedUsers;
  const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])();
  const inviteObj = _extends({}, callInfo);
  inviteObj['callFrom'] = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])();
  inviteObj['callTime'] = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["d" /* generateCallTime */])();
  inviteObj['status'] = __WEBPACK_IMPORTED_MODULE_1__constants__["w" /* CALL_STATE_INVITE_USERS */];
  inviteObj['inviteUsers'] = inviteUsers;
  const users = Object(__WEBPACK_IMPORTED_MODULE_8__users__["e" /* getCallUsers */])();
  const toUsers = [];
  users.forEach(user => {
    if (!user.localUser && Object(__WEBPACK_IMPORTED_MODULE_5__functions__["s" /* isUserConnectedCall */])(user[__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]], user) && inviteUsers.indexOf(user.userJid) === -1) {
      toUsers.push(user.userJid);
    }
  });
  inviteObj['toUsers'] = toUsers;
  let sendCallRes = null;
  if (Object(__WEBPACK_IMPORTED_MODULE_2__config__["m" /* isUserOnline */])()) {
    sendCallRes = await Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["d" /* sendCalling */])(inviteObj);
    sendInviteViaSocket(inviteObj);
  } else {
    sendCallRes = await sendInviteViaSocket(inviteObj);
  }
  if (sendCallRes && sendCallRes.statusCode !== 200) return sendCallRes;

  const isAudioMute = false;
  let isVideoMute = false;
  if (inviteObj.callType === __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* AUDIO */]) {
    isVideoMute = true;
  }

  // Set the called user status
  inviteUsers.map(inviteUser => {
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["b" /* deleteCallUser */])(inviteUser, 'userJid');
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      audioMuted: isAudioMute,
      videoMuted: isVideoMute,
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["K" /* CALL_STATUS_CALLING */],
      userJid: inviteUser
    });
    removeUserInCallingStateAfterTimout(inviteUser);
    const dataToClient = {
      sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["n" /* CALL_STATE_CALL_STATUS */],
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["Y" /* CALL_STATUS_USER_STATUS */],
      usersStatus: Object(__WEBPACK_IMPORTED_MODULE_8__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(dataToClient);
  });

  __WEBPACK_IMPORTED_MODULE_7__callLogs__["a" /* _sdk_callLogs */].update({
    userList: inviteUsers,
    callMode: 'onetomany'
  });
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["h"] = _inviteUsers;


const _sendCustomData = customData => {
  Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["e" /* CALL_CUSTOM_DATA */], {
    payload: {
      customData
    }
  });
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["q"] = _sendCustomData;


const _endUserFromCall = userJid => {
  Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
    status: __WEBPACK_IMPORTED_MODULE_1__constants__["N" /* CALL_STATUS_DISCONNECTED */],
    userJid: userJid
  });
  const user = Object(__WEBPACK_IMPORTED_MODULE_8__users__["d" /* getCallUser */])(userJid);
  if (!user) return undefined;
  const sessionStatus = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["f" /* getCallSessionStatus */])(user[__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]);
  Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])({
    sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["n" /* CALL_STATE_CALL_STATUS */],
    userJid,
    status: __WEBPACK_IMPORTED_MODULE_1__constants__["N" /* CALL_STATUS_DISCONNECTED */],
    sessionStatus
  });
  Object(__WEBPACK_IMPORTED_MODULE_5__functions__["a" /* checkCallSessionStatus */])(sessionStatus);
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["f"] = _endUserFromCall;


const _startScreenShare = () => {
  const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])();
  const roomId = callInfo.roomId;

  Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["i" /* startScreenShare */])(roomId);
};
/* harmony export (immutable) */ __webpack_exports__["r"] = _startScreenShare;


const _stopScreenShare = () => {
  Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["j" /* stopScreenShare */])();
};
/* harmony export (immutable) */ __webpack_exports__["s"] = _stopScreenShare;


/**
 * Handle the received call related message from singal server or remote users.
 * @param {object} data
 */
const handleCallMessage = async data => {
  const type = data.type;

  switch (type) {
    case __WEBPACK_IMPORTED_MODULE_1__constants__["r" /* CALL_STATE_CREATED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["m" /* roomCreatedCallback */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["x" /* CALL_STATE_JOIN */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["o" /* roomJoinCallback */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["y" /* CALL_STATE_JOINED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["p" /* roomJoinedCallback */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["E" /* CALL_STATE_SUBSCRIBED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["q" /* roomSubscribedCallback */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["t" /* CALL_STATE_FAILURE */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["n" /* roomFailureCallback */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["s" /* CALL_STATE_EXIT */]:
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["S" /* CALL_STATUS_RECEIVED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["j" /* handleReceivedMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["I" /* CALL_STATUS_ATTENDED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["a" /* handleAttendedMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["D" /* CALL_STATE_PING */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["i" /* handlePingMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* CALL_STATUS_ENDED */]:
    case __WEBPACK_IMPORTED_MODULE_1__constants__["J" /* CALL_STATUS_BUSY */]:
    case __WEBPACK_IMPORTED_MODULE_1__constants__["P" /* CALL_STATUS_ENGAGED */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["f" /* handleEndedMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["m" /* CALL_STATE_AUDIO_MUTE */]:
    case __WEBPACK_IMPORTED_MODULE_1__constants__["H" /* CALL_STATE_VIDEO_MUTE */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["g" /* handleMuteStatusMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["p" /* CALL_STATE_CALL_SWITCH_RES */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["e" /* handleCallSwitchResMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["o" /* CALL_STATE_CALL_SWITCH */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["d" /* handleCallSwitchMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["F" /* CALL_STATE_USER_ONLINE */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["h" /* handleOnlineStateMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["_24" /* UPDATE_SOCKET_ID */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["l" /* handleUpdateSocketMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["V" /* CALL_STATUS_SPEAKING */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["k" /* handleSpeakingSocketMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["W" /* CALL_STATUS_STATUS */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["c" /* handleCallStatusMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["w" /* CALL_STATE_INVITE_USERS */]:
      Object(__WEBPACK_IMPORTED_MODULE_6__callHandleMessage__["b" /* handleCallInviteUsersMsg */])(data);
      break;
    case __WEBPACK_IMPORTED_MODULE_1__constants__["e" /* CALL_CUSTOM_DATA */]:
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])({
        sdkStatus: type,
        customData: data.payload.customData
      });
      break;
    default:
      break;
  }
};
/* harmony export (immutable) */ __webpack_exports__["z"] = handleCallMessage;


const _subscribeCall = async (roomLink, displayName, callback) => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(false);
  let localUserCallId = null;
  await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["w" /* resetCallData */])();
  localUserCallId = Object(__WEBPACK_IMPORTED_MODULE_2__config__["d" /* generateLocalUserCallId */])();
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["v" /* setLocalUserCallId */])(localUserCallId);
  const callType = 'video';
  const userDetails = {
    displayName: displayName ? displayName : ''
  };
  let stream = null;
  try {
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
    stream = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["a" /* getMediaDevicesStream */])(callType);
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["e" /* setStream */])(stream);
    havingAudioPermission = true;
    havingVideoPermission = true;
  } catch (e) {
    stream = new MediaStream();
    // If media access has error, then need to find out exactly which media device mic or camera has the error
    // that's why in catch, get the audio & video track separately.
    const audioPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('audio', 'subscribeCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_18" /* MEDIA_DEVICE_MIC */]);
    if (audioPermissionResponse && (!audioPermissionResponse.statusCode || audioPermissionResponse.statusCode !== 500)) {
      havingAudioPermission = true;
      stream.addTrack(audioPermissionResponse[0]);
    } else {
      havingAudioPermission = false;
    }
    let videoPermissionResponse;
    if (callType === __WEBPACK_IMPORTED_MODULE_11__helpers_constants__["_76" /* VIDEO */]) {
      videoPermissionResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__media__["b" /* getMediaDevicesTracks */])('video_only', 'subscribeCall', __WEBPACK_IMPORTED_MODULE_1__constants__["_17" /* MEDIA_DEVICE_CAMERA */]);
      if (videoPermissionResponse && (!videoPermissionResponse.statusCode || videoPermissionResponse.statusCode !== 500)) {
        havingVideoPermission = true;
        stream.addTrack(videoPermissionResponse[0]);
      } else {
        havingVideoPermission = false;
      }
    } else {
      havingVideoPermission = true;
    }
    Object(__WEBPACK_IMPORTED_MODULE_3__media__["e" /* setStream */])(stream);
    if (!havingVideoPermission && !havingAudioPermission) {
      const item = {
        message: videoPermissionResponse.message,
        error: videoPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_9" /* CAMERA_MIC_PERMISSION_DENIED */],
        device: 'mic & camera',
        action: 'subscribeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(videoPermissionResponse.message);
    } else if (!havingVideoPermission) {
      const item = {
        message: videoPermissionResponse.message,
        error: videoPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_10" /* CAMERA_PERMISSION_DENIED */],
        device: videoPermissionResponse.device,
        action: 'subscribeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
    } else if (!havingAudioPermission) {
      const item = {
        message: audioPermissionResponse.message,
        error: audioPermissionResponse.error,
        statusCode: __WEBPACK_IMPORTED_MODULE_1__constants__["_19" /* MIC_PERMISSION_DENIED */],
        device: audioPermissionResponse.device,
        action: 'subscribeCall',
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(item);
      Object(__WEBPACK_IMPORTED_MODULE_3__media__["f" /* stopStream */])();
      return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["j" /* errorResponse */])(audioPermissionResponse.message);
    }
  }
  Object(__WEBPACK_IMPORTED_MODULE_3__media__["c" /* localStreamListener */])({
    stream: stream,
    uniqueId: Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])()
  });
  const roomDetails = await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["i" /* getRoomDetailsByLink */])(roomLink);
  if (roomDetails && roomDetails.status === 200 && roomDetails.data) {
    const data = roomDetails.data;
    const roomId = data.roomId;
    var _data$behaviour = data.behaviour;
    const behaviour = _data$behaviour === undefined ? 'call' : _data$behaviour;

    Object(__WEBPACK_IMPORTED_MODULE_2__config__["q" /* setCallInfo */])({
      roomId: roomId,
      roomLink: roomLink,
      behaviour: behaviour,
      callType: 'video',
      isAudioMute: !havingAudioPermission,
      isVideoMute: !havingVideoPermission,
      joinMode: 'link',
      userDetails: userDetails,
      groupId: null,
      toUsers: null
    });
    Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
      userJid: Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])(),
      userDetails: userDetails,
      audioMuted: !havingAudioPermission,
      videoMuted: !havingVideoPermission,
      localUser: true
    });
    Object(__WEBPACK_IMPORTED_MODULE_2__config__["z" /* setSubscribeRoomData */])({
      roomId,
      roomLink,
      userDetails,
      behaviour,
      callback
    });
    subscribeRoom(roomId, roomLink, userDetails, behaviour, callback);
  } else {
    exit();
    let message = '';
    let errorCode;
    if (roomDetails.status !== __WEBPACK_IMPORTED_MODULE_1__constants__["_21" /* SUCCESS */]) {
      errorCode = __WEBPACK_IMPORTED_MODULE_1__constants__["_15" /* INVALID_CALL_LINK_CODE */];
      message = __WEBPACK_IMPORTED_MODULE_1__constants__["_14" /* INVALID_CALL_LINK */];
    } else {
      errorCode = __WEBPACK_IMPORTED_MODULE_1__constants__["d" /* CALL_ALREADY_ENDED_CODE */];
      message = __WEBPACK_IMPORTED_MODULE_1__constants__["c" /* CALL_ALREADY_ENDED */];
    }
    const customRes = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["c" /* customResponse */])(errorCode, message);
    callback(null, customRes);
  }
};
/* harmony export (immutable) */ __webpack_exports__["t"] = _subscribeCall;


const subscribeRoom = (roomId, roomLink, userDetails, behaviour, callback) => {
  const socket = Object(__WEBPACK_IMPORTED_MODULE_2__config__["j" /* getSocket */])();
  roomId = roomId || Object(__WEBPACK_IMPORTED_MODULE_2__config__["l" /* getSubscribeRoomData */])().roomId;
  roomLink = roomLink || Object(__WEBPACK_IMPORTED_MODULE_2__config__["l" /* getSubscribeRoomData */])().roomLink;
  userDetails = userDetails || Object(__WEBPACK_IMPORTED_MODULE_2__config__["l" /* getSubscribeRoomData */])().userDetails;
  behaviour = behaviour || Object(__WEBPACK_IMPORTED_MODULE_2__config__["l" /* getSubscribeRoomData */])().behaviour;
  callback = callback || Object(__WEBPACK_IMPORTED_MODULE_2__config__["l" /* getSubscribeRoomData */])().callback;
  if (!roomId) {
    exit();
    console.error("Invalid room ID & Can't join room");
    return;
  }
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["x" /* setSubscribeCallRequest */])(true);
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["y" /* setSubscribeCallRequestCallback */])(callback);
  socket.emit('subscribeRoom', {
    room: roomId,
    jid: Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])(),
    userDetails: {
      displayName: userDetails.displayName
    },
    roomLink: roomLink,
    behaviour: behaviour
  });
};
/* harmony export (immutable) */ __webpack_exports__["F"] = subscribeRoom;


const _joinCall = async callback => {
  const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__config__["e" /* getCallInfo */])();
  const roomId = callInfo.roomId,
        isAudioMute = callInfo.isAudioMute,
        isVideoMute = callInfo.isVideoMute,
        userDetails = callInfo.userDetails;


  if (!roomId) {
    const customRes = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_1__constants__["d" /* CALL_ALREADY_ENDED_CODE */], __WEBPACK_IMPORTED_MODULE_1__constants__["c" /* CALL_ALREADY_ENDED */]);
    callback(null, customRes);
  }

  // Set the local user status
  Object(__WEBPACK_IMPORTED_MODULE_8__users__["a" /* addOrUpdateCallUser */])({
    [__WEBPACK_IMPORTED_MODULE_2__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_2__config__["i" /* getLocalUserFilterValue */])(),
    status: __WEBPACK_IMPORTED_MODULE_1__constants__["R" /* CALL_STATUS_JOINING */]
  });
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["t" /* setJoinCallRequest */])(true);
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["u" /* setJoinCallRequestCallback */])(callback);
  Object(__WEBPACK_IMPORTED_MODULE_2__config__["x" /* setSubscribeCallRequest */])(null);
  createAndJoinRoom(roomId, isAudioMute, isVideoMute, 'link', userDetails);
};
/* harmony export (immutable) */ __webpack_exports__["l"] = _joinCall;


const _unsubscribeCall = () => {
  Object(__WEBPACK_IMPORTED_MODULE_10__helpers_common__["B" /* setCallDisconnectedStatus */])(true);
  exit();
  return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["u"] = _unsubscribeCall;


const startIncomingCallTimer = () => {
  const localUserJid = Object(__WEBPACK_IMPORTED_MODULE_5__functions__["e" /* getCallLocalUserJid */])();
  incomingCallTimer = setTimeout(() => {
    const dataToClient = {
      userJid: localUserJid,
      sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["n" /* CALL_STATE_CALL_STATUS */],
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* CALL_STATUS_ENDED */],
      sessionStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["k" /* CALL_SESSION_STATUS_CLOSED */],
      usersStatus: []
    };
    Object(__WEBPACK_IMPORTED_MODULE_5__functions__["x" /* sendDataToClient */])(dataToClient);
    const data = _extends({}, _sdk_incomingCallObj, {
      status: __WEBPACK_IMPORTED_MODULE_1__constants__["O" /* CALL_STATUS_ENDED */]
    });
    Object(__WEBPACK_IMPORTED_MODULE_5__functions__["y" /* sendMissedCallDataToClient */])(data);
    _endCall();
  }, __WEBPACK_IMPORTED_MODULE_1__constants__["j" /* CALL_RINGING_DURATION */]);
};
/* harmony export (immutable) */ __webpack_exports__["E"] = startIncomingCallTimer;


const clearIncomingCallTimer = () => {
  if (incomingCallTimer) {
    clearTimeout(incomingCallTimer);
    incomingCallTimer = null;
  }
};
/* unused harmony export clearIncomingCallTimer */


const callSwitchVideoUnmuteTransfer = () => {
  Object(__WEBPACK_IMPORTED_MODULE_9__janus_index__["l" /* unmuteVideo */])();
  if (Object(__WEBPACK_IMPORTED_MODULE_5__functions__["s" /* isUserConnectedCall */])() && Object(__WEBPACK_IMPORTED_MODULE_2__config__["m" /* isUserOnline */])()) {
    Object(__WEBPACK_IMPORTED_MODULE_0__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["H" /* CALL_STATE_VIDEO_MUTE */], {
      payload: {
        isMute: false
      }
    });
  }
};
/* harmony export (immutable) */ __webpack_exports__["v"] = callSwitchVideoUnmuteTransfer;


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__socket__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__iq__ = __webpack_require__(192);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__functions__ = __webpack_require__(14);





/**
 * Initialize the socket connection
 * @param {*} signallingServer
 */
const initConnection = (signallingServer = null) => Object(__WEBPACK_IMPORTED_MODULE_1__socket__["a" /* _initConnection */])(signallingServer);
/* harmony export (immutable) */ __webpack_exports__["c"] = initConnection;


/**
 * Send the message via socket
 */
const sendMessage = (type, data) => {
  const message = Object(__WEBPACK_IMPORTED_MODULE_3__functions__["j" /* getSendMessage */])(type, data);
  Object(__WEBPACK_IMPORTED_MODULE_1__socket__["b" /* _sendMessage */])(message);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = sendMessage;


/**
 * Send the CALLING data to toUsers
 * @param {*} dataObj
 */
const sendCalling = dataObj => Object(__WEBPACK_IMPORTED_MODULE_2__iq__["b" /* _sendCalling */])(dataObj);
/* harmony export (immutable) */ __webpack_exports__["d"] = sendCalling;


/**
 * Handle the received message off call related process type
 * such as attended, busy, mute... status
 * @param {*} data
 */
const _handleCallMessage = data => Object(__WEBPACK_IMPORTED_MODULE_0__call__["z" /* handleCallMessage */])(data);
/* harmony export (immutable) */ __webpack_exports__["a"] = _handleCallMessage;


/**
 * Handle the incoming call mesaage XML data
 * @param {*} message
 * @param {*} isCarbon
 */
const handleIncomingCall = (message, isCarbon) => Object(__WEBPACK_IMPORTED_MODULE_2__iq__["a" /* _handleIncomingCall */])(message, isCarbon);
/* harmony export (immutable) */ __webpack_exports__["b"] = handleIncomingCall;


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_parseHeaders_js__ = __webpack_require__(327);





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(value)) return;

  if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(Object(__WEBPACK_IMPORTED_MODULE_1__helpers_parseHeaders_js__["a" /* default */])(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(this, (value, header) => {
      const key = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].freezeMethods(AxiosHeaders);

/* harmony default export */ __webpack_exports__["a"] = (AxiosHeaders);


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var keys = __webpack_require__(353);
var hasBinary = __webpack_require__(186);
var sliceBuffer = __webpack_require__(355);
var after = __webpack_require__(356);
var utf8 = __webpack_require__(357);

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(358);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(359);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__db_controllers_vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Utils__ = __webpack_require__(197);





let appState = __WEBPACK_IMPORTED_MODULE_0_react_native__["AppState"].currentState,
    isReconnecting = false,
    activeChat = '',
    networkState = '',
    pendingDownload = [],
    pendingUploadMedia = [];

const setAppState = state => appState = state;
/* harmony export (immutable) */ __webpack_exports__["k"] = setAppState;


const getAppState = () => appState;
/* harmony export (immutable) */ __webpack_exports__["e"] = getAppState;


const setNetworkStatus = state => networkState = state;
/* harmony export (immutable) */ __webpack_exports__["l"] = setNetworkStatus;


const getNetworkStatus = () => networkState;
/* harmony export (immutable) */ __webpack_exports__["f"] = getNetworkStatus;


const getReconnectionStatus = () => isReconnecting;
/* unused harmony export getReconnectionStatus */


const setReconnectionStatus = state => isReconnecting = state;
/* harmony export (immutable) */ __webpack_exports__["m"] = setReconnectionStatus;


const getActiveChatUser = () => activeChat;
/* harmony export (immutable) */ __webpack_exports__["d"] = getActiveChatUser;


const setActiveChatUser = state => activeChat = state;
/* unused harmony export setActiveChatUser */


const addPendingDownloads = mid => {
  pendingDownload.push(mid);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = addPendingDownloads;


const removePendingDownloads = mid => {
  const newArray = pendingDownload.filter(item => item !== mid);
  pendingDownload = newArray;
};
/* harmony export (immutable) */ __webpack_exports__["i"] = removePendingDownloads;


const getAllPendingDonwloads = () => pendingDownload;
/* unused harmony export getAllPendingDonwloads */


const processPendingDownloads = async () => {
  for (const id of pendingDownload) {
    await Object(__WEBPACK_IMPORTED_MODULE_3__Utils__["a" /* downloadMedia */])(id, false);
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = processPendingDownloads;


const activeChatUser = jid => {
  setActiveChatUser(jid);
  Object(__WEBPACK_IMPORTED_MODULE_1__db_controllers_vcardTable__["b" /* handleVcardDetail */])(jid);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = activeChatUser;


const addPendingUploads = obj => {
  const newArray = pendingUploadMedia.filter(item => item.msgId === obj.msgId);
  if (newArray.length > 0) {
    return;
  }
  pendingUploadMedia.push(obj);
  console.log('SDK addPendingUploads pendingUploadMedia', JSON.stringify(pendingUploadMedia, null, 2));
};
/* harmony export (immutable) */ __webpack_exports__["c"] = addPendingUploads;


const getAllPendingUploads = () => pendingUploadMedia;
/* unused harmony export getAllPendingUploads */


const processPendingUploads = async () => {
  console.log('SDK pendingUploadMedia', JSON.stringify(pendingUploadMedia, null, 2));
  for (const obj of pendingUploadMedia) {
    const autoAPIhit = await Object(__WEBPACK_IMPORTED_MODULE_2__chat__["D" /* sendMediaMessage */])(obj.toJid, obj.msgId);
    console.log('SDK autoAPIhit', autoAPIhit);
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = processPendingUploads;


const removePendingUploads = mid => {
  const newArray = pendingUploadMedia.filter(item => item.msgId !== mid);
  pendingUploadMedia = newArray;
};
/* harmony export (immutable) */ __webpack_exports__["j"] = removePendingUploads;


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_fs__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_native_fs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__service_api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__db_controllers_mediaDetailTable__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react_native_compressor__ = __webpack_require__(381);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react_native_compressor___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_react_native_compressor__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_react_native_convert_ph_asset__ = __webpack_require__(382);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_react_native_convert_ph_asset___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_react_native_convert_ph_asset__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_react_native_mov_to_mp4__ = __webpack_require__(383);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_react_native_mov_to_mp4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_react_native_mov_to_mp4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_react_native_create_thumbnail__ = __webpack_require__(384);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_react_native_create_thumbnail___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_react_native_create_thumbnail__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__app_common__ = __webpack_require__(45);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// migration done (13-12-21)

















const imgExtentions = [__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_43" /* PNG */], __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_4" /* JPG */], __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_3" /* JPEG */]],
      msgTypes = [__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */], __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["l" /* AUTO_TEXT */]];

const uploadMedia = async (file, chatType, touser, msgId) => {
  try {
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])(),
          token = await Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["v" /* getUserToken */])();
    const inputData = new FormData();
    inputData.append('file', file); // TODO: should check media upload in React Native
    inputData.append('type', chatType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["K" /* GROUP */] ? __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["M" /* GROUP_CHAT */] : chatType);
    inputData.append('toUser', touser);
    inputData.append('messageId', msgId);

    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_1__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.mediaUpload, inputData, token, 'multipart/form-data', msgId, file.size, 'upload');
    console.log('SDK uploadMedia apiResponse', apiResponse);
    if (apiResponse && apiResponse.status === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_15__app_common__["j" /* removePendingUploads */])(msgId);
      const item = {
        msgId: msgId,
        source: '', // Sending Cancel Source to Cancel Request by Message Id
        progress: 100
      };
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().mediaUploadListener && msgId !== '' && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().mediaUploadListener(item);
      return {
        statusCode: apiResponse.status,
        fileToken: apiResponse.data.fileToken
      };
    }
    if (apiResponse.message === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_25" /* NETWORK_ERROR */]) {
      let _obj = {
        toJid: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["m" /* formatUserIdToJid */])(touser),
        msgId
      };
      console.log('SDK _obj', _obj);
      Object(__WEBPACK_IMPORTED_MODULE_15__app_common__["c" /* addPendingUploads */])(_obj);
    }
    if (apiResponse.message === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_70" /* USER_CANCELLED */]) {
      Object(__WEBPACK_IMPORTED_MODULE_15__app_common__["j" /* removePendingUploads */])(msgId);
    }
    const item = {
      msgId,
      message: apiResponse.message
    };
    Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().mediaUploadListener && msgId !== '' && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().mediaUploadListener(item);
    return {
      statusCode: apiResponse && apiResponse.status || 500,
      message: apiResponse && apiResponse.message || __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_13" /* MEDIA_UPLOAD_FAILED */]
    };
  } catch (error) {
    console.log('SDK uploadMedia error', error);
    return {
      statusCode: 500,
      message: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_13" /* MEDIA_UPLOAD_FAILED */]
    };
  }
};
/* unused harmony export uploadMedia */


const handleMediaMessage = async (msgBody = '', msgType, msgId, file, fileOptions, toUser, chatType, replyTo) => {
  try {
    const type = file.type;
    var _file$modificationTim = file.modificationTimestamp;
    const modificationTimestamp = _file$modificationTim === undefined ? Date.now() : _file$modificationTim,
          uri = file.uri,
          fileSize = file.fileSize,
          originalWidth = file.width,
          originalHeight = file.height,
          filename = file.filename;
    var _file$duration = file.duration;
    const duration = _file$duration === undefined ? 0 : _file$duration;
    var _fileOptions$caption = fileOptions.caption;
    const caption = _fileOptions$caption === undefined ? '' : _fileOptions$caption;
    var _fileOptions$thumbIma = fileOptions.thumbImage;
    const thumbImage = _fileOptions$thumbIma === undefined ? '' : _fileOptions$thumbIma;
    var _fileOptions$fileToke = fileOptions.fileToken;
    const fileToken = _fileOptions$fileToke === undefined ? '' : _fileOptions$fileToke;

    if (!thumbImage && msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */]) fileOptions.thumbImage = await getThumbImage(uri);else if (!thumbImage && msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */]) fileOptions.thumbImage = await getVideoThumbImage(uri);
    let updatedFile = {};
    const dbCheck = await Object(__WEBPACK_IMPORTED_MODULE_13__db_Utils__["b" /* dbCheckWithMsgId */])(msgId);
    if (dbCheck) {
      updatedFile = {
        duration: duration,
        fileCopyUri: uri,
        type: type,
        name: filename,
        size: fileSize,
        lastModified: modificationTimestamp,
        uri,
        localPath: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["j" /* getFileNameFromUri */])(uri)
      };
    }
    if (!dbCheck) {
      var _ref = await fileStoreInDevice(file);

      const destinationPath = _ref.destinationPath,
            localPath = _ref.localPath;
      var _ref$statusCode = _ref.statusCode;
      const statusCode = _ref$statusCode === undefined ? 200 : _ref$statusCode;
      var _ref$message = _ref.message;
      const message = _ref$message === undefined ? '' : _ref$message;

      if (statusCode !== 200) return message;
      updatedFile = {
        duration: duration,
        fileCopyUri: destinationPath,
        type: type,
        name: filename,
        size: fileSize,
        lastModified: modificationTimestamp,
        uri: destinationPath,
        localPath: localPath
      };
      Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toUser, msgBody, msgId, replyTo, msgType, updatedFile, _extends({}, file, fileOptions));
    }
    console.log(updatedFile, 'SDK updatedFile');
    const uploadResponse = await uploadMedia(updatedFile, chatType, toUser, msgId);
    console.log('SDK uploadMedia -->', uploadResponse);
    if (uploadResponse && uploadResponse.statusCode === 200) {
      const mediaDetial = {
        fileUrl: uploadResponse.fileToken,
        isUploading: 2
      };
      Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_mediaDetailTable__["d" /* updateMediaDetailTable */])(msgId, mediaDetial);
      const msgContent = {
        message: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["A" /* stripTags */])(msgBody),
        message_type: msgType,
        media: _extends({}, fileOptions, {
          caption: caption,
          file_size: fileSize,
          fileName: filename,
          file_url: uploadResponse.fileToken,
          duration: duration,
          thumb_image: thumbImage,
          local_path: '',
          is_uploading: 2,
          is_downloaded: 0,
          originalWidth: originalWidth,
          originalHeight: originalHeight
        })
      };
      return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["B" /* successResponse */])(msgContent);
    } else {
      const mediaDetial = {
        isUploading: 3
      };
      Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_mediaDetailTable__["d" /* updateMediaDetailTable */])(msgId, mediaDetial);
    }
    return uploadResponse;
  } catch (error) {
    console.log('handleMediaMessage', error);
  }
};
/* unused harmony export handleMediaMessage */


const handleMessages = async (msgBody, msgType, msgId, replyTo, toJid, file, fileOptions) => {
  let msgContent = {};
  const mediaJson = {},
        toUser = Strophe.getNodeFromJid(toJid),
        chatType = __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid) ? __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["L" /* GROUPCHAT */] : __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["q" /* CHAT */];

  // Msg type not equal of Text, Location & Contact - Media Messages Only
  if (file && msgTypes.indexOf(msgType) === -1) {
    const mediaResponse = await handleMediaMessage(msgBody, msgType, msgId, file, fileOptions || {}, toUser, chatType, replyTo);
    if (mediaResponse.statusCode !== 200) return mediaResponse;
    msgContent = mediaResponse.message;
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */]) {
    mediaJson.latitude = fileOptions.latitude;
    mediaJson.longitude = fileOptions.longitude;
    msgContent = _extends({
      message: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["A" /* stripTags */])(''),
      message_type: msgType,
      location: mediaJson
    }, fileOptions);
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */]) {
    mediaJson.name = fileOptions.name;
    mediaJson.phone_number = fileOptions.phone_number;
    mediaJson.active_status = fileOptions.active_status;
    msgContent = _extends({
      message: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["A" /* stripTags */])(''),
      message_type: msgType,
      contact: mediaJson
    }, fileOptions);
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */]) {
    msgContent = {
      message: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["A" /* stripTags */])(msgBody),
      message_type: msgType
    };
  } else {
    return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["c" /* customResponse */])(400, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["X" /* INVALID_MESSAGE_TYPE */]);
  }

  const userProfile = await Object(__WEBPACK_IMPORTED_MODULE_4__helpers_localDb__["d" /* getUserProfile */])();
  msgContent.nickName = userProfile.nickName || '';
  if (replyTo) msgContent.replyTo = replyTo;
  return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["B" /* successResponse */])(msgContent);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = handleMessages;


const composeMediaMessage = async (msgType, fileOptions, replyTo) => {
  const msgContent = {
    message: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["A" /* stripTags */])(''),
    message_type: msgType,
    media: _extends({}, fileOptions, {
      caption: fileOptions.caption,
      file_size: fileOptions.fileSize,
      fileName: fileOptions.fileName,
      file_url: fileOptions.fileURL,
      duration: fileOptions.duration,
      thumb_image: fileOptions.thumbImg,
      is_uploading: 2,
      is_downloaded: 0
    })
  };
  if (replyTo) msgContent.replyTo = replyTo;
  return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["B" /* successResponse */])(msgContent);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = composeMediaMessage;


const forwardMessageIQ = (orgMsgId, msgId, toJid) => new Promise(async resolve => {
  let response = {};
  const chatType = __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid) ? __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["L" /* GROUPCHAT */] : __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["q" /* CHAT */];
  const originalMsgs = await Object(__WEBPACK_IMPORTED_MODULE_13__db_Utils__["g" /* getMsgDetails */])(orgMsgId);
  var _originalMsgs$message = originalMsgs.message_type;
  const msgType = _originalMsgs$message === undefined ? '' : _originalMsgs$message;
  var _originalMsgs$message2 = originalMsgs.message;
  const message = _originalMsgs$message2 === undefined ? '' : _originalMsgs$message2;
  var _originalMsgs$mid = originalMsgs.mid;
  const mid = _originalMsgs$mid === undefined ? '' : _originalMsgs$mid;
  var _originalMsgs$locatio = originalMsgs.location;
  const location = _originalMsgs$locatio === undefined ? {} : _originalMsgs$locatio;
  var _originalMsgs$contact = originalMsgs.contact;
  const contact = _originalMsgs$contact === undefined ? {} : _originalMsgs$contact;
  var _originalMsgs$media = originalMsgs.media;
  _originalMsgs$media = _originalMsgs$media === undefined ? {} : _originalMsgs$media;
  const androidWidth = _originalMsgs$media.androidWidth,
        androidHeight = _originalMsgs$media.androidHeight,
        duration = _originalMsgs$media.duration,
        fileName = _originalMsgs$media.fileName,
        file_url = _originalMsgs$media.file_url,
        file_size = _originalMsgs$media.file_size,
        local_path = _originalMsgs$media.local_path,
        originalHeight = _originalMsgs$media.originalHeight,
        originalWidth = _originalMsgs$media.originalWidth,
        webWidth = _originalMsgs$media.webWidth,
        webHeight = _originalMsgs$media.webHeight,
        thumb_image = _originalMsgs$media.thumb_image,
        fileType = _originalMsgs$media.fileType,
        isDownloaded = _originalMsgs$media.isDownloaded,
        isUploading = _originalMsgs$media.isUploading;

  if (msgTypes.indexOf(msgType) === -1) {
    const file = {
      extension: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["i" /* getExtention */])(fileName),
      localPath: local_path.split('/').pop(),
      size: file_size,
      type: fileType,
      width: originalWidth,
      height: originalHeight,
      duration,
      name: fileName
    },
          fileOptions = {
      androidHeight,
      androidWidth,
      webWidth,
      webHeight,
      width: originalWidth,
      height: originalHeight,
      thumbImage: thumb_image,
      fileURL: file_url,
      fileSize: file_size,
      fileName: fileName,
      isDownloaded,
      isUploading
    };
    Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, '', msgId, '', msgType, file, fileOptions);
    const filesData = {
      medias: [{
        fileToken: file_url,
        messageId: msgId,
        toUser: Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["u" /* getUserIdFromJid */])(toJid),
        type: chatType
      }]
    };
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])(),
          token = await Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["v" /* getUserToken */])();
    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_1__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.forwardUrl, JSON.stringify(filesData), token, 'application/json; charset=utf-8', msgId);
    if (apiResponse.status !== 200) {
      const mediaDetial = {
        isUploading: 3
      };
      Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_mediaDetailTable__["d" /* updateMediaDetailTable */])(msgId, mediaDetial);
      resolve({
        statusCode: apiResponse.status,
        message: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_13" /* MEDIA_UPLOAD_FAILED */]
      });
    }
    console.log('SDK forward apiResponse', JSON.stringify(apiResponse, null, 2));
    const mediaDetial = {
      fileUrl: apiResponse.data[msgId],
      isUploading: 2
    };
    Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_mediaDetailTable__["d" /* updateMediaDetailTable */])(msgId, mediaDetial);
    const fwdFileOptions = _extends({}, fileOptions, {
      thumbImg: thumb_image,
      fileURL: mediaDetial.fileUrl,
      fileName,
      duration,
      fileSize: file_size
    });
    response = await Object(__WEBPACK_IMPORTED_MODULE_2__chat__["E" /* sendMediaMessageData */])(toJid, msgType, fwdFileOptions, msgId);
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_57" /* TEXT */] || msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["l" /* AUTO_TEXT */]) {
    response = await Object(__WEBPACK_IMPORTED_MODULE_2__chat__["G" /* sendTextMessage */])(toJid, message, msgId);
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */]) {
    Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, '', msgId, '', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], '', contact);
    response = await Object(__WEBPACK_IMPORTED_MODULE_2__chat__["x" /* sendAttachmentMessage */])(toJid, contact, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["w" /* CONTACT */], msgId);
  } else if (msgType === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */]) {
    Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_messageTable__["h" /* handleMessageCreate */])(toJid, '', msgId, '', __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], '', location);
    response = await Object(__WEBPACK_IMPORTED_MODULE_2__chat__["x" /* sendAttachmentMessage */])(toJid, location, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_6" /* LOCATION */], msgId);
  }
  resolve(response);
  /**
  // await getOriginalMsgDetails(orgMsgId, chatType, async msgResponse => {
  //   if (msgResponse.statusCode === 200 && msgResponse.data) {
  //     const {
  //       data: {
  //         message,
  //         media = {},
  //         message_type: msgType,
  //         location = {},
  //         contact = {},
  //       },
  //     } = msgResponse;
   //     // Msg type not equal of Text, Location & Contact - To upload the Media only
  //     if (msgTypes.indexOf(msgType) === -1) {
  //       const apiEndPoints = getApiEndPoints(),
  //         token = await getUserToken(),
  //         filesData = {
  //           medias: [
  //             {
  //               fileToken: media.file_url,
  //               messageId: msgId,
  //               toUser: getUserIdFromJid(toJid),
  //               type: chatType,
  //             },
  //           ],
  //         };
  //       const apiResponse = await sendRequest(
  //         METHOD_POST,
  //         apiEndPoints.forwardUrl,
  //         JSON.stringify(filesData),
  //         token,
  //         'application/json; charset=utf-8',
  //         msgId,
  //       );
   //       if (apiResponse.status !== 200) {
  //         resolve({
  //           statusCode: apiResponse.status,
  //           message: MEDIA_UPLOAD_FAILED,
  //         });
  //       }
  //       const fileToken =
  //         apiResponse.data && msgId ? apiResponse.data[msgId] : '';
  //       const fileOptions = {
  //         ...media,
  //         fileURL: fileToken,
  //         thumbImg: media.thumb_image,
  //         fileSize: media.file_size,
  //         caption: '',
  //       };
  //       response = await sendMediaMessageData(
  //         toJid,
  //         msgType,
  //         fileOptions,
  //         msgId,
  //       );
  //     } else if (msgType === TEXT || msgType === AUTO_TEXT) {
  //       response = await sendTextMessage(toJid, message, msgId);
  //     } else if (msgType === CONTACT) {
  //       response = await sendAttachmentMessage(
  //         toJid,
  //         contact,
  //         CONTACT,
  //         msgId,
  //       );
  //     } else if (msgType === LOCATION) {
  //       response = await sendAttachmentMessage(
  //         toJid,
  //         location,
  //         LOCATION,
  //         msgId,
  //       );
  //     }
  //     resolve(response);
  //   } else {
  //     resolve(response);
  //   }
  // });
   */
});
/* harmony export (immutable) */ __webpack_exports__["b"] = forwardMessageIQ;


const uploadProfileImage = async (mediaUpload, inputData, userToken) => {
  const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_1__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_15" /* METHOD_POST */], mediaUpload, inputData, userToken, 'multipart/form-data');
  console.log('profileUpdate apiResponse', apiResponse);
  if (apiResponse && apiResponse.status === 200) {
    const response = Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["B" /* successResponse */])();
    response.imageFileToken = apiResponse.data.fileToken;
    return response;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["c" /* customResponse */])(apiResponse.status, __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_13" /* MEDIA_UPLOAD_FAILED */]);
};
/* unused harmony export uploadProfileImage */


const profileUpdate = async image => {
  const inputData = new FormData();
  try {
    if (typeof image === 'string') {
      inputData.append('file', image); // TODO: should check image upload in React Native
    } else if (typeof image === 'object' && image !== null) {
      console.log('image', image);
      if (image.path) {
        let fileName = image.path.split('/').pop();
        const cacheFolderPath = await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.CachesDirectoryPath;
        console.log('cacheFolderPath', cacheFolderPath);
        const destinationPath = cacheFolderPath + '/react-native-image-crop-picker/' + fileName;
        console.log('destinationPath', destinationPath);
        await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(image.path, destinationPath).then(async () => {
          image.path = destinationPath;
          console.log('image path', image);
        }).catch(error => {
          console.log('Error saving image:', error);
        });
        await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.stat(image.path).then(fileInfo => {
          const document = {
            fileCopyUri: 'file://' + image.path,
            type: 'image/jpeg',
            name: image.path.split('/').pop(),
            size: fileInfo.size,
            lastModified: fileInfo.mtime,
            uri: 'file://' + image.path
          };
          // Perform further operations with the stored document
          inputData.append('file', document);
          console.log('document', document);
        }).catch(error => {
          console.log('Error getting stored document:', error);
          Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["j" /* errorResponse */])('Error getting stored document');
        });
      }
    } else {
      console.error('Invalid image type');
      return;
    }
    inputData.append('type', 'profile');
    inputData.append('toUser', Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["v" /* getloggedinUserJid */])());
    inputData.append('messageId', '');
    const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])(),
          userToken = await Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["v" /* getUserToken */])();
    console.log('profileUpdate inputData stringify', JSON.stringify(inputData));
    return uploadProfileImage(apiEndpoints.mediaUpload, inputData, userToken);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["j" /* errorResponse */])(500, 'Profile Update Failure');
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = profileUpdate;


const getToken = (username, password) => new Promise(async resolve => {
  const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])();
  const data = {
    username: username,
    password: password,
    type: __WEBPACK_IMPORTED_MODULE_7_react_native__["Platform"].OS // TODO: change this as per the requirement once migration is done
  };

  const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_1__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.login, JSON.stringify(data), '', '');
  if (apiResponse.status === 200) {
    const response = Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["B" /* successResponse */])();
    response.userToken = apiResponse.data.token;
    Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["a" /* autoRefreshToken */])(apiResponse.data.token);
    Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["z" /* setUserToken */])(apiResponse.data.token);
    resolve(response);
  }
  resolve(Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["c" /* customResponse */])(apiResponse.status, apiResponse.message));
});
/* harmony export (immutable) */ __webpack_exports__["c"] = getToken;


const calculateWidthAndHeight = (width, height) => {
  let response = {};

  switch (true) {
    // Horizontal Video
    case width > height:
      let resultHeight = Math.round(height / width * __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_12" /* MAX_WIDTH_WEB */]),
          resultHeightAnd = Math.round(height / width * __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_11" /* MAX_WIDTH_AND */]);

      response = {
        webWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_12" /* MAX_WIDTH_WEB */],
        webHeight: resultHeight > __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_18" /* MIN_HEIGHT_WEB */] ? resultHeight : __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_18" /* MIN_HEIGHT_WEB */],
        androidWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_11" /* MAX_WIDTH_AND */],
        androidHeight: resultHeightAnd > __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_17" /* MIN_HEIGHT_AND */] ? resultHeightAnd : __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_17" /* MIN_HEIGHT_AND */]
      };
      break;

    // Vertical Video
    case width < height:
      response = {
        webWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_21" /* MIN_WIDTH_WEB */],
        webHeight: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_10" /* MAX_HEIGHT_WEB */],
        androidWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_20" /* MIN_WIDTH_AND */],
        androidHeight: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_9" /* MAX_HEIGHT_AND */]
      };
      break;

    // Default/Square Video
    default:
      response = {
        webWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_12" /* MAX_WIDTH_WEB */],
        webHeight: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_12" /* MAX_WIDTH_WEB */],
        androidWidth: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_11" /* MAX_WIDTH_AND */],
        androidHeight: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_11" /* MAX_WIDTH_AND */]
      };
      break;
  }
  return response;
};
/* unused harmony export calculateWidthAndHeight */


const getThumbImage = async uri => {
  const result = await __WEBPACK_IMPORTED_MODULE_10_react_native_compressor__["Image"].compress(uri, {
    maxWidth: 200,
    maxHeight: 200,
    quality: 0.3
  });
  const response = await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.readFile(result, 'base64');
  return response;
};
/* unused harmony export getThumbImage */


const getVideoThumbImage = async uri => {
  let response;
  if (__WEBPACK_IMPORTED_MODULE_7_react_native__["Platform"].OS === 'ios') {
    if (uri.includes('ph://')) {
      let result = await __WEBPACK_IMPORTED_MODULE_10_react_native_compressor__["Image"].compress(uri, {
        maxWidth: 600,
        maxHeight: 600,
        quality: 0.8
      });
      response = await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.readFile(result, 'base64');
    } else {
      const frame = await Object(__WEBPACK_IMPORTED_MODULE_14_react_native_create_thumbnail__["createThumbnail"])({
        url: uri,
        timeStamp: 10000
      });
      response = await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.readFile(frame.path, 'base64');
    }
  } else {
    const frame = await Object(__WEBPACK_IMPORTED_MODULE_14_react_native_create_thumbnail__["createThumbnail"])({
      url: uri,
      timeStamp: 10000
    });
    response = await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.readFile(frame.path, 'base64');
  }
  return response;
};
/* unused harmony export getVideoThumbImage */


const convertPhToFile = async (uri, destinationPath) => {
  return await __WEBPACK_IMPORTED_MODULE_11_react_native_convert_ph_asset___default.a.convertVideoFromUrl({
    url: uri,
    convertTo: 'mov',
    quality: 'original'
  }).then(async response => {
    return response.path;
  }).catch(err => {
    console.log('RNConvertPhAsset', err);
  });
};

const convertMovtoMP4 = async (uri, localPathName) => {
  return await __WEBPACK_IMPORTED_MODULE_12_react_native_mov_to_mp4___default.a.convertMovToMp4(uri, localPathName);
};

const fileStoreInDevice = async file => {
  try {
    const type = file.type,
          extension = file.extension,
          width = file.width,
          height = file.height,
          uri = file.uri;

    const localPathName = 'MFRN_' + Date.now();
    const localPath = localPathName + '.' + extension.toLowerCase();
    const destinationPath = 'file://' + __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.DocumentDirectoryPath + '/' + localPath;
    let convertedFilePath;
    let convertedFileName;
    if (__WEBPACK_IMPORTED_MODULE_7_react_native__["Platform"].OS === 'ios') {
      switch (true) {
        case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["Y" /* IOS_IMAGE_FORMATS */].includes(type):
          let result = await __WEBPACK_IMPORTED_MODULE_10_react_native_compressor__["Image"].compress(uri, {
            maxWidth: width,
            maxHeight: height,
            quality: 1
          });
          await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(result, destinationPath);
          break;
        case __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["Z" /* IOS_VIDEO_FORMATS */].includes(type):
          if (uri.includes('ph://')) {
            await convertPhToFile(uri).then(async res => {
              if (type === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["S" /* IMAGE */]) {
                __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(res, destinationPath);
              }
              if (type === __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_76" /* VIDEO */]) {
                convertedFilePath = await convertMovtoMP4(res, localPathName);
                convertedFileName = convertedFilePath.split('/').pop();
              }
            });
          } else if (extension.toLowerCase() === 'mov') {
            convertedFilePath = await __WEBPACK_IMPORTED_MODULE_12_react_native_mov_to_mp4___default.a.convertMovToMp4(uri, localPathName);
            convertedFileName = convertedFilePath.split('/').pop();
          } else {
            await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(uri, destinationPath);
          }
          break;
        default:
          await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(uri, destinationPath);
      }
    } else {
      // Platform.OS === 'ios' ELSE
      await __WEBPACK_IMPORTED_MODULE_0_react_native_fs___default.a.copyFile(uri, destinationPath);
    }
    return {
      destinationPath: extension.toLowerCase() !== 'mov' ? destinationPath : 'file://' + convertedFilePath,
      localPath: extension.toLowerCase() !== 'mov' ? localPath : convertedFileName
    };
  } catch (error) {
    console.log('fileStoreInDevice', error);
    return Object(__WEBPACK_IMPORTED_MODULE_6__helpers_utils__["j" /* errorResponse */])('Failed to read file');
  }
};
/* unused harmony export fileStoreInDevice */


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var MD5 = __webpack_require__(74)
var RIPEMD160 = __webpack_require__(77)
var sha = __webpack_require__(78)
var Base = __webpack_require__(24)

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(3).Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var assert = __webpack_require__(11);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);
const Reporter = __webpack_require__(94).Reporter;
const Buffer = __webpack_require__(92).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__realmDB__ = __webpack_require__(13);




// Read all Roaster
const getAllRoaster = async () => {
  const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
  const roasterList = realm.objects('RoasterTable');
  return JSON.parse(JSON.stringify(roasterList));
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getAllRoaster;


const handleRoaster = async (jid, chatType) => {
  const roasterData = await getRoasterDetail(jid);

  if (roasterData) {
    updateRoaster(jid, chatType);
  } else {
    createRoaster(jid, chatType);
  }
  Object(__WEBPACK_IMPORTED_MODULE_0__vcardTable__["b" /* handleVcardDetail */])(jid);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = handleRoaster;


const getRoasterDetail = async jid => {
  try {
    if (jid) {
      const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
      const roasterDetail = realm.objectForPrimaryKey('RoasterTable', jid);
      let roasterVal;
      if (roasterDetail) {
        roasterVal = {
          colourCode: roasterDetail.colourCode
        };
        return JSON.parse(JSON.stringify(roasterVal));
      }
      return roasterVal;
    }
  } catch (error) {
    console.log('getVcardDetial error', error);
    return { status: 500, message: 'Get Vcard Detail Error' };
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getRoasterDetail;


// Create a Roaster
const createRoaster = (jid, chatType) => {
  Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])().then(realm => {
    realm.write(() => {
      realm.create('RoasterTable', {
        jid,
        colourCode: Object(__WEBPACK_IMPORTED_MODULE_1__Utils__["h" /* getRandomColorCode */])(),
        roasterType: chatType
      });
    });
  }).catch(error => {
    console.log('Failed to create RoasterTable', error);
  });
};
/* unused harmony export createRoaster */


// Update a Roaster
const updateRoaster = async (jid, chatType) => {
  Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])().then(realm => {
    const roasterDetail = realm.objectForPrimaryKey('RoasterTable', jid);
    if (roasterDetail) realm.write(() => {
      roasterDetail.roasterType = chatType;
    });else {
      console.log('Roaster not found');
    }
  }).catch(error => {
    console.log('Failed to update Roaster', error);
  });
};
/* unused harmony export updateRoaster */


// Delete a Roaster
const deleteRoaster = async jid => {
  await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])().then(realm => {
    const roaster = realm.objectForPrimaryKey('RoasterTable', jid);
    if (roaster) {
      realm.write(() => {
        realm.delete(roaster);
      });
    } else {
      console.log('Roaster not found');
    }
  }).catch(error => {
    console.log('Failed to delete Roaster', error);
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = deleteRoaster;


const deleteAllRoaster = async () => {
  await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])().then(realm => {
    const allRoaster = realm.objectForPrimaryKey('RoasterTable');
    if (allRoaster) {
      realm.write(() => {
        realm.delete(allRoaster);
      });
    } else {
      console.log('Roaster not found');
    }
  }).catch(error => {
    console.log('Failed to delete all roaster', error);
  });
};
/* unused harmony export deleteAllRoaster */


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_index_js__ = __webpack_require__(323);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__node_index_js__["a"]; });





/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__service_auth__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common__ = __webpack_require__(45);






const reconnect = async () => {
  const credential = await __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default.a.getItem('credential');
  Object(__WEBPACK_IMPORTED_MODULE_4__common__["m" /* setReconnectionStatus */])(true);
  if (credential) {
    const parsedCredential = JSON.parse(credential);
    if (Object(__WEBPACK_IMPORTED_MODULE_1__strophe_connection__["c" /* getConnectionObj */])() && Object(__WEBPACK_IMPORTED_MODULE_1__strophe_connection__["c" /* getConnectionObj */])().connected) return;
    let response = { status: 'RECONNECTING' };
    if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])() && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener) {
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener(response);
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_4__common__["e" /* getAppState */])() == 'active') {
      if (Object(__WEBPACK_IMPORTED_MODULE_4__common__["f" /* getNetworkStatus */])()) {
        const reconnectRes = await Object(__WEBPACK_IMPORTED_MODULE_0__service_auth__["a" /* connect */])(parsedCredential.username, parsedCredential.password);
        console.log('reconnectRes SDK', reconnectRes);
        if (reconnectRes.statusCode === 200 || reconnectRes.statusCode === 409) {
          response.status = 'CONNECTED';
          Object(__WEBPACK_IMPORTED_MODULE_4__common__["m" /* setReconnectionStatus */])(false);
          return reconnectRes.statusCode;
        } else if (reconnectRes.message === 'Invalid Credentials') {
          await __WEBPACK_IMPORTED_MODULE_2__react_native_async_storage_async_storage___default.a.clear();
          response.status = 'LOGOUT';
          if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])() && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener) {
            Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener(response);
          } else {
            console.error('connectionListener callback method is not registered. So user will not receive the data from SDK.');
          }
        }
      } else {
        response.status = 'NOCONNECTION';
        if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])() && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener) {
          Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener(response);
        }
      }
    } else {
      response.status = 'BACKGROUND';
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["D" /* setCredentials */])(parsedCredential.username, parsedCredential.password);
      if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])() && Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener) {
        Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["a" /* callbackListeners */])().connectionListener(response);
      }
    }
  }
  Object(__WEBPACK_IMPORTED_MODULE_4__common__["m" /* setReconnectionStatus */])(false);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = reconnect;


/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.
 *
 * Works with anything that has a `length` property and index access properties, including NodeList.
 *
 * @template {unknown} T
 * @param {Array<T> | ({length:number, [number]: T})} list
 * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate
 * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,
 * 				allows injecting a custom implementation in tests
 * @returns {T | undefined}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find
 */
function find(list, predicate, ac) {
	if (ac === undefined) {
		ac = Array.prototype;
	}
	if (list && typeof ac.find === 'function') {
		return ac.find.call(list, predicate);
	}
	for (var i = 0; i < list.length; i++) {
		if (Object.prototype.hasOwnProperty.call(list, i)) {
			var item = list[i];
			if (predicate.call(undefined, item, i, list)) {
				return item;
			}
		}
	}
}

/**
 * "Shallow freezes" an object to render it immutable.
 * Uses `Object.freeze` if available,
 * otherwise the immutability is only in the type.
 *
 * Is used to create "enum like" objects.
 *
 * @template T
 * @param {T} object the object to freeze
 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
 * 				allows to inject custom object constructor for tests
 * @returns {Readonly<T>}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */
function freeze(object, oc) {
	if (oc === undefined) {
		oc = Object
	}
	return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object
}

/**
 * All mime types that are allowed as input to `DOMParser.parseFromString`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
 * @see DOMParser.prototype.parseFromString
 */
var MIME_TYPE = freeze({
	/**
	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
	 *
	 * @see DOMParser.SupportedType.isHTML
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
	 */
	HTML: 'text/html',

	/**
	 * Helper method to check a mime type if it indicates an HTML document
	 *
	 * @param {string} [value]
	 * @returns {boolean}
	 *
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
	isHTML: function (value) {
		return value === MIME_TYPE.HTML
	},

	/**
	 * `application/xml`, the standard mime type for XML documents.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */
	XML_APPLICATION: 'application/xml',

	/**
	 * `text/html`, an alias for `application/xml`.
	 *
	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */
	XML_TEXT: 'text/xml',

	/**
	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
	 * but is parsed as an XML document.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
	 */
	XML_XHTML_APPLICATION: 'application/xhtml+xml',

	/**
	 * `image/svg+xml`,
	 *
	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
	 */
	XML_SVG_IMAGE: 'image/svg+xml',
})

/**
 * Namespaces that are used in this code base.
 *
 * @see http://www.w3.org/TR/REC-xml-names
 */
var NAMESPACE = freeze({
	/**
	 * The XHTML namespace.
	 *
	 * @see http://www.w3.org/1999/xhtml
	 */
	HTML: 'http://www.w3.org/1999/xhtml',

	/**
	 * Checks if `uri` equals `NAMESPACE.HTML`.
	 *
	 * @param {string} [uri]
	 *
	 * @see NAMESPACE.HTML
	 */
	isHTML: function (uri) {
		return uri === NAMESPACE.HTML
	},

	/**
	 * The SVG namespace.
	 *
	 * @see http://www.w3.org/2000/svg
	 */
	SVG: 'http://www.w3.org/2000/svg',

	/**
	 * The `xml:` namespace.
	 *
	 * @see http://www.w3.org/XML/1998/namespace
	 */
	XML: 'http://www.w3.org/XML/1998/namespace',

	/**
	 * The `xmlns:` namespace
	 *
	 * @see https://www.w3.org/2000/xmlns/
	 */
	XMLNS: 'http://www.w3.org/2000/xmlns/',
})

exports.find = find;
exports.freeze = freeze;
exports.MIME_TYPE = MIME_TYPE;
exports.NAMESPACE = NAMESPACE;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.
 *
 * Works with anything that has a `length` property and index access properties, including NodeList.
 *
 * @template {unknown} T
 * @param {Array<T> | ({length:number, [number]: T})} list
 * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate
 * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,
 * 				allows injecting a custom implementation in tests
 * @returns {T | undefined}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find
 */
function find(list, predicate, ac) {
	if (ac === undefined) {
		ac = Array.prototype;
	}
	if (list && typeof ac.find === 'function') {
		return ac.find.call(list, predicate);
	}
	for (var i = 0; i < list.length; i++) {
		if (Object.prototype.hasOwnProperty.call(list, i)) {
			var item = list[i];
			if (predicate.call(undefined, item, i, list)) {
				return item;
			}
		}
	}
}

/**
 * "Shallow freezes" an object to render it immutable.
 * Uses `Object.freeze` if available,
 * otherwise the immutability is only in the type.
 *
 * Is used to create "enum like" objects.
 *
 * @template T
 * @param {T} object the object to freeze
 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
 * 				allows to inject custom object constructor for tests
 * @returns {Readonly<T>}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */
function freeze(object, oc) {
	if (oc === undefined) {
		oc = Object
	}
	return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object
}

/**
 * Since we can not rely on `Object.assign` we provide a simplified version
 * that is sufficient for our needs.
 *
 * @param {Object} target
 * @param {Object | null | undefined} source
 *
 * @returns {Object} target
 * @throws TypeError if target is not an object
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign
 */
function assign(target, source) {
	if (target === null || typeof target !== 'object') {
		throw new TypeError('target is not an object')
	}
	for (var key in source) {
		if (Object.prototype.hasOwnProperty.call(source, key)) {
			target[key] = source[key]
		}
	}
	return target
}

/**
 * All mime types that are allowed as input to `DOMParser.parseFromString`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
 * @see DOMParser.prototype.parseFromString
 */
var MIME_TYPE = freeze({
	/**
	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
	 *
	 * @see DOMParser.SupportedType.isHTML
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
	 */
	HTML: 'text/html',

	/**
	 * Helper method to check a mime type if it indicates an HTML document
	 *
	 * @param {string} [value]
	 * @returns {boolean}
	 *
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
	isHTML: function (value) {
		return value === MIME_TYPE.HTML
	},

	/**
	 * `application/xml`, the standard mime type for XML documents.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */
	XML_APPLICATION: 'application/xml',

	/**
	 * `text/html`, an alias for `application/xml`.
	 *
	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */
	XML_TEXT: 'text/xml',

	/**
	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
	 * but is parsed as an XML document.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
	 */
	XML_XHTML_APPLICATION: 'application/xhtml+xml',

	/**
	 * `image/svg+xml`,
	 *
	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
	 */
	XML_SVG_IMAGE: 'image/svg+xml',
})

/**
 * Namespaces that are used in this code base.
 *
 * @see http://www.w3.org/TR/REC-xml-names
 */
var NAMESPACE = freeze({
	/**
	 * The XHTML namespace.
	 *
	 * @see http://www.w3.org/1999/xhtml
	 */
	HTML: 'http://www.w3.org/1999/xhtml',

	/**
	 * Checks if `uri` equals `NAMESPACE.HTML`.
	 *
	 * @param {string} [uri]
	 *
	 * @see NAMESPACE.HTML
	 */
	isHTML: function (uri) {
		return uri === NAMESPACE.HTML
	},

	/**
	 * The SVG namespace.
	 *
	 * @see http://www.w3.org/2000/svg
	 */
	SVG: 'http://www.w3.org/2000/svg',

	/**
	 * The `xml:` namespace.
	 *
	 * @see http://www.w3.org/XML/1998/namespace
	 */
	XML: 'http://www.w3.org/XML/1998/namespace',

	/**
	 * The `xmlns:` namespace
	 *
	 * @see https://www.w3.org/2000/xmlns/
	 */
	XMLNS: 'http://www.w3.org/2000/xmlns/',
})

exports.assign = assign;
exports.find = find;
exports.freeze = freeze;
exports.MIME_TYPE = MIME_TYPE;
exports.NAMESPACE = NAMESPACE;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(23).EventEmitter;
var inherits = __webpack_require__(0);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(232);
Stream.Writable = __webpack_require__(236);
Stream.Duplex = __webpack_require__(126);
Stream.Transform = __webpack_require__(237);
Stream.PassThrough = __webpack_require__(238);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(2).Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer
var MD5 = __webpack_require__(74)

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(12);
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(293)
var aesid = __webpack_require__(300)
var fixProc = __webpack_require__(301)
var ciphers = __webpack_require__(83)
var compat = __webpack_require__(130)
var Buffer = __webpack_require__(2).Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__platform_node_classes_FormData_js__ = __webpack_require__(172);




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isPlainObject(thing) || __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(arr) && !arr.some(isVisitable);
}

const predicates = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toFlatObject(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (__WEBPACK_IMPORTED_MODULE_2__platform_node_classes_FormData_js__["a" /* default */] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isSpecCompliantForm(formData);

  if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isBlob(value)) {
      throw new __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */]('Blob is not supported. Use a Buffer instead.');
    }

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArrayBuffer(value) || __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(value) && isFlatArray(value)) ||
        ((__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFileList(value) || __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].endsWith(key, '[]')) && (arr = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(value, function each(el, key) {
      const result = !(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(el) || el === null) && visitor.call(
        formData, el, __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ __webpack_exports__["a"] = (toFormData);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(3).Buffer))

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_AxiosError_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(7);





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  __WEBPACK_IMPORTED_MODULE_0__core_AxiosError_js__["a" /* default */].call(this, message == null ? 'canceled' : message, __WEBPACK_IMPORTED_MODULE_0__core_AxiosError_js__["a" /* default */].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

__WEBPACK_IMPORTED_MODULE_1__utils_js__["a" /* default */].inherits(CanceledError, __WEBPACK_IMPORTED_MODULE_0__core_AxiosError_js__["a" /* default */], {
  __CANCEL__: true
});

/* harmony default export */ __webpack_exports__["a"] = (CanceledError);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(343);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 66 */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),
/* 67 */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(360);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__initialize__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__service_api__ = __webpack_require__(22);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };







/**
 *
// Call log state
// 0 - Incoming Missed Call
// 1 - Outgoing Call
// 2 or other state - Incoming Call Answered
*/
const _sdk_callLogs = {
    data: [],
    reset: () => {
        _sdk_callLogs.data = [];
    },
    getCallLogs: async (pageNum = 1) => {
        const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])();
        if (!apiEndpoints.callLog) return undefined;

        return new Promise((resolve, reject) => {
            const getCallLogsFromServer = async (pageNumber = 1) => {
                if (pageNumber === 1) {
                    _sdk_callLogs.reset();
                }
                const userToken = await Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["v" /* getUserToken */])();

                const res = await Object(__WEBPACK_IMPORTED_MODULE_4__service_api__["a" /* sendRequest */])("GET", `${apiEndpoints.callLog}?page=${pageNumber}&size=20`, '', userToken);
                if (res && res.status === 200) {
                    _sdk_callLogs.setCallLogData(res.data.callLogs);
                    const successRes = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
                    resolve(_extends({}, successRes, { data: {
                            callLogs: _sdk_callLogs.data,
                            totalPages: res.data.totalPages
                        } }));
                } else {
                    const message = res.message || undefined;
                    const errorRes = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(message);
                    resolve(_extends({}, errorRes, { data: _sdk_callLogs.data }));
                }
            };
            getCallLogsFromServer(pageNum);
        });
    },
    setCallLogData: async callLogs => {
        if (!callLogs || !Array.isArray(callLogs) || callLogs.length === 0) return undefined;
        callLogs.forEach(callLog => {
            const findexIndex = _sdk_callLogs.data.findIndex(log => log.roomId === callLog.roomId);
            if (findexIndex > -1) {
                _sdk_callLogs.data[findexIndex] = _extends({}, _sdk_callLogs.data[findexIndex], callLog);
            } else {
                _sdk_callLogs.data.push(callLog);
            }
        });
        return undefined;
    },
    postDataForCallLogs: async postData => {
        const userToken = await Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["v" /* getUserToken */])();
        const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_common__["d" /* getApiEndPoints */])();
        if (!apiEndpoints.callLog) return;
        await Object(__WEBPACK_IMPORTED_MODULE_4__service_api__["a" /* sendRequest */])("POST", `${apiEndpoints.callLog}`, postData, userToken);
    },
    getCallLogByRoomId: roomId => {
        return _sdk_callLogs.data && _sdk_callLogs.data.find(log => log.roomId === roomId);
    },
    getTime: () => {
        return new Date().getTime() * 1000;
    },
    insert: callLog => {
        if (!callLog) return undefined;
        const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__initialize__["j" /* getCallInfo */])();
        const roomId = callLog.roomId || callInfo.roomId;
        if (!roomId) return undefined;

        const userList = callLog.userList && Array.isArray(callLog.userList) ? callLog.userList.join(',') : callLog.userList;
        let postData = {
            "callLogs": [{
                "callMode": callLog.callMode,
                "callState": typeof callLog.callState !== 'undefined' ? callLog.callState : '',
                "callType": callLog.callType || callInfo.callType || '',
                "callerDevice": __WEBPACK_IMPORTED_MODULE_1__constants__["b" /* CALLER_DEVICE */].toUpperCase(),
                "callTime": callLog.callTime || _sdk_callLogs.getTime(),
                "startTime": callLog.startTime || 0,
                "endTime": callLog.endTime || 0,
                "fromUser": callLog.fromUser || '',
                "inviteUserList": callLog.inviteUserList || "",
                "roomId": callLog.roomId || callInfo.roomId || '',
                "sessionStatus": callLog.sessionStatus || "",
                "toUser": userList || '',
                "userList": userList || '',
                "groupId": callLog.groupId || callInfo.groupId || ''
            }]
        };
        _sdk_callLogs.postDataForCallLogs(postData);
        _sdk_callLogs.setCallLogData(postData.callLogs);
        return undefined;
    },
    update: async (callLogToUpdate, roomId) => {
        const callInfo = Object(__WEBPACK_IMPORTED_MODULE_2__initialize__["j" /* getCallInfo */])();
        roomId = roomId || callInfo.roomId;
        if (!roomId || !callLogToUpdate) {
            return undefined;
        }
        let callLog = await _sdk_callLogs.getCallLogByRoomId(roomId);
        if (!callLog) {
            return undefined;
        }

        callLog['startTime'] = callLogToUpdate.startTime && !callLog.startTime ? callLogToUpdate.startTime : callLog.startTime;
        let userListToUpdate = callLog.userList;
        // Below we handled If new userList need to update, then compare with the existing users
        // & then update the new user which are not in existed users.
        if (callLogToUpdate.userList) {
            const existedUserList = callLog.userList;
            userListToUpdate = callLogToUpdate.userList;
            if (existedUserList) {
                const existedUserListArr = Array.isArray(existedUserList) ? existedUserList : existedUserList.split(',');
                const userListToUpdateArr = Array.isArray(userListToUpdate) ? userListToUpdate : userListToUpdate.split(',');
                userListToUpdateArr.map(newUser => {
                    if (existedUserListArr.indexOf(newUser) === -1) {
                        existedUserListArr.push(newUser);
                    }
                    return undefined;
                });
                userListToUpdate = existedUserListArr.join(',');
            }
        }
        callLogToUpdate['toUser'] = userListToUpdate;
        callLogToUpdate['userList'] = userListToUpdate;

        callLogToUpdate = _extends({}, callLog, callLogToUpdate);
        let postData = {
            "callLogs": [callLogToUpdate]
        };
        _sdk_callLogs.postDataForCallLogs(postData);
        _sdk_callLogs.setCallLogData(postData.callLogs);
        return undefined;
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = _sdk_callLogs;


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functions__ = __webpack_require__(367);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__call_functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__call_callHandleMessage__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__call_constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__call_callLogs__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__call_users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__call_config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__helpers_common__ = __webpack_require__(4);












let server = null;
let janusListeners = {};

const configureJanus = (janusServerUrl, stunTurnServers) => {
    server = {
        janus: janusServerUrl,
        iceServers: stunTurnServers
    };
    janusListeners = {
        remoteStreamListener: data => {
            const callDisconnected = Object(__WEBPACK_IMPORTED_MODULE_7__helpers_common__["e" /* getCallDisconnectedStatus */])();
            if (!callDisconnected) {
                if (data.stream.getVideoTracks() && data.stream.getVideoTracks().length > 0) {
                    Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                        sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                        trackType: data.stream.getVideoTracks()[0].kind,
                        track: data.stream.getVideoTracks()[0],
                        userJid: data.uniqueId,
                        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                    });
                }
                if (data.stream.getAudioTracks() && data.stream.getAudioTracks().length > 0) {
                    Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                        sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                        trackType: data.stream.getAudioTracks()[0].kind,
                        track: data.stream.getAudioTracks()[0],
                        userJid: data.uniqueId,
                        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                    });
                }
                const callUserLength = Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["g" /* getCallUsersLength */])();
                if (callUserLength === 1) {
                    __WEBPACK_IMPORTED_MODULE_4__call_callLogs__["a" /* _sdk_callLogs */].update({
                        startTime: __WEBPACK_IMPORTED_MODULE_4__call_callLogs__["a" /* _sdk_callLogs */].getTime(),
                        sessionStatus: null
                    });
                }
            }
        },
        localStreamListener: data => {
            if (data.stream.getVideoTracks() && data.stream.getVideoTracks().length > 0) {
                Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                    sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                    trackType: data.stream.getVideoTracks()[0].kind,
                    track: data.stream.getVideoTracks()[0],
                    userJid: data.uniqueId,
                    usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                });
            }
            if (data.stream.getAudioTracks() && data.stream.getAudioTracks().length > 0) {
                Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                    sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                    trackType: data.stream.getAudioTracks()[0].kind,
                    track: data.stream.getAudioTracks()[0],
                    userJid: data.uniqueId,
                    usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                });
            }
        },
        remoteStreamUnavailableListener: data => {
            Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                trackType: data.trackType,
                track: null,
                userJid: data.uniqueId,
                usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
            });
        },
        connectionListener: data => {
            const callDisconnected = Object(__WEBPACK_IMPORTED_MODULE_7__helpers_common__["e" /* getCallDisconnectedStatus */])();
            if (data.status === "connected" && !callDisconnected) {
                const user = Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["d" /* getCallUser */])(data.uniqueId);
                if (user && user.status !== __WEBPACK_IMPORTED_MODULE_3__call_constants__["L" /* CALL_STATUS_CONNECTED */]) {
                    const userJoinedPayload = {
                        userJid: data.uniqueId,
                        sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["_7" /* CALL_USER_JOINED */]
                    };
                    Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])(userJoinedPayload);
                }
                Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["a" /* addOrUpdateCallUser */])({
                    [__WEBPACK_IMPORTED_MODULE_6__call_config__["a" /* _SDK_USER_FILTER_KEY */]]: data.uniqueId,
                    status: __WEBPACK_IMPORTED_MODULE_3__call_constants__["L" /* CALL_STATUS_CONNECTED */]
                });
                Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                    sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["n" /* CALL_STATE_CALL_STATUS */],
                    status: __WEBPACK_IMPORTED_MODULE_3__call_constants__["L" /* CALL_STATUS_CONNECTED */],
                    userJid: data.uniqueId,
                    sessionStatus: null,
                    usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                });
            } else if (data.status === "disconnected") {
                Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                    sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["n" /* CALL_STATE_CALL_STATUS */],
                    status: __WEBPACK_IMPORTED_MODULE_3__call_constants__["T" /* CALL_STATUS_RECONNECT */],
                    userJid: data.uniqueId,
                    sessionStatus: null,
                    usersStatus: Object(__WEBPACK_IMPORTED_MODULE_5__call_users__["e" /* getCallUsers */])()
                });
            }
        },
        endedListener: data => {
            Object(__WEBPACK_IMPORTED_MODULE_2__call_callHandleMessage__["f" /* handleEndedMsg */])({
                room: data.room,
                type: __WEBPACK_IMPORTED_MODULE_3__call_constants__["O" /* CALL_STATUS_ENDED */],
                payload: {
                    userJid: data.uniqueId
                }
            });
        },
        localScreenShareStreamListener: data => {
            Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])({
                sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["G" /* CALL_STATE_USER_TRACK */],
                trackType: "screenshare",
                track: data.stream.getVideoTracks()[0],
                userJid: data.uniqueId.replace("screeshare-", "")
            });
        },
        speakingListener: (uniqueID, volumeLevel, isSpeaking) => {
            if (!__WEBPACK_IMPORTED_MODULE_1__call_functions__["s" /* isUserConnectedCall */]) return;
            const speakingDataToClient = {
                userJid: uniqueID,
                sdkStatus: __WEBPACK_IMPORTED_MODULE_3__call_constants__["V" /* CALL_STATUS_SPEAKING */],
                volumeLevel: volumeLevel,
                isSpeaking: isSpeaking
            };
            Object(__WEBPACK_IMPORTED_MODULE_1__call_functions__["x" /* sendDataToClient */])(speakingDataToClient);
        }
    };
};
/* harmony export (immutable) */ __webpack_exports__["b"] = configureJanus;


const initiateConnection = (successCallback, errorCallback) => {
    if (server === null) errorCallback("Server url not configured.");
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["e" /* initiateConnection */])(server, janusListeners, successCallback, errorCallback);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = initiateConnection;


const createRoom = (roomId, callback) => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["b" /* createRoom */])(roomId, callback);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = createRoom;


const joinRoom = (roomId, callback) => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["f" /* joinRoom */])(roomId, callback);
};
/* harmony export (immutable) */ __webpack_exports__["f"] = joinRoom;


const muteAudio = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["g" /* muteAudio */])();
};
/* harmony export (immutable) */ __webpack_exports__["g"] = muteAudio;


const unmuteAudio = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["k" /* unmuteAudio */])();
};
/* harmony export (immutable) */ __webpack_exports__["k"] = unmuteAudio;


const muteVideo = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["h" /* muteVideo */])();
};
/* harmony export (immutable) */ __webpack_exports__["h"] = muteVideo;


const unmuteVideo = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["l" /* unmuteVideo */])();
};
/* harmony export (immutable) */ __webpack_exports__["l"] = unmuteVideo;


const destroySession = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["d" /* destroySession */])();
};
/* harmony export (immutable) */ __webpack_exports__["d"] = destroySession;


const destroyRoom = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["c" /* destroyRoom */])(callback);
};
/* unused harmony export destroyRoom */


const unpublish = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["m" /* unpublish */])();
};
/* unused harmony export unpublish */


const startScreenShare = roomId => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["i" /* startScreenShare */])(roomId);
};
/* harmony export (immutable) */ __webpack_exports__["i"] = startScreenShare;


const stopScreenShare = () => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["j" /* stopScreenShare */])();
};
/* harmony export (immutable) */ __webpack_exports__["j"] = stopScreenShare;


const attachPlugin = (localUserCallId, isAudioMute, isVideoMute, successCallback, errorCallback) => {
    Object(__WEBPACK_IMPORTED_MODULE_0__functions__["a" /* attachPlugin */])(localUserCallId, isAudioMute, isVideoMute, successCallback, errorCallback);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = attachPlugin;


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__realmDB__ = __webpack_require__(13);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



/**
 * Create Message in Message Detail,
 * params object keys as follows
 * @example (realm, params)
 *  @param  mid Required
 *  @param  caption
 *  @param  duration
 *  @param  fileName
 *  @param  fileSize
 *  @param  fileType
 *  @param  fileUrl
 *  @param  isDownloaded
 *  @param  isUploading
 *  @param  localPath
 *  @param  thumbImage
 *  @param  webWidth
 *  @param  webHeight
 *  @param  mobileWidth
 *  @param  mobileHeight
 *  @param originalHeight
 *  @param originalWidth
 */
const createMediaDetailTable = (realm, params) => {
  try {
    realm.write(() => {
      realm.create('MediaDetailTable', _extends({}, params));
    });
  } catch (error) {
    console.log('createMediaDetailTable', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createMediaDetailTable;


/**
 * Update Message in Message Detail,
 * params object keys as follows
 * @example (mid, params)
 *  @param  mid Required
 *  @param  caption
 *  @param  duration
 *  @param  fileName
 *  @param  fileSize
 *  @param  fileType
 *  @param  fileUrl
 *  @param  isDownloaded
 *  @param  isUploading
 *  @param  localPath
 *  @param  thumbImage
 *  @param  webWidth
 *  @param  webHeight
 *  @param  mobileWidth
 *  @param  mobileHeight
 *  @param originalHeight
 *  @param originalWidth
 */
const updateMediaDetailTable = async (mid, params) => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_0__realmDB__["a" /* getRealmDB */])();
    const mediaDetail = realm.objectForPrimaryKey('MediaDetailTable', mid);
    realm.write(() => {
      Object.assign(mediaDetail, params);
    });
  } catch (error) {
    console.log('updateMediaDetailTable', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = updateMediaDetailTable;


/**
 * Get Message in Message Detail,
 * params object keys as follows
 * @example ('message-id')
 *  @param  mid - Required
 *  @returns {Object}
 *  @key  caption
 *  @key  duration
 *  @key  fileName
 *  @key  fileSize
 *  @key  fileType
 *  @key  fileUrl
 *  @key  isDownloaded
 *  @key  isUploading
 *  @key  localPath
 *  @key  thumbImage
 *  @key  webWidth
 *  @key  webHeight
 *  @key  mobileWidth
 *  @key  mobileHeight
 *  @key  originalHeight
 *  @key  originalWidth
 */
const getMediaDetail = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_0__realmDB__["a" /* getRealmDB */])();
    const mediaDetail = realm.objectForPrimaryKey('MediaDetailTable', mid);
    if (mediaDetail) return JSON.parse(JSON.stringify(mediaDetail));
  } catch (error) {
    console.log('getMediaDetail', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getMediaDetail;


/**
 * Get Message in Message Detail,
 *
 * you have open the realm before this calls,
 *
 * params object keys as follows
 * @example ('message-id', realm)
 *  @param  mid - Required
 *  @returns {Object}
 *  @key  caption
 *  @key  duration
 *  @key  fileName
 *  @key  fileSize
 *  @key  fileType
 *  @key  fileUrl
 *  @key  isDownloaded
 *  @key  isUploading
 *  @key  localPath
 *  @key  thumbImage
 *  @key  webWidth
 *  @key  webHeight
 *  @key  mobileWidth
 *  @key  mobileHeight
 *  @key  originalHeight
 *  @key  originalWidth
 */
const getMediaDetailWithRealm = (mid, realm) => {
  try {
    return realm.objectForPrimaryKey('MediaDetailTable', mid);
  } catch (error) {
    console.log('getMediaDetailWithRealm', mid);
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getMediaDetailWithRealm;


/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_72__;

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["j"] = getUserToken;
/* harmony export (immutable) */ __webpack_exports__["o"] = setUserToken;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__ = __webpack_require__(385);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_axios__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__service_feedback__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__db_controllers_statusTable__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__db_controllers_vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__db_controllers_roasterTable__ = __webpack_require__(52);
// migration done (13-12-21)














/**
 * Get Friends List (Contacts/Rosters)
 * @example SDK.getFriendsList();
 * @returns {Object} Success/Error (Emit array of objects. It will be received in callbacks.friendsListListener)
 */
const getFriendsList = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["d" /* getFriendsListIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = getFriendsList;


/**
 * Get the User Profile Details (vCard)
 * @example SDK.getUserProfile("1111111111");
 * @param {String} userJid - User Jid (with domain)
 * @returns {Object} Success/Error (Emit object. It will be received in callbacks.userProfileListener)
 */
const getUserProfile = async userId => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'userId',
      value: userId,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      const userid = userId.split('@').length > 1 ? Strophe.getNodeFromJid(userId) : userId;
      return await Object(__WEBPACK_IMPORTED_MODULE_7__service_feedback__["c" /* fetchVcard */])(userid);
    }
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = getUserProfile;


/**
 * Get User's Last Seen Time
 * @example SDK.getLastSeen("2222222222@xmppdomain")
 * @param {String} userJid - User Jid (Username with domain)
 * @returns {Object} Success/Error Response with Data
 */
const getLastSeen = toUserJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toUserJid',
      value: toUserJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["e" /* getLastActivityIQ */])(toUserJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getLastSeen;


/**
 * Block the User
 * @example SDK.blockuser("2222222222@xmppdomain");
 * @param {String} toUserJid - To User Jid (Username with domain)
 * @returns {Object} Success/Error Response
 */
const blockUser = toUserJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toUserJid',
      value: toUserJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["a" /* blockUserIQ */])(toUserJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = blockUser;


/**
 * Unblock the User
 * @example SDK.unblockuser("2222222222@xmppdomain");
 * @param {String} toUserJid - To User Jid (Username with domain)
 * @returns {Object} Success/Error Response
 */
const unblockUser = toUserJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'toUserJid',
      value: toUserJid,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["g" /* unblockUserIQ */])(toUserJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["q"] = unblockUser;


/**
 * Get the list of users who are all blocked by the current user
 * @example SDK.getUsersIBlocked();
 * @returns {Object} Success/Error Response
 */
const getUsersIBlocked = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["b" /* blockedListIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["k"] = getUsersIBlocked;


/**
 * Get the list of users who are blocked the current user
 * @example SDK.getUsersWhoBlockedMe();
 * @returns {Object} Success/Error Response
 */
const getUsersWhoBlockedMe = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["c" /* blockedUserListIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["m"] = getUsersWhoBlockedMe;


/**
 * Set the User Profile (vCard)
 * @example SDK.setUserProfile("SampleUser", File, "I am in Chat", "1111111111", "sample@sample.com");
 * @example SDK.setUserProfile("SampleUser", "fileURL", "I am in Chat", "1111111111", "sample@sample.com");
 * @param {String} nickName - name of the user
 * @param {Object} image - image file (or) image url
 * @param {String} status - status of the user
 * @param {String} mobileNumber - mobile number of the user
 * @param {String} email - email of the user
 * @returns {Promise} Success/Error Response & Media URL
 */
const setUserProfile = async (nickName = '', image = '', status = '', mobileNumber = '', email = '') => {
  try {
    return await Object(__WEBPACK_IMPORTED_MODULE_2__strophe_profileiqstanza__["f" /* setUserProfileIQ */])(nickName, image, status, mobileNumber, email);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["n"] = setUserProfile;


/**
 * Get the Current User Jid with Resource
 * @example SDK.getCurrentUserJid();
 * @returns {Object} Success/Error Response with userJid
 */
const getCurrentUserJid = () => {
  try {
    const userJid = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["p" /* getLocalUserJidWithResource */])();
    const response = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
    response.userJid = userJid;
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = getCurrentUserJid;


/**
 * Generates Usertoken to Access the API
 * @example SDK.getUserToken("1111111111", "***********");
 * @param {String} username
 * @param {String} password
 * @returns {Object} Success/Error Response with userToken
 */
async function getUserToken(username, password) {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'username',
      value: username,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }, {
      key: 'password',
      value: password,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return await Object(__WEBPACK_IMPORTED_MODULE_3__utils__["c" /* getToken */])(username, password);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

/**
 * Set Usertoken
 * @example SDK.setUserToken("ezk239sdflka3pdsfknq3qo");
 * @param {String} token
 * @returns {Object} Success/Error Response with userToken
 */
async function setUserToken(token) {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'token',
      value: token,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_4__helpers_localDb__["g" /* setToken */])(token);
      return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

/**
 * Get Available Translation Languages from Googles
 * @example SDK.getTranslateLanguages("ezk239sdflka3pdsfknq3qo", "en");
 * @param {String} apiKey - Google API Key
 * @param {String} target - Language
 * @returns {Object} Success/Error Response with data
 */
const getTranslateLanguages = async (apiKey, target = 'en') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'apiKey',
      value: apiKey,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      const options = {
        url: `${__WEBPACK_IMPORTED_MODULE_5__helpers_constants__["J" /* GOOGLE_TRANSLATE_URL */]}/languages?key=${apiKey}&target=${target}`,
        method: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_14" /* METHOD_GET */],
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        },
        crossdomain: true,
        preflight: false
      };
      const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_6_axios__["a" /* default */])(options);

      if (apiResponse && apiResponse.status === 200) {
        const finalResponse = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
        finalResponse.data = apiResponse.data.data;
        return finalResponse;
      }
      return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["c" /* customResponse */])(apiResponse.status, '');
    }
    return response;
  } catch (error) {
    console.log('error :>> ', error);
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = getTranslateLanguages;


/**
 * Get the Translated Result for the Given Text
 * @example SDK.translateText("ezk239sdflka3pdsfknq3qo", "Hello", "en");
 * @param {String} apiKey - Google API Key
 * @param {String} text - Text That Needs to be Translated
 * @param {String} target - Language
 * @returns {Object} Success/Error Response with data
 */
const translateText = async (apiKey, text, target = 'en') => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
      key: 'apiKey',
      value: apiKey,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }, {
      key: 'text',
      value: text,
      rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_50" /* REQUIRED */]
    }]);

    if (response.statusCode === 200) {
      let fd = new FormData();
      fd.append('key', apiKey);
      fd.append('target', target);
      fd.append('q', text);

      const options = {
        url: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["J" /* GOOGLE_TRANSLATE_URL */],
        method: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_15" /* METHOD_POST */],
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        },
        data: fd,
        crossdomain: true,
        preflight: false
      };

      const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_6_axios__["a" /* default */])(options);
      if (apiResponse && apiResponse.status === 200) {
        const finalResponse = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
        finalResponse.data = apiResponse.data.data;
        return finalResponse;
      }
      return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["c" /* customResponse */])(apiResponse.status, '');
    }
    return response;
  } catch (error) {
    console.log('error :>> ', error);
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["p"] = translateText;


/**
 * Get Users List (Registered users)
 * @example SDK.getUsersList();
 * @param {String} name
 * @param {Number} page
 * * @param {Number} limit
 * @returns {Object} Success/Error Response. Data with the user list of the registered users.
 */

const getUsersList = (name, page, limit) => {
  try {
    const validations = [];
    if (page) {
      validations.push({
        key: 'page',
        value: page,
        rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_41" /* NUMBER_REQUIRED */]
      });
    }
    if (limit) {
      validations.push({
        key: 'limit',
        value: limit,
        rules: __WEBPACK_IMPORTED_MODULE_5__helpers_constants__["_41" /* NUMBER_REQUIRED */]
      });
    }
    if (validations.length > 0) {
      const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])(validations);
      if (response.statusCode !== 200) {
        return response;
      }
    }
    const pageNumber = page ? page : 1;
    const size = limit ? limit : 30;
    let searchText = name ? encodeURIComponent(name.replace(/\\/g, '')) : '';
    searchText = encodeURI(searchText);
    return Object(__WEBPACK_IMPORTED_MODULE_7__service_feedback__["b" /* fetchUserList */])(searchText, pageNumber, size);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["l"] = getUsersList;


/**
 * Get Profile Status List
 * @example SDK.getStatusList();
 * @returns {Array} Success/Error Response. Data with the status list
 */
const getStatusList = async () => {
  try {
    const allStatus = await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_statusTable__["d" /* readAllStatuses */])();
    let profileStatus = allStatus.filter(item => item.type == 'profile status');
    return profileStatus.map(item => item.status);
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = getStatusList;


/**
 * Create Profile Status
 * @example SDK.addProfileStatus();
 * @param {String} status.
 */
const addProfileStatus = async status => {
  const _id = Date.now().toString(),
        type = 'profile status';
  await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_statusTable__["a" /* createStatus */])(_id, type, status);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = addProfileStatus;


const deleteProfileStatus = async status => {
  const allStatus = await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_statusTable__["d" /* readAllStatuses */])();
  let profileStatus = allStatus.filter(item => item.status == status);
  await Object(__WEBPACK_IMPORTED_MODULE_8__db_controllers_statusTable__["c" /* deleteStatus */])(profileStatus[0]._id);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = deleteProfileStatus;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var HashBase = __webpack_require__(115)
var Buffer = __webpack_require__(2).Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).



var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(33).codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(3).Buffer
var inherits = __webpack_require__(0)
var HashBase = __webpack_require__(115)

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(228)
exports.sha1 = __webpack_require__(229)
exports.sha224 = __webpack_require__(230)
exports.sha256 = __webpack_require__(122)
exports.sha384 = __webpack_require__(231)
exports.sha512 = __webpack_require__(123)


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/*<replacement>*/
var processNextTick = __webpack_require__(79);
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(3).Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(0);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(75)
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(58);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(23).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(28);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // create the two objects needed to store the corked requests
  // they are not a linked list, as no new elements are inserted in there
  this.corkedRequestsFree = new CorkedRequest(this);
  this.corkedRequestsFree.next = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || __webpack_require__(28);

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    state.corkedRequestsFree = holder.next;
    holder.next = null;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(234).setImmediate))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(28);

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(0);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(11);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
  this.padding = options.padding !== false
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(247)
var deciphers = __webpack_require__(255)
var modes = __webpack_require__(139)

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(248),
  CBC: __webpack_require__(249),
  CFB: __webpack_require__(250),
  CFB8: __webpack_require__(251),
  CFB1: __webpack_require__(252),
  OFB: __webpack_require__(253),
  CTR: __webpack_require__(137),
  GCM: __webpack_require__(137)
}

var modes = __webpack_require__(139)

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(259);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).



var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(36).codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(272)
var randomBytes = __webpack_require__(32)

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(274).version;
elliptic.utils = __webpack_require__(12);
elliptic.rand = __webpack_require__(85);
elliptic.curve = __webpack_require__(151);
elliptic.curves = __webpack_require__(90);

// Protocols
elliptic.ec = __webpack_require__(285);
elliptic.eddsa = __webpack_require__(289);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(91);
var curve = __webpack_require__(151);
var utils = __webpack_require__(12);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = __webpack_require__(284);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(16);
hash.common = __webpack_require__(50);
hash.sha = __webpack_require__(278);
hash.ripemd = __webpack_require__(282);
hash.hmac = __webpack_require__(283);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Reporter = __webpack_require__(94).Reporter;
const EncoderBuffer = __webpack_require__(51).EncoderBuffer;
const DecoderBuffer = __webpack_require__(51).DecoderBuffer;
const assert = __webpack_require__(11);

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__strophe_handler__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__strophe__ = __webpack_require__(386);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_call_initialize__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__feedback__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__db_controllers_statusTable__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__modules_app_reconnect__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__modules_call_config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__db_realmDB__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__db_controllers_ConfigCredentialsTable__ = __webpack_require__(199);
// migration done (14-12-21)




















const connectionStatus = {
  _isConnected: false,
  get isConnected() {
    return this._isConnected;
  },
  set isConnected(value) {
    this._isConnected = value;
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = connectionStatus;


/**
 * Connection handler for login status and adds handler to Strophe Connection
 * @param {any} connStatus
 * @param {any} callback
 * @returns callback method
 */
const connectionHandler = async (connStatus, callback, connObj) => {
  const callbacks = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["a" /* callbackListeners */])();
  switch (connStatus) {
    case Strophe.Status.AUTHFAIL:
      connectionStatus.isConnected = false;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["y" /* isActiveConnectionId */])(connObj.options.connectionId)) return;
      callbacks.connectionListener({ status: 'AUTHENTICATIONFAILED' });
      Object(__WEBPACK_IMPORTED_MODULE_15__modules_call_config__["s" /* setIsUserOnline */])(false);
      callback(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(422, __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["W" /* INVALID_CREDENTIALS */]));
      break;

    case Strophe.Status.CONNFAIL:
      connectionStatus.isConnected = false;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["y" /* isActiveConnectionId */])(connObj.options.connectionId)) return;
      callbacks.connectionListener({ status: 'CONNECTIONFAILED' });
      Object(__WEBPACK_IMPORTED_MODULE_15__modules_call_config__["s" /* setIsUserOnline */])(false);
      callback(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(500, 'connectionFailed'));
      break;

    case Strophe.Status.CONNTIMEOUT:
      connectionStatus.isConnected = false;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["y" /* isActiveConnectionId */])(connObj.options.connectionId)) return;
      callbacks.connectionListener({ status: 'CONNECTIONTIMEOUT' });
      Object(__WEBPACK_IMPORTED_MODULE_15__modules_call_config__["s" /* setIsUserOnline */])(false);
      callback(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["C" /* timeoutErrorResponse */])('connectionTimeout'));
      break;

    case Strophe.Status.ERROR:
      connectionStatus.isConnected = false;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["y" /* isActiveConnectionId */])(connObj.options.connectionId)) return;
      callbacks.connectionListener({ status: 'ERROROCCURED' });
      Object(__WEBPACK_IMPORTED_MODULE_15__modules_call_config__["s" /* setIsUserOnline */])(false);
      callback(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["b" /* connectionErrorResponse */])());
      break;

    case Strophe.Status.DISCONNECTED:
      connectionStatus.isConnected = false;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["y" /* isActiveConnectionId */])(connObj.options.connectionId)) return;
      callbacks.connectionListener({ status: 'DISCONNECTED' });
      // setIsUserOnline(false);
      Object(__WEBPACK_IMPORTED_MODULE_13__modules_app_reconnect__["a" /* reconnect */])();
      break;

    case Strophe.Status.CONNECTED:
      connectionStatus.isConnected = true;
      // Add handlers in order to get callback listeners response
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["f" /* presenceHandler */], null, 'presence', null);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["h" /* streamHandler */], null, 'failure', null);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["e" /* pingHandler */], __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_36" /* NS_PING */], 'iq', __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_62" /* TYPE_GET */]);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["i" /* userProfileHandler */], __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_40" /* NS_VCARD */], 'iq', __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_63" /* TYPE_RESULT */]);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["a" /* blockUserHandler */], __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_29" /* NS_BLOCKING */], 'iq', __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_64" /* TYPE_SET */]);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["c" /* messageHandler */], null, 'message', null, null, null);
      connObj.addHandler(__WEBPACK_IMPORTED_MODULE_2__strophe_handler__["b" /* friendsListHandler */], Strophe.NS.ROSTER, 'iq', __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_63" /* TYPE_RESULT */]);
      connObj.send($pres().c('priority').t('1'));
      Object(__WEBPACK_IMPORTED_MODULE_15__modules_call_config__["s" /* setIsUserOnline */])(true);
      Object(__WEBPACK_IMPORTED_MODULE_3__strophe__["a" /* carbonEnable */])();
      // await initializeDatabase();
      callbacks.connectionListener({ status: 'CONNECTED' });
      callback(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["B" /* successResponse */])('Login Success'));
      // processing the failed stanzas in setTimeout to avoid blocking the ongoing actions
      setTimeout(() => {
        Object(__WEBPACK_IMPORTED_MODULE_4__helpers_localDb__["e" /* processFailedStanzas */])();
      }, 0);
      break;

    default:
      break;
  }
};

/**
 * Internal methods to handle Strophe Login
 * @param {String} username
 * @param {String} password
 * @param {any} callback
 */
const chatConnect = async (username, password, callback) => {
  const resourceId = await __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage___default.a.getItem('resourceId', resourceId);
  Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["A" /* setActiveConnectionId */])(resourceId);
  const userJid = `${username}@${Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["e" /* getServer */])()}/Mobile-${resourceId}`;
  const connObj = Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["b" /* getConnection */])();
  connObj.connect(userJid, password, connStatus => {
    connectionHandler(connStatus, callback, connObj);
  });
};

/**
 * SDK Login and handles callback listeners
 * @param {String} username
 * @param {String} password
 */
const login = async (username, password, forceLogin) => new Promise((resolve, reject) => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
    key: 'username',
    value: username,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }, {
    key: 'password',
    value: password,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }]);
  if (response.statusCode === 200) {
    if (!forceLogin && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])() && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])().connected && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])().authenticated) {
      resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(409, 'Already Logged In'));
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["A" /* setActiveConnectionId */])(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["x" /* randomString */])(16, 'BA'));
      Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["a" /* disconnect */])();
      chatConnect(username, password, obj => {
        if (obj.statusCode === 200) Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["D" /* setCredentials */])(username, password);
        resolve(obj);
      });
    }
  } else {
    reject(response);
  }
});
/* harmony export (immutable) */ __webpack_exports__["c"] = login;


/**
 * SDK connect and handles callback listeners
 * @param {String} username
 * @param {String} password
 */
const connect = async (username, password, forceLogin) => new Promise(async resolve => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
    key: 'username',
    value: username,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }, {
    key: 'password',
    value: password,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }]);
  if (response.statusCode === 200) {
    const passwordJson = {
      password: password,
      currentTimestamp: Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["t" /* getUTCTimestamp */])()
    };
    let cypherText = '';
    if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["z" /* isSandboxMode */])()) {
      cypherText = password;
    } else {
      cypherText = Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["h" /* encryptAPIData */])(JSON.stringify(passwordJson), Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["h" /* getEncryptLicenseKey */])());
    }
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["d" /* getApiEndPoints */])();
    const inputData = {
      username: username,
      password: cypherText,
      type: __WEBPACK_IMPORTED_MODULE_10_react_native__["Platform"].OS
    };
    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_7__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.login, inputData, '', '');
    if (apiResponse.status === 200) {
      Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["z" /* setUserToken */])(apiResponse.data.token);
      const configResponse = await Object(__WEBPACK_IMPORTED_MODULE_9__feedback__["a" /* fetchAndConfigureServerDetails */])(username);
      if (configResponse.statusCode === 200) {
        if (!forceLogin && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])() && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])().connected && Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["c" /* getConnectionObj */])().authenticated) {
          resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(409, 'Already Logged In'));
        } else {
          Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["A" /* setActiveConnectionId */])(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["x" /* randomString */])(16, 'BA'));
          Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["a" /* disconnect */])();
          chatConnect(username, cypherText, async obj => {
            if (obj.statusCode === 200) Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["D" /* setCredentials */])(username, password);
            resolve(obj);
          });
        }
      } else {
        resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["b" /* connectionErrorResponse */])());
      }
    } else {
      if (apiResponse.status === 403) {
        resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["j" /* errorResponse */])(apiResponse.message, 403));
      } else {
        resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["j" /* errorResponse */])(apiResponse.message));
      }
    }
  } else {
    resolve(response);
  }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = connect;


/**
 * SDK Register Method
 * @param {String} userIdentifier
 */
const register = async (userIdentifier, fcmtoken, voipDeviceToken, mode) => new Promise(async resolve => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
    key: 'userIdentifier',
    value: userIdentifier,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }]);

  if (response.statusCode === 200) {
    const licenseKey = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["n" /* getLicenseKey */])(),
          apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["d" /* getApiEndPoints */])(),
          decryptKey = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["h" /* getEncryptLicenseKey */])();
    const resourceId = Date.now().toString();
    __WEBPACK_IMPORTED_MODULE_12__react_native_async_storage_async_storage___default.a.setItem('resourceId', resourceId);
    let API_URL = '',
        inputData = {};

    if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["z" /* isSandboxMode */])()) {
      API_URL = apiEndPoints.sandboxRegister;
      inputData = {
        deviceType: __WEBPACK_IMPORTED_MODULE_10_react_native__["Platform"].OS,
        deviceId: resourceId,
        mobileNumber: userIdentifier,
        voipDeviceToken: voipDeviceToken,
        mode: mode ? 0 : 1,
        deviceToken: fcmtoken,
        licenseKey,
        userIdentifier
      };
      if (fcmtoken) inputData.pushServerType = 'fcm';
      console.log('inputData isSandboxMode()', Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["z" /* isSandboxMode */])(), JSON.stringify(inputData, null, 2));
    } else {
      API_URL = apiEndPoints.register;
      const inputObj = {
        deviceType: __WEBPACK_IMPORTED_MODULE_10_react_native__["Platform"].OS,
        deviceId: resourceId,
        deviceToken: fcmtoken,
        mode: mode ? 0 : 1,
        voipDeviceToken: voipDeviceToken,
        userIdentifier,
        licenseKey
      };
      if (fcmtoken) inputObj.pushServerType = 'fcm';
      console.log('inputObj isSandboxMode()', Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["z" /* isSandboxMode */])(), JSON.stringify(inputObj, null, 2));
      const cypherText = Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["h" /* encryptAPIData */])(JSON.stringify(inputObj), decryptKey);
      inputData = {
        registerData: cypherText
      };
    }
    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_7__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_15" /* METHOD_POST */], API_URL, inputData, '', false, '');

    if (apiResponse && apiResponse.status === 200) {
      await Object(__WEBPACK_IMPORTED_MODULE_14__db_Utils__["d" /* dbRegisterClear */])(userIdentifier);
      const decryptedMsg = Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["e" /* decryptAPIData */])(apiResponse.data, decryptKey);

      var _JSON$parse = JSON.parse(decryptedMsg);

      const username = _JSON$parse.username,
            password = _JSON$parse.password,
            token = _JSON$parse.token,
            isProfileUpdated = _JSON$parse.isProfileUpdated;
      var _JSON$parse$config = _JSON$parse.config;
      const config = _JSON$parse$config === undefined ? {} : _JSON$parse$config;

      Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["D" /* setCredentials */])(username, password);
      const configuration = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["f" /* getConfiguration */])();
      if (config && Object.keys(config).length > 0 && configuration.XMPP_SERVER_HOST === '') {
        var _config$xmppHost = config.xmppHost;
        const xmppHost = _config$xmppHost === undefined ? '' : _config$xmppHost;
        var _config$xmppPortWeb = config.xmppPortWeb;
        const xmppPortWeb = _config$xmppPortWeb === undefined ? '' : _config$xmppPortWeb;
        var _config$signalServerD = config.signalServerDomain;
        const signalServerDomain = _config$signalServerD === undefined ? '' : _config$signalServerD;
        var _config$callRoutingSe = config.callRoutingServer;
        const callRoutingServer = _config$callRoutingSe === undefined ? '' : _config$callRoutingSe;
        var _config$iv = config.iv;
        const iv = _config$iv === undefined ? '' : _config$iv;
        var _config$ivProfile = config.ivProfile;
        const ivProfile = _config$ivProfile === undefined ? '' : _config$ivProfile;
        var _config$stuns = config.stuns;
        const stuns = _config$stuns === undefined ? [] : _config$stuns;
        var _config$turns = config.turns;
        const turns = _config$turns === undefined ? [] : _config$turns;


        const realm = await Object(__WEBPACK_IMPORTED_MODULE_16__db_realmDB__["a" /* getRealmDB */])();
        const params = {
          key: 'ConfigCredentials',
          value: JSON.stringify(config)
        };
        Object(__WEBPACK_IMPORTED_MODULE_17__db_controllers_ConfigCredentialsTable__["a" /* createConfigCredentialsTable */])(realm, params);

        if (xmppHost !== '' && xmppPortWeb !== '') Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["C" /* setConfiguration */])(xmppHost, xmppPortWeb, true);
        if (signalServerDomain !== '') {
          Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["J" /* setSignalServerUrl */])(signalServerDomain);
          await Object(__WEBPACK_IMPORTED_MODULE_8__modules_call_initialize__["m" /* initializeCall */])(signalServerDomain);
        }
        if (callRoutingServer !== '') Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["G" /* setJanusUrl */])(callRoutingServer);
        if (iv !== '') Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["E" /* setIv */])(iv);
        if (ivProfile !== '') Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["F" /* setIvProfile */])(ivProfile);
        if (turns && turns.length > 0 || stuns && stuns.length > 0) {
          const urls = [];
          if (stuns && stuns.length > 0) {
            stuns.forEach(stun => {
              urls.push({ urls: stun });
            });
          }
          if (turns && turns.length > 0) {
            turns.forEach(turn => {
              urls.push({
                urls: turn.turn,
                username: turn.username,
                credential: turn.password
              });
            });
          }
          Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["K" /* setStunTurnServerUrl */])(urls);
        }
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["I" /* setPingPongTime */])(60);
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["H" /* setMaxUsersOfCall */])(8);
        if (callRoutingServer !== '') Object(__WEBPACK_IMPORTED_MODULE_8__modules_call_initialize__["n" /* initializeJanus */])(callRoutingServer, Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["s" /* getStunTurnServerUrl */])());
      }
      await Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["z" /* setUserToken */])(token);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["B" /* successResponse */])();
      successRes.data = {
        username,
        password,
        isSandbox: Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["z" /* isSandboxMode */])(),
        isProfileUpdated
      };
      resolve(successRes);
    } else {
      resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(apiResponse.status, apiResponse.message || ''));
    }
  } else {
    resolve(response);
  }
});
/* harmony export (immutable) */ __webpack_exports__["e"] = register;


/**
 * SDK Contact Sync Method
 * @param {String} userIdentifier
 */
const syncContacts = async userIdentifier => new Promise(async resolve => {
  const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])([{
    key: 'userIdentifier',
    value: userIdentifier,
    rules: __WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_50" /* REQUIRED */]
  }]);

  if (response.statusCode === 200) {
    const licenseKey = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["n" /* getLicenseKey */])(),
          apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["d" /* getApiEndPoints */])();

    const API_URL = apiEndPoints.sandboxContactSync,
          inputData = {
      username: userIdentifier,
      licenseKey
    };

    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_7__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_6__helpers_constants__["_15" /* METHOD_POST */], API_URL, inputData, '', false, '');
    if (apiResponse && apiResponse.status === 200) {
      return resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["B" /* successResponse */])());
    }
    return resolve(Object(__WEBPACK_IMPORTED_MODULE_5__helpers_utils__["c" /* customResponse */])(apiResponse.status, apiResponse.message || ''));
  }
  return resolve(response);
});
/* harmony export (immutable) */ __webpack_exports__["f"] = syncContacts;


/**
 * Logout - Disconnects the XMPP Connection
 */
const logout = async () => {
  await Object(__WEBPACK_IMPORTED_MODULE_11__db_controllers_statusTable__["b" /* deleteAllStatus */])();
  Promise.resolve(Object(__WEBPACK_IMPORTED_MODULE_0__strophe_connection__["a" /* disconnect */])());
};
/* harmony export (immutable) */ __webpack_exports__["d"] = logout;


/**
 * QR Code - Initiates the Listener for Socket
 */
// export const listenQrServer = (divId, logoId, signalServer, callback) => {
//   const socket = io.connect(signalServer);
//   socket.on("id", (socketId) => {
//     // updateQrCode(socketId, divId, logoId);
//   });

//   socket.on("response", async (credentials) => {
//     const userDetails = decryptMsg(credentials.id, getEncryptLicenseKey());
//     const userCredentials = JSON.parse(userDetails);
//     const { username, password, socketId } = userCredentials;
//     const response = await login(username, password);
//     let emitObj = {};
//     if (response.statusCode === 200) {
//       response.username = username;
//       response.password = password;
//       emitObj = successResponse("Login Success");
//     } else emitObj = errorResponse("Login Failed");
//     emitObj.public_key = socketId;
//     socket.emit("loginStatus", JSON.stringify(emitObj));
//     callback(response);
//   });

//   socket.on("logoutweb", () => {
//     const callbacks = callbackListeners();
//     callbacks.connectionListener();
//   });
// };

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_localDb__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__db_controllers_messageTable__ = __webpack_require__(38);
// migration done (14-12-21)







/**
 * Sends Message Stanza for sending Text Message to User with encrypted data
 * @param {String} toUserJid
 * @param {String} msgId
 * @param {String} msgType
 * @param {String} cypherText
 * @returns {Object} Success/Error Response
 */
const sendMessageIQ = (toUserJid, msgId, msgType, cypherText, mediaFileToken = '', thumbImage = '') => new Promise(async resolve => {
  try {
    const messageIQ = $msg({
      to: toUserJid,
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      id: msgId
    }).c('chatcontent', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_32" /* NS_CONTENT */],
      message_type: msgType,
      broadcast_id: ''
    }).up().c('body', {
      message_type: msgType
    }).t(cypherText);

    if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["b" /* getOnlineStatus */])()) {
      await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(messageIQ);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      if (mediaFileToken !== '') successRes.fileToken = mediaFileToken;
      if (thumbImage !== '') successRes.thumbImage = thumbImage;
      resolve(successRes);
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["a" /* addStanza */])(messageIQ.toString(), msgId, `${msgType}sendMessageIQ`);
      resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Network Error'));
    }
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["d"] = sendMessageIQ;


/**
 * Sends Delivery Status IQ to server When new message recieved
 * @param {String} toUserJid
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const sendDeliveredStatusIQ = (toUserJid, msgId, groupId = '') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) return resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());

  try {
    const deliveryIQ = $msg({
      to: toUserJid,
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, '#A')
    }).c('delivered', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_37" /* NS_RECEIPTS */],
      id: msgId,
      group_id: groupId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(deliveryIQ);
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])());
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = sendDeliveredStatusIQ;


/**
 * Sends Seen Status IQ to server when message is read
 * @param {String} toUserJid
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const sendSeenStatusIQ = (toUserJid, msgId, groupId = '') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) return resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());

  try {
    const seenIQ = $msg({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      to: toUserJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, '!A')
    }).c('seen', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_37" /* NS_RECEIPTS */],
      id: msgId,
      group_id: groupId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(seenIQ);
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])());
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["e"] = sendSeenStatusIQ;


/**
 * Sends Seen Status IQ to server when message is read
 * @param {String} msgIds
 * @param {String} toJid
 * @returns {Object} Success/Error Response
 */
const recallMessageIQ = (toJid, msgIds) => new Promise(async resolve => {
  try {
    const recallMsg = $msg({
      to: toJid,
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('recall', {
      id: msgIds,
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_37" /* NS_RECEIPTS */],
      chat_type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */]
    });
    if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["b" /* getOnlineStatus */])()) {
      await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(recallMsg);
      const successResp = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      resolve(successResp);
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["a" /* addStanza */])(recallMsg.toString(), toJid, 'recallMessageIQ');
      const successResp = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      resolve(successResp);
    }
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = recallMessageIQ;


/**
 * Sends Typing Status IQ to server
 * @param {String} toUserJid
 * @returns {Object} Success/Error Response
 */
const sendTypingStatusIQ = toUserJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) return resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());

  try {
    const typingIQ = $msg({
      to: toUserJid,
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('composing', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_31" /* NS_CHATSTATES */]
    }).c('no-store', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_34" /* NS_HINTS */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(typingIQ);
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])());
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["g"] = sendTypingStatusIQ;


/**
 * Sends Typing Gone Status IQ to server
 * @param {String} toUserJid
 * @returns {Object} Success/Error Response
 */
const sendTypingGoneStatusIQ = toUserJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) return resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());

  try {
    const typingGoneIQ = $msg({
      to: toUserJid,
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('gone', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_31" /* NS_CHATSTATES */]
    }).c('no-store', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_34" /* NS_HINTS */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(typingGoneIQ);
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])());
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["f"] = sendTypingGoneStatusIQ;


/**
 * Sends Get Group Chat IQ Request to Server
 * @param {String} groupJid
 * @param {String} position
 * @param {String} msgId
 * @param {Number} limit
 * @returns {Object} Success/Error Response
 */
const sendGroupMessageIQ = (groupJid, msgId, msgType, cypherText, mediaFileToken = '', thumbImage = '') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["b" /* getOnlineStatus */])() && Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) return resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());

  try {
    const groupMessageIQ = $msg({
      to: groupJid,
      type: 'normal',
      id: msgId
    }).c('subject').t(msgType).up().c('body').t(cypherText);

    if (Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["b" /* getOnlineStatus */])()) {
      await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupMessageIQ);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      if (mediaFileToken !== '') successRes.fileToken = mediaFileToken;
      if (thumbImage !== '') successRes.thumbImage = thumbImage;
      resolve(successRes);
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_3__helpers_localDb__["a" /* addStanza */])(groupMessageIQ.toString(), msgId, `${msgType}sendGroupMessageIQ`);
      resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])('Network Error'));
    }
  } catch (error) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
  }
});
/* harmony export (immutable) */ __webpack_exports__["c"] = sendGroupMessageIQ;


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_call_initialize__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__api__ = __webpack_require__(22);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };







/**
 * SDK Send Feedback Method
 * @param {String} title
 * @param {String} description
 */
const submitFeedback = async (title, description) => {
    const inputData = {
        "title": title,
        "description": description
    };
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
    const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.feedbackSubmit, inputData, token);
    if (apiResponse && apiResponse.status === 200) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["c" /* customResponse */])(apiResponse.status, apiResponse.message || "");
};
/* unused harmony export submitFeedback */


/**
 * SDK Submit Delete My Account Method
 * @param {String} reason
 * @param {String} feedback
 */
const submitDeleteMyAccount = async (reason, feedback) => {
    const inputData = {
        "reason": reason,
        "feedback": feedback
    };
    const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
    const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
    const apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_15" /* METHOD_POST */], apiEndPoints.deleteMyAccount, inputData, token);
    if (apiResponse && apiResponse.status === 200) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["c" /* customResponse */])(apiResponse.status, apiResponse.message || "");
};
/* unused harmony export submitDeleteMyAccount */


const fetchAndConfigureServerDetails = async username => {
    const config = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["f" /* getConfiguration */])();
    if (config.XMPP_SERVER_HOST === "") {
        const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
        const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
        const configApiResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_14" /* METHOD_GET */], apiEndPoints.getConfig, undefined, token, false);
        if (configApiResponse && configApiResponse.status === 200) {
            const decryptedConfig = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["e" /* decryptAPIData */])(configApiResponse.data, username + username + username);

            var _JSON$parse = JSON.parse(decryptedConfig);

            const xmppHost = _JSON$parse.xmppHost,
                  xmppPortWeb = _JSON$parse.xmppPortWeb,
                  signalServerDomain = _JSON$parse.signalServerDomain,
                  callRoutingServer = _JSON$parse.callRoutingServer,
                  iv = _JSON$parse.iv,
                  ivProfile = _JSON$parse.ivProfile;
            var _JSON$parse$stuns = _JSON$parse.stuns;
            const stuns = _JSON$parse$stuns === undefined ? [] : _JSON$parse$stuns;
            var _JSON$parse$turns = _JSON$parse.turns;
            const turns = _JSON$parse$turns === undefined ? [] : _JSON$parse$turns;

            if (xmppHost !== "" && xmppPortWeb !== "") Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["C" /* setConfiguration */])(xmppHost, xmppPortWeb, true);
            if (signalServerDomain !== "") {
                Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["J" /* setSignalServerUrl */])(signalServerDomain);
                await Object(__WEBPACK_IMPORTED_MODULE_3__modules_call_initialize__["m" /* initializeCall */])(signalServerDomain);
            }
            if (callRoutingServer !== "") Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["G" /* setJanusUrl */])(callRoutingServer);
            if (iv !== "") Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["E" /* setIv */])(iv);
            if (ivProfile !== "") Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["F" /* setIvProfile */])(ivProfile);
            if (turns && turns.length > 0 || stuns && stuns.length > 0) {
                const urls = [];
                if (stuns && stuns.length > 0) {
                    stuns.forEach(stun => {
                        urls.push({ urls: stun });
                    });
                }
                if (turns && turns.length > 0) {
                    turns.forEach(turn => {
                        urls.push({ urls: turn.turn, username: turn.username, credential: turn.password });
                    });
                }
                Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["K" /* setStunTurnServerUrl */])(urls);
            }
            Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["I" /* setPingPongTime */])(60);
            Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["H" /* setMaxUsersOfCall */])(8);
            if (callRoutingServer !== "") Object(__WEBPACK_IMPORTED_MODULE_3__modules_call_initialize__["n" /* initializeJanus */])(callRoutingServer, Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["s" /* getStunTurnServerUrl */])());
            return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
        }
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
};
/* harmony export (immutable) */ __webpack_exports__["a"] = fetchAndConfigureServerDetails;


const fetchUserList = async (searchText, page, limit) => {
    const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
    const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
    const userListApiResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_14" /* METHOD_GET */], `${apiEndpoints.userList}?name=${searchText}&page=${page}&size=${limit}`, undefined, token, false);
    if (userListApiResponse && userListApiResponse.status === 200) {
        const successResp = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
        let users = [];
        if (userListApiResponse.data.userList && userListApiResponse.data.userList.length > 0) {
            users = userListApiResponse.data.userList.map(user => {
                const data = {};
                data.image = user.image;
                data.isAdminBlocked = user.isAdminBlocked;
                data.status = user.status;
                data.name = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(user.nickName, user.userId);
                data.nickName = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(user.nickName, user.userId);
                data.email = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(user.email, user.userId);
                data.mobileNumber = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(user.mobileNumber, user.userId);
                const jid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["m" /* getJid */])(user.userId);
                data.userId = user.userId;
                data.userJid = jid.statusCode === 200 ? jid.userJid : user.userId;
                return data;
            });
        }
        successResp.users = users;
        successResp.totalPages = userListApiResponse.data.totalPages;
        successResp.totalUsers = userListApiResponse.data.totalRecords;
        return successResp;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(userListApiResponse.message);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = fetchUserList;


const fetchVcard = async userId => {
    try {
        const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
        const apiEndPoints = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["d" /* getApiEndPoints */])();
        const token = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["v" /* getUserToken */])();
        const getvcardApiResponse = await Object(__WEBPACK_IMPORTED_MODULE_4__api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_1__helpers_constants__["_14" /* METHOD_GET */], apiEndPoints.getVcard + "?userId=" + userId, undefined, token, false);
        if (getvcardApiResponse && getvcardApiResponse.status === 200) {
            const item = _extends({}, getvcardApiResponse.data, {
                email: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(getvcardApiResponse.data.email, userId),
                mobileNumber: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(getvcardApiResponse.data.mobileNumber, userId),
                nickName: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["g" /* decryptProfileDetails */])(getvcardApiResponse.data.nickName, userId),
                fromUser: userId,
                userJid: userId
            });
            userId === Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["v" /* getloggedinUserJid */])() && Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["L" /* setUserProfile */])(item);
            response.data = item;
            return response;
        } else if (getvcardApiResponse && getvcardApiResponse.status === 204) {
            return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["c" /* customResponse */])(400, "User not available");
        }
        return Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(getvcardApiResponse.message);
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(error);
    }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = fetchVcard;


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transitional_js__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_toFormData_js__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_toURLEncodedForm_js__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__platform_index_js__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__helpers_formDataToJSON_js__ = __webpack_require__(174);










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: __WEBPACK_IMPORTED_MODULE_2__transitional_js__["a" /* default */],

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isObject(data);

    if (isObjectPayload && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFormData(data);

    if (isFormData) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(Object(__WEBPACK_IMPORTED_MODULE_6__helpers_formDataToJSON_js__["a" /* default */])(data)) : data;
    }

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArrayBuffer(data) ||
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isBuffer(data) ||
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isStream(data) ||
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFile(data) ||
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isBlob(data)
    ) {
      return data;
    }
    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return Object(__WEBPACK_IMPORTED_MODULE_4__helpers_toURLEncodedForm_js__["a" /* default */])(data, this.formSerializer).toString();
      }

      if ((isFileList = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_toFormData_js__["a" /* default */])(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].from(e, __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: __WEBPACK_IMPORTED_MODULE_5__platform_index_js__["a" /* default */].classes.FormData,
    Blob: __WEBPACK_IMPORTED_MODULE_5__platform_index_js__["a" /* default */].classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ __webpack_exports__["a"] = (defaults);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(345)('socket.io-parser');
var Emitter = __webpack_require__(43);
var binary = __webpack_require__(348);
var isArray = __webpack_require__(181);
var isBuf = __webpack_require__(182);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    if (this.reconstructor) {
      throw new Error("got plaintext data when reconstructing a packet");
    }
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var start = i + 1;
    while (str.charAt(++i) !== '-' && i != str.length) {}
    var buf = str.substring(start, i);
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      if (i === str.length) break;
    }
    p.nsp = str.substring(start, i);
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    var start = i + 1;
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      if (i === str.length) break;
    }
    p.id = Number(str.substring(start, i + 1));
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(351);
var globalThis = __webpack_require__(102);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};


/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = (function () {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')(); // eslint-disable-line no-new-func
  }
})();


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(44);
var Emitter = __webpack_require__(43);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__callLogs__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__callSwitch__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__janus_index__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__helpers_utils__ = __webpack_require__(1);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };












const joinRoom = (roomId, data) => {
    const joinRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["o" /* joinCallRequestCallback */])();
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_1__config__["e" /* getCallInfo */])();
    const isAudioMute = callInfo.isAudioMute,
          isVideoMute = callInfo.isVideoMute;

    Object(__WEBPACK_IMPORTED_MODULE_8__janus_index__["f" /* joinRoom */])(roomId, async joinRoomResponse => {
        if (joinRoomResponse) {
            Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
                [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_1__config__["i" /* getLocalUserFilterValue */])(),
                status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */],
                audioMuted: isAudioMute,
                videoMuted: isVideoMute
            });
            const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_0__constants__["_22" /* SUCCESS_CODE */], __WEBPACK_IMPORTED_MODULE_0__constants__["_23" /* SUCCESS_MESSAGE */]);
            joinRoomRequestListener(customRes, null);
            data && Array.isArray(data.peers) && data.peers.map(peer => {
                Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
                    userJid: peer.jid,
                    status: peer.status,
                    userDetails: peer.userDetails,
                    audioMuted: peer.isAudioMute,
                    videoMuted: peer.isVideoMute
                });
            });
        } else {
            const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_0__constants__["_13" /* INTERNAL_SERVER_ERROR_CODE */], __WEBPACK_IMPORTED_MODULE_0__constants__["_12" /* INTERNAL_SERVER_ERROR */]);
            joinRoomRequestListener(null, customRes);
        }
    });
};

const successOnJoinCallRequest = (data, localUserJid) => {
    Object(__WEBPACK_IMPORTED_MODULE_1__config__["t" /* setJoinCallRequest */])(null);
    Object(__WEBPACK_IMPORTED_MODULE_1__config__["x" /* setSubscribeCallRequest */])(null);
    Object(__WEBPACK_IMPORTED_MODULE_1__config__["q" /* setCallInfo */])({
        roomLink: data.roomLink
    });
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_1__config__["e" /* getCallInfo */])();
    const isAudioMute = callInfo.isAudioMute,
          isVideoMute = callInfo.isVideoMute;

    Object(__WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_0__constants__["I" /* CALL_STATUS_ATTENDED */]);
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_1__config__["i" /* getLocalUserFilterValue */])(),
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */]
    });
    const joinRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["o" /* joinCallRequestCallback */])();
    Object(__WEBPACK_IMPORTED_MODULE_8__janus_index__["a" /* attachPlugin */])(localUserJid, isAudioMute, isVideoMute, () => {
        const roomId = callInfo.roomId;
        var _callInfo$behaviour = callInfo.behaviour;
        const behaviour = _callInfo$behaviour === undefined ? "call" : _callInfo$behaviour;

        if (behaviour === "meet") {
            Object(__WEBPACK_IMPORTED_MODULE_8__janus_index__["c" /* createRoom */])(roomId, createRoomResponse => {
                if (createRoomResponse) {
                    joinRoom(roomId, data);
                }
            });
        } else {
            joinRoom(roomId, data);
        }
    }, error => {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["n" /* joinCallRequest */])()) {
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["x" /* exit */])();
            const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_0__constants__["_13" /* INTERNAL_SERVER_ERROR_CODE */], __WEBPACK_IMPORTED_MODULE_0__constants__["_12" /* INTERNAL_SERVER_ERROR */]);
            joinRoomRequestListener(null, customRes);
        }
    });
};

/**
 * Method to handle room created response process
 * @param {object} data - response data
 */
const roomCreatedCallback = async data => {
    const localUserJid = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["e" /* getCallLocalUserJid */])();
    if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["n" /* joinCallRequest */])()) {
        successOnJoinCallRequest(data, localUserJid);
    } else {
        const incomingCallObj = _extends({}, __WEBPACK_IMPORTED_MODULE_4__call__["p" /* _sdk_incomingCallObj */]);
        const userJid = data.jid;
        const fromUserJid = incomingCallObj.userJid;
        const roomLink = data.roomLink;

        if (userJid && incomingCallObj.status === __WEBPACK_IMPORTED_MODULE_0__constants__["K" /* CALL_STATUS_CALLING */] && userJid === localUserJid && fromUserJid && fromUserJid !== localUserJid) {
            incomingCallObj.roomId = data.room;
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["y" /* exitRoom */])({
                roomId: data.room,
                callType: incomingCallObj.callType
            });
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["D" /* setIncomingCallObj */])();
        } else {
            Object(__WEBPACK_IMPORTED_MODULE_1__config__["q" /* setCallInfo */])({
                roomLink
            });
            const callingObj = Object(__WEBPACK_IMPORTED_MODULE_1__config__["f" /* getCallingObject */])();
            callingObj.roomLink = roomLink;
            const sendCallRes = await Object(__WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__["d" /* sendCalling */])(callingObj);
            if (sendCallRes && sendCallRes.statusCode !== 200) {
                Object(__WEBPACK_IMPORTED_MODULE_4__call__["x" /* exit */])();
            }
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["m"] = roomCreatedCallback;


const roomJoinedCallback = async data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["p" /* isRoomMatch */])(data.room)) return undefined;
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        userJid: data.jid,
        audioMuted: data.isAudioMute,
        videoMuted: data.isVideoMute,
        userDetails: data.userDetails
    });
    const dataToClient = {
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        userJid: data.jid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["Y" /* CALL_STATUS_USER_STATUS */],
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
};
/* harmony export (immutable) */ __webpack_exports__["p"] = roomJoinedCallback;


/**
 * Method to handle room join response process
 * @param {object} data - response data
 */
const roomJoinCallback = async data => {
    const userJid = data.jid;
    const callInfo = Object(__WEBPACK_IMPORTED_MODULE_1__config__["e" /* getCallInfo */])();
    const localUserJid = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["e" /* getCallLocalUserJid */])();
    if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["n" /* joinCallRequest */])()) {
        successOnJoinCallRequest(data, localUserJid);
    } else {
        // When socketId change for this same user, need to join the new socket id to the room
        // At this time, this join will be called. But need to block the user from processing the further steps.
        // That's why, we check condition here, If received room & local room is same, then break the process.

        if (data.room === callInfo.roomId) {

            // Get current call users            
            // Compare it with the received peer            
            // If any user is not having data in peers array, then we need to trigger the call ended status

            const callUserDiffer = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])().filter(user => !data.peers.some(peer => user.userJid === peer.jid) && user.userJid !== localUserJid);

            if (callUserDiffer.length > 0) {
                callUserDiffer.forEach(obj => handleEndedMsg({
                    room: callInfo.roomId,
                    type: __WEBPACK_IMPORTED_MODULE_0__constants__["O" /* CALL_STATUS_ENDED */],
                    payload: {
                        userJid: obj.userJid
                    }
                }));
            }
            data && Array.isArray(data.peers) && data.peers.map(peer => {
                if (userJid !== localUserJid) {
                    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
                        userJid: peer.jid,
                        audioMuted: peer.isAudioMute,
                        videoMuted: peer.isVideoMute,
                        userDetails: peer.userDetails
                    });
                    const dataToClient = {
                        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
                        userJid: peer.jid,
                        status: __WEBPACK_IMPORTED_MODULE_0__constants__["Y" /* CALL_STATUS_USER_STATUS */],
                        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
                    };
                    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
                }
            });
            return;
        }
        const incomingCallObj = _extends({}, __WEBPACK_IMPORTED_MODULE_4__call__["p" /* _sdk_incomingCallObj */]);
        // Check user is in already in call in the same room in different device
        // Due to CARBON call delay, apply the below logic
        let isLocalUserOnCallDiffDevice = false;
        data && Array.isArray(data.peers) && data.peers.map(peer => {
            const userJid = peer.jid;
            if (!isLocalUserOnCallDiffDevice && userJid === localUserJid && peer.status === __WEBPACK_IMPORTED_MODULE_0__constants__["I" /* CALL_STATUS_ATTENDED */]) {
                isLocalUserOnCallDiffDevice = true;
            }
        });
        if (isLocalUserOnCallDiffDevice) {
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["y" /* exitRoom */])({
                roomId: data.room
            });
            return;
        }
        const isLocalUserOnCall = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["u" /* isUserOnCall */])();
        // Check If user is already on call, then send ENGAGED status back to called user
        if (isLocalUserOnCall) {
            incomingCallObj.roomId = data.room;
            const callInfoObj = {
                roomId: data.room,
                callType: incomingCallObj.callType,
                userCallId: Object(__WEBPACK_IMPORTED_MODULE_1__config__["d" /* generateLocalUserCallId */])()
            };
            Object(__WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_0__constants__["P" /* CALL_STATUS_ENGAGED */], callInfoObj);
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["y" /* exitRoom */])({
                roomId: data.room
            });
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["y" /* sendMissedCallDataToClient */])(incomingCallObj);
            __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].insert({
                callState: __WEBPACK_IMPORTED_MODULE_0__constants__["h" /* CALL_LOG_MISSED_CALL_STATE */],
                fromUser: incomingCallObj.userJid,
                userList: incomingCallObj.toUsers,
                callType: incomingCallObj.callType,
                roomId: incomingCallObj.roomId,
                groupId: incomingCallObj.groupId,
                callMode: incomingCallObj.groupId !== null && incomingCallObj.groupId !== "" || incomingCallObj.toUsers.length > 1 ? "onetomany" : "onetoone"
            });
            return;
        }
        const joinUserJid = data.jid;
        const fromUserJid = incomingCallObj.userJid;
        if (joinUserJid && incomingCallObj.status === __WEBPACK_IMPORTED_MODULE_0__constants__["K" /* CALL_STATUS_CALLING */] && joinUserJid === localUserJid && fromUserJid && fromUserJid !== localUserJid) {
            await Object(__WEBPACK_IMPORTED_MODULE_2__functions__["w" /* resetCallData */])();
            const localUserCallId = Object(__WEBPACK_IMPORTED_MODULE_1__config__["d" /* generateLocalUserCallId */])();
            Object(__WEBPACK_IMPORTED_MODULE_1__config__["v" /* setLocalUserCallId */])(localUserCallId);
            incomingCallObj.roomLink = data.roomLink;
            incomingCallObj.userDetails = data.userDetails;
            Object(__WEBPACK_IMPORTED_MODULE_1__config__["q" /* setCallInfo */])(incomingCallObj);
            incomingCallObj.toUsers && Array.isArray(incomingCallObj.toUsers) && incomingCallObj.toUsers.map(userJid => {
                const callUserObj = {};
                callUserObj["userJid"] = userJid;
                if (userJid === localUserJid) {
                    callUserObj["socketId"] = Object(__WEBPACK_IMPORTED_MODULE_1__config__["k" /* getSocketId */])();
                    callUserObj["userCallId"] = localUserCallId;
                    callUserObj["localUser"] = true;
                    callUserObj["status"] = __WEBPACK_IMPORTED_MODULE_0__constants__["L" /* CALL_STATUS_CONNECTED */];
                    callUserObj["userDetails"] = data.userDetails;
                } else {
                    callUserObj["localUser"] = false;
                    callUserObj["status"] = __WEBPACK_IMPORTED_MODULE_0__constants__["K" /* CALL_STATUS_CALLING */];
                }
                Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])(callUserObj);
                Object(__WEBPACK_IMPORTED_MODULE_4__call__["C" /* removeUserInCallingStateAfterTimout */])(userJid);
            });
            data && Array.isArray(data.peers) && data.peers.map(peer => {
                Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
                    userJid: peer.jid,
                    status: peer.status,
                    userDetails: peer.userDetails,
                    audioMuted: peer.isAudioMute,
                    videoMuted: peer.isVideoMute
                });
            });
            // Set from user status
            Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
                userJid: incomingCallObj.userJid,
                callInitiator: true,
                status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */]
            });
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["c" /* _callReceived */])();
            incomingCallObj.usersStatus = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])();
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(incomingCallObj);
            Object(__WEBPACK_IMPORTED_MODULE_4__call__["E" /* startIncomingCallTimer */])();
            __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].insert({
                callState: __WEBPACK_IMPORTED_MODULE_0__constants__["h" /* CALL_LOG_MISSED_CALL_STATE */],
                fromUser: incomingCallObj.userJid,
                userList: incomingCallObj.toUsers,
                callMode: incomingCallObj.groupId !== null && incomingCallObj.groupId !== "" || incomingCallObj.toUsers.length > 1 ? "onetomany" : "onetoone"
            });
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["o"] = roomJoinCallback;


const handlePingMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["q" /* isUserAttendedCall */])()) return undefined;
    const filterVal = data.payload && data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]];
    const user = Object(__WEBPACK_IMPORTED_MODULE_7__users__["d" /* getCallUser */])(filterVal);
    // We should update the user status as CONNECTING, when user status is RINGING or CALLING
    // otherwise we shouldn't update the status. because status order is CALLING, RINGING, CONNECTING...
    // when status is gone beyond the CONNECTING state, we should prevent updating CONNECTING status.
    if (!filterVal || user && [__WEBPACK_IMPORTED_MODULE_0__constants__["U" /* CALL_STATUS_RINGING */], __WEBPACK_IMPORTED_MODULE_0__constants__["K" /* CALL_STATUS_CALLING */]].indexOf(user.status) === -1) return undefined;

    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        userJid: data.payload.userJid,
        userCallId: data.payload.userCallId,
        audioMuted: data.payload.isAudioMute,
        videoMuted: data.payload.isVideoMute,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */]
    });
    const dataToClient = {
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        userJid: data.payload.userJid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */],
        sessionStatus: null,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
    return dataToClient;
};
/* harmony export (immutable) */ __webpack_exports__["i"] = handlePingMsg;


const handleEndedMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["p" /* isRoomMatch */])(data.room)) return undefined;

    const callStatus = data.type;
    const receivedFilterVal = data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]];
    const localUserFilterVal = Object(__WEBPACK_IMPORTED_MODULE_1__config__["i" /* getLocalUserFilterValue */])();
    const localUserCallInfo = Object(__WEBPACK_IMPORTED_MODULE_7__users__["d" /* getCallUser */])();
    let sessionStatus = null;
    let canSendLeftPayloadToUI = false;
    // CARBON copy call
    if (receivedFilterVal === localUserFilterVal) {
        sessionStatus = __WEBPACK_IMPORTED_MODULE_0__constants__["k" /* CALL_SESSION_STATUS_CLOSED */];
    } else {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])(data.payload.userJid)) {
            canSendLeftPayloadToUI = true;
        }

        Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
            userJid: data.payload.userJid,
            userCallId: data.payload.userCallId,
            status: callStatus
        });

        sessionStatus = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["f" /* getCallSessionStatus */])(receivedFilterVal);
        if (sessionStatus === __WEBPACK_IMPORTED_MODULE_0__constants__["k" /* CALL_SESSION_STATUS_CLOSED */]) {
            canSendLeftPayloadToUI = false;
        }
    }

    if (canSendLeftPayloadToUI) {
        const userLeftPayload = {
            userJid: data.payload.userJid,
            sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["_8" /* CALL_USER_LEFT */]
        };
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(userLeftPayload);
    }

    const dataToClient = {
        userJid: data.payload.userJid,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        status: callStatus,
        sessionStatus,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };

    if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["u" /* isUserOnCall */])() && localUserCallInfo.status != __WEBPACK_IMPORTED_MODULE_0__constants__["X" /* CALL_STATUS_SUBSCRIBED */]) {
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
        if (Object(__WEBPACK_IMPORTED_MODULE_4__call__["g" /* _getUserCallStatus */])(Object(__WEBPACK_IMPORTED_MODULE_2__functions__["e" /* getCallLocalUserJid */])()) === __WEBPACK_IMPORTED_MODULE_0__constants__["U" /* CALL_STATUS_RINGING */]) {
            const incomingCallObj = _extends({}, __WEBPACK_IMPORTED_MODULE_4__call__["p" /* _sdk_incomingCallObj */], {
                status: __WEBPACK_IMPORTED_MODULE_0__constants__["O" /* CALL_STATUS_ENDED */]
            });
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["y" /* sendMissedCallDataToClient */])(incomingCallObj);
        }
        Object(__WEBPACK_IMPORTED_MODULE_7__users__["b" /* deleteCallUser */])(data.payload.userJid, "userJid");
        if (data.type === __WEBPACK_IMPORTED_MODULE_0__constants__["O" /* CALL_STATUS_ENDED */]) {
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["b" /* clearReconnectInterval */])(receivedFilterVal);
        }
        __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].update({
            endTime: __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].getTime(),
            sessionStatus
        });
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["a" /* checkCallSessionStatus */])(sessionStatus);
    } else {
        Object(__WEBPACK_IMPORTED_MODULE_7__users__["b" /* deleteCallUser */])(data.payload.userJid, "userJid");
        const callUsersList = [];
        if (sessionStatus !== __WEBPACK_IMPORTED_MODULE_0__constants__["k" /* CALL_SESSION_STATUS_CLOSED */]) {
            const callUsers = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])();
            callUsers.forEach(user => {
                if (!user.localUser) {
                    callUsersList.push(user.userJid);
                }
            });
        }
        const usersListDataToClient = {
            sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["_6" /* CALL_USERS_UPDATE */],
            usersList: sessionStatus === __WEBPACK_IMPORTED_MODULE_0__constants__["k" /* CALL_SESSION_STATUS_CLOSED */] ? [] : callUsersList
        };
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(usersListDataToClient);
    }
    return dataToClient;
};
/* harmony export (immutable) */ __webpack_exports__["f"] = handleEndedMsg;


const handleReceivedMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["p" /* isRoomMatch */])(data.room)) return undefined;
    const curCallStatus = Object(__WEBPACK_IMPORTED_MODULE_4__call__["g" /* _getUserCallStatus */])(data.payload.userJid);
    if (curCallStatus === __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */] || curCallStatus === __WEBPACK_IMPORTED_MODULE_0__constants__["L" /* CALL_STATUS_CONNECTED */] || curCallStatus === __WEBPACK_IMPORTED_MODULE_0__constants__["I" /* CALL_STATUS_ATTENDED */]) {
        return undefined;
    }
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        socketId: data.from,
        userJid: data.payload.userJid,
        userCallId: data.payload.userCallId,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["U" /* CALL_STATUS_RINGING */]
    });
    // If the user is not call initiator, no need to send the received message to client side
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["r" /* isUserCallInitiator */])() && !Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) return undefined;
    const dataToClient = {
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        userJid: data.payload.userJid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["U" /* CALL_STATUS_RINGING */],
        sessionStatus: null,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
    return dataToClient;
};
/* harmony export (immutable) */ __webpack_exports__["j"] = handleReceivedMsg;


const handleAttendedMsg = data => {
    const receivedFilterVal = data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]];
    const localUserFilterVal = Object(__WEBPACK_IMPORTED_MODULE_1__config__["i" /* getLocalUserFilterValue */])();
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        userJid: data.payload.userJid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["I" /* CALL_STATUS_ATTENDED */]
    });
    const dataToClient = {
        userJid: data.payload.userJid,
        callType: data.payload.callType,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */],
        sessionStatus: null

        // CARBON copy call
    };if (receivedFilterVal === localUserFilterVal) {
        dataToClient['sessionStatus'] = __WEBPACK_IMPORTED_MODULE_0__constants__["k" /* CALL_SESSION_STATUS_CLOSED */];
        dataToClient['status'] = __WEBPACK_IMPORTED_MODULE_0__constants__["O" /* CALL_STATUS_ENDED */];
        dataToClient['carbonAttended'] = true;
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
        __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].update({
            endTime: __WEBPACK_IMPORTED_MODULE_5__callLogs__["a" /* _sdk_callLogs */].getTime(),
            sessionStatus: dataToClient['sessionStatus']
        });
    } else if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["r" /* isUserCallInitiator */])() || Object(__WEBPACK_IMPORTED_MODULE_2__functions__["q" /* isUserAttendedCall */])()) {
        Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
            socketId: data.from,
            userJid: data.payload.userJid,
            userCallId: data.payload.userCallId,
            status: __WEBPACK_IMPORTED_MODULE_0__constants__["M" /* CALL_STATUS_CONNECTING */]
        });

        if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) {
            dataToClient["usersStatus"] = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])();
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
            const localUserCallInfo = Object(__WEBPACK_IMPORTED_MODULE_7__users__["d" /* getCallUser */])();
            // Send the PING status with audio/video mute status
            Object(__WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_0__constants__["D" /* CALL_STATE_PING */], {
                payload: {
                    isAudioMute: localUserCallInfo.audioMuted,
                    isVideoMute: localUserCallInfo.videoMuted
                }
            });
        }
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["v" /* isUserSubscribedCall */])()) {
        const callUsersList = [];
        const callUsers = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])();
        callUsers.forEach(user => {
            if (!user.localUser) {
                callUsersList.push(user.userJid);
            }
        });
        const usersListDataToClient = {
            sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["_6" /* CALL_USERS_UPDATE */],
            usersList: callUsersList
        };
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(usersListDataToClient);
    }
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["a" /* checkCallSessionStatus */])(dataToClient.sessionStatus);
    return dataToClient;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = handleAttendedMsg;


const handleMuteStatusMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["p" /* isRoomMatch */])(data.room)) return undefined;
    const trackType = data.type === __WEBPACK_IMPORTED_MODULE_0__constants__["H" /* CALL_STATE_VIDEO_MUTE */] ? __WEBPACK_IMPORTED_MODULE_0__constants__["_5" /* CALL_TYPE_VIDEO */] : __WEBPACK_IMPORTED_MODULE_0__constants__["_4" /* CALL_TYPE_AUDIO */];
    const muteProperty = data.type === __WEBPACK_IMPORTED_MODULE_0__constants__["H" /* CALL_STATE_VIDEO_MUTE */] ? 'videoMuted' : 'audioMuted';
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]],
        [muteProperty]: data.payload.isMute
    });
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["u" /* isUserOnCall */])()) return undefined;
    const dataToClient = {
        userJid: data.payload.userJid,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["B" /* CALL_STATE_MUTE_STATUS */],
        isMuted: data.payload.isMute,
        trackType,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
    if (data.type === __WEBPACK_IMPORTED_MODULE_0__constants__["H" /* CALL_STATE_VIDEO_MUTE */]) {
        Object(__WEBPACK_IMPORTED_MODULE_1__config__["p" /* onetooneCallTypeUpdate */])();
    }
    return dataToClient;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = handleMuteStatusMsg;


const handleCallSwitch = async data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["q" /* isUserAttendedCall */])()) {
        return undefined;
    }
    if (data.payload.status === __WEBPACK_IMPORTED_MODULE_0__constants__["_2" /* CALL_SWITCH_REQUEST */]) {
        Object(__WEBPACK_IMPORTED_MODULE_6__callSwitch__["c" /* setCallSwitchInfo */])({
            userJid: data.payload.userJid,
            userCallId: data.payload.userCallId,
            status: data.payload.status,
            callerDevice: data.payload.callerDevice
        });
    }

    if (data.payload.status === __WEBPACK_IMPORTED_MODULE_0__constants__["Z" /* CALL_SWITCH_ACCEPT */]) {
        Object(__WEBPACK_IMPORTED_MODULE_6__callSwitch__["c" /* setCallSwitchInfo */])();
        Object(__WEBPACK_IMPORTED_MODULE_4__call__["v" /* callSwitchVideoUnmuteTransfer */])();
        Object(__WEBPACK_IMPORTED_MODULE_6__callSwitch__["b" /* callSwitchUserVideoUnmute */])();
    }

    if (data.payload.status === __WEBPACK_IMPORTED_MODULE_0__constants__["_1" /* CALL_SWITCH_DECLINE */]) {
        Object(__WEBPACK_IMPORTED_MODULE_6__callSwitch__["c" /* setCallSwitchInfo */])();
        Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
            [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_1__config__["i" /* getLocalUserFilterValue */])(),
            videoMuted: true
        });
        // Send the localuser mute status when remote user decline the call switch
        const muteDataToClient = {
            userJid: Object(__WEBPACK_IMPORTED_MODULE_2__functions__["e" /* getCallLocalUserJid */])(),
            sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["B" /* CALL_STATE_MUTE_STATUS */],
            trackType: __WEBPACK_IMPORTED_MODULE_0__constants__["_5" /* CALL_TYPE_VIDEO */],
            isMuted: true,
            usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
        };
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(muteDataToClient);
        Object(__WEBPACK_IMPORTED_MODULE_4__call__["o" /* _muteVideo */])(true);
    }
    const dataToClient = {
        userJid: data.payload.userJid,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["o" /* CALL_STATE_CALL_SWITCH */],
        status: data.payload.status,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
    return dataToClient;
};

const handleCallSwitchMsg = data => {
    data.payload['status'] = data.payload.isRequest ? __WEBPACK_IMPORTED_MODULE_0__constants__["_2" /* CALL_SWITCH_REQUEST */] : __WEBPACK_IMPORTED_MODULE_0__constants__["_0" /* CALL_SWITCH_CANCEL */];
    return handleCallSwitch(data);
};
/* harmony export (immutable) */ __webpack_exports__["d"] = handleCallSwitchMsg;


const handleCallSwitchResMsg = data => {
    data.payload['status'] = data.payload.isRequest ? __WEBPACK_IMPORTED_MODULE_0__constants__["Z" /* CALL_SWITCH_ACCEPT */] : __WEBPACK_IMPORTED_MODULE_0__constants__["_1" /* CALL_SWITCH_DECLINE */];
    return handleCallSwitch(data);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = handleCallSwitchResMsg;


const sendCallOnlineState = () => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) return;
    Object(__WEBPACK_IMPORTED_MODULE_3__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_0__constants__["F" /* CALL_STATE_USER_ONLINE */]);
};
/* unused harmony export sendCallOnlineState */


const handleOnlineStateMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) return;
    // Initailize the peer connection
    // initPeerConnection(data.payload[_SDK_USER_FILTER_KEY]);
};
/* harmony export (immutable) */ __webpack_exports__["h"] = handleOnlineStateMsg;


const handleUpdateSocketMsg = data => {
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]],
        socketId: data.from
    });
};
/* harmony export (immutable) */ __webpack_exports__["l"] = handleUpdateSocketMsg;


const handleSpeakingSocketMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) return;
    const speakingDataToClient = {
        fromJid: data.payload.userJid,
        userJid: data.payload.userJid,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["V" /* CALL_STATUS_SPEAKING */],
        volumeLevel: data.payload.volumeLevel,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(speakingDataToClient);
};
/* harmony export (immutable) */ __webpack_exports__["k"] = handleSpeakingSocketMsg;


const handleCallStatusMsg = data => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])()) return;
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: data.payload[__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]],
        status: data.payload.isHold ? __WEBPACK_IMPORTED_MODULE_0__constants__["Q" /* CALL_STATUS_HOLD */] : __WEBPACK_IMPORTED_MODULE_0__constants__["L" /* CALL_STATUS_CONNECTED */]
    });
    const holdDataToClient = {
        fromJid: data.payload.userJid,
        userJid: data.payload.userJid,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["n" /* CALL_STATE_CALL_STATUS */],
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["Q" /* CALL_STATUS_HOLD */],
        isHold: data.payload.isHold,
        usersStatus: Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])()
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(holdDataToClient);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = handleCallStatusMsg;


const roomSubscribedCallback = data => {
    const peers = data.peers,
          userDetails = data.userDetails,
          behaviour = data.behaviour;

    if (behaviour === "call" && peers.length <= 0) {
        //Need to exit. Call has been ended
        Object(__WEBPACK_IMPORTED_MODULE_4__call__["x" /* exit */])();
        if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["A" /* subscribeCallRequest */])()) {
            const subscribeRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["B" /* subscribeCallRequestCallback */])();
            const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_0__constants__["d" /* CALL_ALREADY_ENDED_CODE */], __WEBPACK_IMPORTED_MODULE_0__constants__["c" /* CALL_ALREADY_ENDED */]);
            subscribeRoomRequestListener(null, customRes);
        }
        return;
    }
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["f" /* setCallUsers */])();
    Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_1__config__["a" /* _SDK_USER_FILTER_KEY */]]: data.jid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["X" /* CALL_STATUS_SUBSCRIBED */],
        userDetails: userDetails
    });
    Array.isArray(peers) && peers.map(p => Object(__WEBPACK_IMPORTED_MODULE_7__users__["a" /* addOrUpdateCallUser */])({
        userJid: p.jid,
        status: p.status,
        userDetails: p.userDetails,
        audioMuted: p.isAudioMute,
        videoMuted: p.isVideoMute
    }));

    const callUsersList = [];
    const callUsers = Object(__WEBPACK_IMPORTED_MODULE_7__users__["e" /* getCallUsers */])();
    callUsers.forEach(user => {
        if (!user.localUser) {
            callUsersList.push(user.userJid);
        }
    });
    const usersListDataToClient = {
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["_6" /* CALL_USERS_UPDATE */],
        usersList: callUsersList
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(usersListDataToClient);
    if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["A" /* subscribeCallRequest */])()) {
        const subscribeRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["B" /* subscribeCallRequestCallback */])();
        const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(__WEBPACK_IMPORTED_MODULE_0__constants__["_22" /* SUCCESS_CODE */], __WEBPACK_IMPORTED_MODULE_0__constants__["_23" /* SUCCESS_MESSAGE */]);
        subscribeRoomRequestListener(customRes, null);
    }
};
/* harmony export (immutable) */ __webpack_exports__["q"] = roomSubscribedCallback;


const roomFailureCallback = data => {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["A" /* subscribeCallRequest */])()) {
        const subscribeRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["B" /* subscribeCallRequestCallback */])();
        const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(data.errorCode, data.message);
        subscribeRoomRequestListener(null, customRes);
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_1__config__["n" /* joinCallRequest */])()) {
        const joinRoomRequestListener = Object(__WEBPACK_IMPORTED_MODULE_1__config__["o" /* joinCallRequestCallback */])();
        const customRes = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_utils__["c" /* customResponse */])(data.errorCode, data.message);
        joinRoomRequestListener(null, customRes);
    }
    Object(__WEBPACK_IMPORTED_MODULE_4__call__["x" /* exit */])();
};
/* harmony export (immutable) */ __webpack_exports__["n"] = roomFailureCallback;


const handleCallInviteUsersMsg = data => {
    var _data$payload = data.payload;
    const userJid = _data$payload.userJid,
          inviteUsers = _data$payload.inviteUsers,
          groupId = _data$payload.groupId,
          callTime = _data$payload.callTime,
          callType = _data$payload.callType,
          roomId = _data$payload.roomId,
          toUsers = _data$payload.toUsers,
          isAudioMute = _data$payload.isAudioMute,
          isVideoMute = _data$payload.isVideoMute;

    const item = {
        userJid,
        status: __WEBPACK_IMPORTED_MODULE_0__constants__["w" /* CALL_STATE_INVITE_USERS */],
        sdkStatus: __WEBPACK_IMPORTED_MODULE_0__constants__["w" /* CALL_STATE_INVITE_USERS */],
        roomId,
        callType,
        callTime: callTime ? Number(callTime) : callTime,
        groupId,
        toUsers,
        inviteUsers,
        isAudioMute,
        isVideoMute,
        allUsers: [userJid, ...toUsers, ...inviteUsers]
    };
    Object(__WEBPACK_IMPORTED_MODULE_4__call__["B" /* receiveInviteUsers */])(item);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = handleCallInviteUsersMsg;


/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__roasterTable__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__realmDB__ = __webpack_require__(13);






// Read all Recent
const getRecentChatsfrmDB = async () => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])();
    const successRes = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
    const roasterDetails = await Object(__WEBPACK_IMPORTED_MODULE_1__roasterTable__["b" /* getAllRoaster */])();
    const recentDataList = roasterDetails.map(roaster => {
      const recentChatItem = realm.objects('RecentTable').filtered('jid = $0', roaster.jid)[0];
      const vCardDetail = realm.objectForPrimaryKey('VcardTable', roaster.jid);
      if (recentChatItem) {
        const messageTable = realm.objectForPrimaryKey('MessageTable', recentChatItem.mid);
        const message = {
          mid: recentChatItem.mid,
          msgType: messageTable ? messageTable.msgType : ''
        };
        const chatType = !messageTable ? roaster.roasterType : messageTable.chatType,
              createdAt = !messageTable ? '' : Object(__WEBPACK_IMPORTED_MODULE_2__Utils__["a" /* changeTimeFormat */])(messageTable.msgTime),
              deleteStatus = !messageTable ? 0 : messageTable.isDeleted,
              fromUserId = roaster.jid.split('@')[0],
              msgBody = Object(__WEBPACK_IMPORTED_MODULE_2__Utils__["i" /* msgBodyConstructor */])(message, realm, ''),
              msgId = !messageTable ? '' : messageTable.mid,
              msgStatus = !messageTable ? 4 : messageTable.status,
              msgType = !messageTable ? '' : messageTable.msgType,
              publisherId = !messageTable ? '' : messageTable.publisherJid.split('@')[0],
              timestamp = recentChatItem.msgTime,
              unreadCount = recentChatItem.unReadCount,
              isUnread = recentChatItem.isUnread,
              userId = roaster.jid.split('@')[0],
              userJid = roaster.jid,
              muteStatus = roaster.isMute;
        return {
          chatType,
          createdAt,
          deleteStatus,
          fromUserId,
          msgBody,
          msgId,
          msgStatus,
          msgType,
          muteStatus,
          publisherId,
          timestamp,
          toUserId: '',
          unreadCount,
          isUnread,
          userId,
          userJid,
          profileDetails: {
            nickName: vCardDetail && vCardDetail.nickName || msgBody.nickName || roaster.jid.split('@')[0],
            image: vCardDetail && vCardDetail.image || '',
            status: vCardDetail.status,
            colorCode: roaster.colourCode,
            userId: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["u" /* getUserIdFromJid */])(vCardDetail.jid),
            userJid: vCardDetail.jid,
            email: vCardDetail.email,
            mobileNumber: vCardDetail.mobileNo,
            isAdminBlocked: roaster.isAdminBlocked
          }
        };
      }
    });
    successRes.data = JSON.parse(JSON.stringify(recentDataList));
    return successRes;
  } catch (error) {
    console.log('readAllRecent DB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getRecentChatsfrmDB;


const handleRecentTable = async (params, shouldUpdateUnreadCount) => {
  try {
    const currentUserJid = await __WEBPACK_IMPORTED_MODULE_3__react_native_async_storage_async_storage___default.a.getItem('currentUserJID');
    const jid = params.jid,
          mid = params.mid,
          msgTime = params.msgTime;

    const userJid = jid.split('@').length > 1 ? jid : +currentUserJid.split('@')[1];
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])();
    const recentChats = realm.objects('RecentTable').filtered('jid = $0', userJid);
    if (recentChats.length) {
      const x = new Date();
      let UTCseconds = x.getTime() + x.getTimezoneOffset() * 60 * 1000;
      realm.write(() => {
        recentChats[0].mid = mid;
        recentChats[0].msgTime = parseInt(UTCseconds);
        if (shouldUpdateUnreadCount) {
          ++recentChats[0].unReadCount; // adding unreadCount
          recentChats[0].isUnread = 1;
        }
      });
    } else {
      createRecentTable(params, shouldUpdateUnreadCount);
    }
  } catch (error) {
    console.log('handleRecentTable DB', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = handleRecentTable;


const updateRecentMsg = async (toJid, params) => {
  try {
    const mid = params.mid,
          msgTime = params.msgTime;

    const realm = await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])();
    const recentChats = realm.objects('RecentTable').filtered('jid = $0', toJid);
    if (recentChats.length) {
      realm.write(() => {
        recentChats[0].mid = mid;
        recentChats[0].msgTime = msgTime;
      });
    }
  } catch (error) {}
};
/* harmony export (immutable) */ __webpack_exports__["f"] = updateRecentMsg;


const createRecentTable = (params, shouldUpdateUnreadCount = false) => {
  try {
    const jid = params.jid,
          mid = params.mid,
          msgTime = params.msgTime;

    Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])().then(realm => {
      const x = new Date();
      let UTCseconds = x.getTime() + x.getTimezoneOffset() * 60 * 1000;
      realm.write(() => {
        realm.create('RecentTable', {
          _id: Date.now().toString(),
          jid: jid,
          mid: mid,
          msgTime: parseInt(UTCseconds),
          isUnread: shouldUpdateUnreadCount ? 1 : 0,
          unReadCount: shouldUpdateUnreadCount ? 1 : 0
        });
      });
    });
  } catch (error) {
    console.log('createRecentTable DB', error);
  }
};
/* unused harmony export createRecentTable */


const removedMsgfrmRecentTable = async toJid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])();
    const recentChat = realm.objects('RecentTable').filtered('jid = $0', toJid);
    const mid = '',
          unReadCount = 0,
          isUnread = 0;
    if (recentChat && recentChat[0].mid) {
      realm.write(() => {
        recentChat[0].mid = mid;
        recentChat[0].unReadCount = unReadCount;
        recentChat[0].isUnread = isUnread;
      });
    }
  } catch (error) {}
};
/* harmony export (immutable) */ __webpack_exports__["d"] = removedMsgfrmRecentTable;


const deleteRecentChat = async jid => {
  await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])().then(realm => {
    const recentChatList = realm.objects('RecentTable').filtered('jid = $0', jid);
    if (recentChatList.length) {
      realm.write(() => {
        realm.delete(recentChatList[0]);
      });
    } else {
      console.log('RecentTable not found');
    }
  }).catch(error => {
    console.log('Failed to delete RecentTable', error);
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = deleteRecentChat;


const deleteAllRecentChat = async () => {
  await Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])().then(realm => {
    const allRecent = realm.objectForPrimaryKey('RecentTable');
    if (allRecent) {
      realm.write(() => {
        realm.delete(allRecent);
      });
    } else {
      console.log('Recent chats not found');
    }
  }).catch(error => {
    console.log('Failed to delete all recent chats', error);
  });
};
/* unused harmony export deleteAllRecentChat */


const updateRecentChatUnreadCountInDB = jid => {
  Object(__WEBPACK_IMPORTED_MODULE_4__realmDB__["a" /* getRealmDB */])().then(realm => {
    const recentItem = realm.objects('RecentTable').filtered('jid = $0', jid)[0];
    if (recentItem) {
      realm.write(() => {
        recentItem.isUnread = 0;
        recentItem.unReadCount = 0;
      });
    }
  });
};
/* harmony export (immutable) */ __webpack_exports__["e"] = updateRecentChatUnreadCountInDB;


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__realmDB__ = __webpack_require__(13);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



const getMessageStatus = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_0__realmDB__["a" /* getRealmDB */])();
    const messageStatus = realm.objects('MessageStatusTable').filtered('mid = $0', mid);
    return JSON.parse(JSON.stringify(messageStatus));
  } catch (error) {
    console.log('getMessageStatus', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getMessageStatus;


/**
 * Create Message in Message Detail,
 * @example (realm, params)
 * @example  params as object with following keys
 * @param  mid Required
 * @param  message type String
 * @param  message_type type String
 * @param  replyTo type String
 * @param  mentionedUsersIds type String
 */
const createMsgDetailTable = (realm, params) => {
  realm.write(() => {
    realm.create('MessageDetailTable', _extends({}, params));
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createMsgDetailTable;


const getMessageDetail = (mid, realm) => {
  try {
    const data = realm.objectForPrimaryKey('MessageDetailTable', mid);
    if (data) {
      return JSON.parse(JSON.stringify(data));
    }
  } catch (error) {
    console.log('getMessageDetail', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getMessageDetail;


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_localDb__ = __webpack_require__(17);
// migration done (14-12-21)







const handleFriendsListIQ = friendsIQ => {
  const friendsList = [],
        query = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(friendsIQ, "query");

  if (query && query.childNodes) {
    for (let i = 0; i < query.childNodes.length; i++) {
      const item = query.childNodes[i];
      const nodeJid = item.getAttribute("jid");
      let nickName = "",
          name = "",
          image = "",
          status = "",
          email = "",
          mobileNumber = "";

      const itemJson = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(item);
      if (itemJson && itemJson.profile && itemJson.profile.vCard) {
        var _itemJson$profile$vCa = itemJson.profile.vCard;
        nickName = _itemJson$profile$vCa.nickName;
        image = _itemJson$profile$vCa.image;
        name = _itemJson$profile$vCa.name;
        email = _itemJson$profile$vCa.email;
        mobileNumber = _itemJson$profile$vCa.mobileNumber;
        status = _itemJson$profile$vCa.status;
      }

      const obj = {
        name: nickName, // Contact Name
        image: image,
        email: email,
        isFriend: true,
        status: status,
        userJid: nodeJid,
        mobileNumber: mobileNumber,
        userId: Strophe.getNodeFromJid(nodeJid),
        nickName: name || item.getAttribute("name") || "" // Profile Name
      };
      friendsList.push(obj);
    }
  }
  return friendsList;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = handleFriendsListIQ;


const handleProfileIQ = profileIQ => {
  let item = {};
  if (profileIQ) {
    const vCard = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(profileIQ, "vCard"),
          from = profileIQ.getAttribute("from");

    if (vCard && vCard.childNodes && vCard.childNodes.length) {
      const fromUser = Strophe.getNodeFromJid(from),
            vCardElements = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(vCard);

      var _vCardElements$nickNa = vCardElements.nickName;
      const nickName = _vCardElements$nickNa === undefined ? "" : _vCardElements$nickNa;
      var _vCardElements$status = vCardElements.status;
      const status = _vCardElements$status === undefined ? "" : _vCardElements$status;
      var _vCardElements$mobile = vCardElements.mobileNumber;
      const mobileNumber = _vCardElements$mobile === undefined ? "" : _vCardElements$mobile;
      var _vCardElements$image = vCardElements.image;
      const image = _vCardElements$image === undefined ? "" : _vCardElements$image;
      var _vCardElements$email = vCardElements.email;
      const email = _vCardElements$email === undefined ? "" : _vCardElements$email;

      item = {
        email: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["g" /* decryptProfileDetails */])(email, fromUser),
        image,
        fromUser,
        nickName: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["g" /* decryptProfileDetails */])(nickName, fromUser),
        mobileNumber: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["g" /* decryptProfileDetails */])(mobileNumber, fromUser),
        status,
        userId: fromUser
      };
      fromUser === Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["v" /* getloggedinUserJid */])() && Object(__WEBPACK_IMPORTED_MODULE_4__helpers_localDb__["h" /* setUserProfile */])(item);
    }
  }
  return item;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = handleProfileIQ;


const handleLastActivityIQ = activityIQ => {
  const query = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(activityIQ, "query"),
        from = activityIQ.getAttribute("from");

  const seconds = query.getAttribute("seconds") || 0;
  return {
    fromUserJid: from,
    seconds: Number(seconds)
  };
};
/* harmony export (immutable) */ __webpack_exports__["f"] = handleLastActivityIQ;


const handleBlockedListIQ = listIQ => {
  const blockedContacts = [],
        blockLists = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(listIQ, "blocklist");

  if (blockLists && blockLists.childNodes && blockLists.childNodes.length) {
    for (let i = 0; i < blockLists.childNodes.length; i++) {
      const item = blockLists.childNodes[i];
      item.tagName === "item" && blockedContacts.push({
        jid: item.getAttribute("jid")
      });
    }
  }
  return blockedContacts;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = handleBlockedListIQ;


const handleBlockedUserListIQ = listIQ => {
  const blockedUserList = [],
        blockLists = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(listIQ, "blocklist");

  if (blockLists && blockLists.childNodes && blockLists.childNodes.length) {
    for (let i = 0; i < blockLists.childNodes.length; i++) {
      const members = blockLists.childNodes[i];
      members && members.tagName === "members" && blockedUserList.push({
        jid: Strophe.getText(members)
      });
    }
  }

  return blockedUserList;
};
/* harmony export (immutable) */ __webpack_exports__["d"] = handleBlockedUserListIQ;


const handleBlockedUser = (blockedUser, stanzaType = "") => {
  const blockedUserId = blockedUser.getAttribute("blocked_user"),
        type = blockedUser.getAttribute("type");

  // To Remove Online Status When User Is Blocked
  if (type === "block_user") {
    const item = {
      fromUserJid: `${blockedUserId}@${Object(__WEBPACK_IMPORTED_MODULE_3__connection__["e" /* getServer */])()}`,
      status: __WEBPACK_IMPORTED_MODULE_2__helpers_constants__["_65" /* UNAVAILABLE */]
    };
    Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["a" /* callbackListeners */])().presenceListener && Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["a" /* callbackListeners */])().presenceListener(item);
  }

  return {
    type: type,
    blockedUserId: blockedUserId,
    msgType: stanzaType === "carbon" ? "carbonUserBlockStatus" : "userBlockStatus"
  };
};
/* harmony export (immutable) */ __webpack_exports__["c"] = handleBlockedUser;


const handleBlockUserIQ = stanza => {
  const blockStanza = stanza.childNodes["0"];
  const blockItem = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(blockStanza, "item");
  const jid = blockItem.getAttribute("jid");

  return {
    blockedUserId: Strophe.getNodeFromJid(jid),
    msgType: "userBlockStatus",
    type: blockStanza.tagName === "block" ? "block_user" : "unblock_user"
  };
};
/* harmony export (immutable) */ __webpack_exports__["a"] = handleBlockUserIQ;


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__realmDB__ = __webpack_require__(13);




// Read all statuses
const readAllStatuses = async () => {
    try {
        const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
        return realm.objects('StatusTable');
    } catch (error) {
        console.log('Failed to read statuses', error);
    }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = readAllStatuses;


const deleteAllStatus = async () => {
    try {
        const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
        const objects = realm.objects('StatusTable');
        realm.write(() => {
            realm.delete(objects);
        });
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
    }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = deleteAllStatus;


/**
 * Create a status
 * @example createStatus(status);
 * @param {String} status
 * properties: {
 *   _id: 'string', // 0: id
 *  type: { type: 'string', default: '' },//1: type
 *   status: { type: 'string', default: '' },//2: status
}
 */
const createStatus = async (_id, type, status) => {
    try {
        const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
        realm.write(() => {
            realm.create('StatusTable', { _id, type, status });
        });
    } catch (error) {
        console.log('Failed to create StatusTable', error);
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createStatus;


// Update a status
const updateStatus = async (_id, updatedFields) => {
    try {
        const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
        const status = realm.objectForPrimaryKey('StatusTable', _id);
        if (status) {
            realm.write(() => {
                Object.assign(status, updatedFields);
            });
        } else {
            console.log('Status not found');
        }
    } catch (error) {
        console.log('Failed to update Status', error);
    }
};
/* unused harmony export updateStatus */


// Delete a status
const deleteStatus = async _id => {
    try {
        const realm = await Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])();
        const status = realm.objectForPrimaryKey('StatusTable', _id);
        if (status) {
            realm.write(() => {
                realm.delete(status);
            });
        } else {
            Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])('Status not found');
        }
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])('Failed to delete Status');
    }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = deleteStatus;


// Set up the change listener for StatusTable
const onChangeStatusTable = () => {
    Object(__WEBPACK_IMPORTED_MODULE_2__realmDB__["a" /* getRealmDB */])().then(realm => {
        const statuses = realm.objects('StatusTable');
        statuses.addListener((collection, changes) => {
            Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["a" /* callbackListeners */])().dbListener && Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common__["a" /* callbackListeners */])().dbListener(changes);
        });
    }).catch(error => {
        console.log('Failed to set up StatusTable change listener', error);
    });
};
/* unused harmony export onChangeStatusTable */


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var conventions = __webpack_require__(56);

var find = conventions.find;
var NAMESPACE = conventions.NAMESPACE;

/**
 * A prerequisite for `[].filter`, to drop elements that are empty
 * @param {string} input
 * @returns {boolean}
 */
function notEmptyString (input) {
	return input !== ''
}
/**
 * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * @param {string} input
 * @returns {string[]} (can be empty)
 */
function splitOnASCIIWhitespace(input) {
	// U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
	return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : []
}

/**
 * Adds element as a key to current if it is not already present.
 *
 * @param {Record<string, boolean | undefined>} current
 * @param {string} element
 * @returns {Record<string, boolean | undefined>}
 */
function orderedSetReducer (current, element) {
	if (!current.hasOwnProperty(element)) {
		current[element] = true;
	}
	return current;
}

/**
 * @see https://infra.spec.whatwg.org/#ordered-set
 * @param {string} input
 * @returns {string[]}
 */
function toOrderedSet(input) {
	if (!input) return [];
	var list = splitOnASCIIWhitespace(input);
	return Object.keys(list.reduce(orderedSetReducer, {}))
}

/**
 * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
 * which we can not rely on being available.
 *
 * @param {any[]} list
 * @returns {function(any): boolean}
 */
function arrayIncludes (list) {
	return function(element) {
		return list && list.indexOf(element) !== -1;
	}
}

function copy(src,dest){
	for(var p in src){
		if (Object.prototype.hasOwnProperty.call(src, p)) {
			dest[p] = src[p];
		}
	}
}

/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknown Class:"+Class)
		}
		pt.constructor = Class
	}
}

// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);

/**
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 */
function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)

/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0,
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
	 */
	item: function(index) {
		return index >= 0 && index < this.length ? this[index] : null;
	},
	toString:function(isHTML,nodeFilter){
		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	},
	/**
	 * @private
	 * @param {function (Node):boolean} predicate
	 * @returns {Node[]}
	 */
	filter: function (predicate) {
		return Array.prototype.filter.call(this, predicate);
	},
	/**
	 * @private
	 * @param {Node} item
	 * @returns {number}
	 */
	indexOf: function (item) {
		return Array.prototype.indexOf.call(this, item);
	},
};

function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if (list._inc !== inc) {
		var ls = list._refresh(list._node);
		__set__(list,'length',ls.length);
		if (!list.$$length || ls.length < list.$$length) {
			for (var i = ls.length; i in list; i++) {
				if (Object.prototype.hasOwnProperty.call(list, i)) {
					delete list[i];
				}
			}
		}
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i] || null;
}

_extends(LiveNodeList,NodeList);

/**
 * Objects implementing the NamedNodeMap interface are used
 * to represent collections of nodes that can be accessed by name.
 * Note that NamedNodeMap does not inherit from NodeList;
 * NamedNodeMaps are not maintained in any particular order.
 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
 * and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw new DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;


	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR

	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};

/**
 * The DOMImplementation interface represents an object providing methods
 * which are not dependent on any particular document.
 * Such an object is returned by the `Document.implementation` property.
 *
 * __The individual methods describe the differences compared to the specs.__
 *
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
 */
function DOMImplementation() {
}

DOMImplementation.prototype = {
	/**
	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
	 * The different implementations fairly diverged in what kind of features were reported.
	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
	 *
	 * @deprecated It is deprecated and modern browsers return true in all cases.
	 *
	 * @param {string} feature
	 * @param {string} [version]
	 * @returns {boolean} always true
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
	 */
	hasFeature: function(feature, version) {
			return true;
	},
	/**
	 * Creates an XML Document object of the specified type with its document element.
	 *
	 * __It behaves slightly different from the description in the living standard__:
	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string|null} namespaceURI
	 * @param {string} qualifiedName
	 * @param {DocumentType=null} doctype
	 * @returns {Document}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */
	createDocument: function(namespaceURI,  qualifiedName, doctype){
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype || null;
		if (doctype){
			doc.appendChild(doctype);
		}
		if (qualifiedName){
			var root = doc.createElementNS(namespaceURI, qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	/**
	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
	 *
	 * __This behavior is slightly different from the in the specs__:
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string} qualifiedName
	 * @param {string} [publicId]
	 * @param {string} [systemId]
	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */
	createDocumentType: function(qualifiedName, publicId, systemId){
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId || '';
		node.systemId = systemId || '';

		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises
		_insertBefore(this, newChild,oldChild, assertPreReplacementValidityInDocument);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
	/**
	 * Look up the prefix associated to the given namespace URI, starting from this node.
	 * **The default namespace declarations are ignored by this method.**
	 * See Namespace Prefix Lookup for details on the algorithm used by this method.
	 *
	 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
	 *
	 * @param {string | null} namespaceURI
	 * @returns {string | null}
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
	 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
	 * @see https://github.com/xmldom/xmldom/issues/322
	 */
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
					if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {
						return n;
					}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
					if(Object.prototype.hasOwnProperty.call(map, prefix)){
						return map[prefix] ;
					}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
	this.ownerDocument = this;
}

function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns === NAMESPACE.XMLNS){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}

function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns === NAMESPACE.XMLNS){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}

function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
			delete cs[cs.length];
		}
	}
}

/**
 * attributes;
 * children;
 *
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	child.parentNode = null;
	child.previousSibling = null;
	child.nextSibling = null;
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}

/**
 * Returns `true` if `node` can be a parent for insertion.
 * @param {Node} node
 * @returns {boolean}
 */
function hasValidParentNodeType(node) {
	return (
		node &&
		(node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE)
	);
}

/**
 * Returns `true` if `node` can be inserted according to it's `nodeType`.
 * @param {Node} node
 * @returns {boolean}
 */
function hasInsertableNodeType(node) {
	return (
		node &&
		(isElementNode(node) ||
			isTextNode(node) ||
			isDocTypeNode(node) ||
			node.nodeType === Node.DOCUMENT_FRAGMENT_NODE ||
			node.nodeType === Node.COMMENT_NODE ||
			node.nodeType === Node.PROCESSING_INSTRUCTION_NODE)
	);
}

/**
 * Returns true if `node` is a DOCTYPE node
 * @param {Node} node
 * @returns {boolean}
 */
function isDocTypeNode(node) {
	return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;
}

/**
 * Returns true if the node is an element
 * @param {Node} node
 * @returns {boolean}
 */
function isElementNode(node) {
	return node && node.nodeType === Node.ELEMENT_NODE;
}
/**
 * Returns true if `node` is a text node
 * @param {Node} node
 * @returns {boolean}
 */
function isTextNode(node) {
	return node && node.nodeType === Node.TEXT_NODE;
}

/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Document} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function isElementInsertionPossible(doc, child) {
	var parentChildNodes = doc.childNodes || [];
	if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {
		return false;
	}
	var docTypeNode = find(parentChildNodes, isDocTypeNode);
	return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}

/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Node} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function isElementReplacementPossible(doc, child) {
	var parentChildNodes = doc.childNodes || [];

	function hasElementChildThatIsNotChild(node) {
		return isElementNode(node) && node !== child;
	}

	if (find(parentChildNodes, hasElementChildThatIsNotChild)) {
		return false;
	}
	var docTypeNode = find(parentChildNodes, isDocTypeNode);
	return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}

/**
 * @private
 * Steps 1-5 of the checks before inserting and before replacing a child are the same.
 *
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreInsertionValidity1to5(parent, node, child) {
	// 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a "HierarchyRequestError" DOMException.
	if (!hasValidParentNodeType(parent)) {
		throw new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected parent node type ' + parent.nodeType);
	}
	// 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a "HierarchyRequestError" DOMException.
	// not implemented!
	// 3. If `child` is non-null and its parent is not `parent`, then throw a "NotFoundError" DOMException.
	if (child && child.parentNode !== parent) {
		throw new DOMException(NOT_FOUND_ERR, 'child not in parent');
	}
	if (
		// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
		!hasInsertableNodeType(node) ||
		// 5. If either `node` is a Text node and `parent` is a document,
		// the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
		// || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
		// or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
		(isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE)
	) {
		throw new DOMException(
			HIERARCHY_REQUEST_ERR,
			'Unexpected node type ' + node.nodeType + ' for parent node type ' + parent.nodeType
		);
	}
}

/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreInsertionValidityInDocument(parent, node, child) {
	var parentChildNodes = parent.childNodes || [];
	var nodeChildNodes = node.childNodes || [];

	// DocumentFragment
	if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		var nodeChildElements = nodeChildNodes.filter(isElementNode);
		// If node has more than one element child or has a Text node child.
		if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
		}
		// Otherwise, if `node` has one element child and either `parent` has an element child,
		// `child` is a doctype, or `child` is non-null and a doctype is following `child`.
		if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
		}
	}
	// Element
	if (isElementNode(node)) {
		// `parent` has an element child, `child` is a doctype,
		// or `child` is non-null and a doctype is following `child`.
		if (!isElementInsertionPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
		}
	}
	// DocumentType
	if (isDocTypeNode(node)) {
		// `parent` has a doctype child,
		if (find(parentChildNodes, isDocTypeNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
		}
		var parentElementChild = find(parentChildNodes, isElementNode);
		// `child` is non-null and an element is preceding `child`,
		if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
		}
		// or `child` is null and `parent` has an element child.
		if (!child && parentElementChild) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can not be appended since element is present');
		}
	}
}

/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreReplacementValidityInDocument(parent, node, child) {
	var parentChildNodes = parent.childNodes || [];
	var nodeChildNodes = node.childNodes || [];

	// DocumentFragment
	if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		var nodeChildElements = nodeChildNodes.filter(isElementNode);
		// If `node` has more than one element child or has a Text node child.
		if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
		}
		// Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.
		if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
		}
	}
	// Element
	if (isElementNode(node)) {
		// `parent` has an element child that is not `child` or a doctype is following `child`.
		if (!isElementReplacementPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
		}
	}
	// DocumentType
	if (isDocTypeNode(node)) {
		function hasDoctypeChildThatIsNotChild(node) {
			return isDocTypeNode(node) && node !== child;
		}

		// `parent` has a doctype child that is not `child`,
		if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
		}
		var parentElementChild = find(parentChildNodes, isElementNode);
		// or an element is preceding `child`.
		if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
		}
	}
}

/**
 * @private
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function _insertBefore(parent, node, child, _inDocumentAssertion) {
	// To ensure pre-insertion validity of a node into a parent before a child, run these steps:
	assertPreInsertionValidity1to5(parent, node, child);

	// If parent is a document, and any of the statements below, switched on the interface node implements,
	// are true, then throw a "HierarchyRequestError" DOMException.
	if (parent.nodeType === Node.DOCUMENT_NODE) {
		(_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);
	}

	var cp = node.parentNode;
	if(cp){
		cp.removeChild(node);//remove and update
	}
	if(node.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = node.firstChild;
		if (newFirst == null) {
			return node;
		}
		var newLast = node.lastChild;
	}else{
		newFirst = newLast = node;
	}
	var pre = child ? child.previousSibling : parent.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = child;


	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parent.firstChild = newFirst;
	}
	if(child == null){
		parent.lastChild = newLast;
	}else{
		child.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parent;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parent.ownerDocument||parent, parent);
	//console.log(parent.lastChild.nextSibling == null)
	if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {
		node.firstChild = node.lastChild = null;
	}
	return node;
}
function _appendSingleChild(parentNode,newChild){
	if (newChild.parentNode) {
		newChild.parentNode.removeChild(newChild);
	}
	newChild.parentNode = parentNode;
	newChild.previousSibling = parentNode.lastChild;
	newChild.nextSibling = null;
	if (newChild.previousSibling) {
		newChild.previousSibling.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
}

Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	/**
	 * The DocumentType node of the document.
	 *
	 * @readonly
	 * @type DocumentType
	 */
	doctype :  null,
	documentElement :  null,
	_inc : 1,

	insertBefore :  function(newChild, refChild){//raises
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		_insertBefore(this, newChild, refChild);
		newChild.ownerDocument = this;
		if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {
			this.documentElement = newChild;
		}

		return newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	replaceChild: function (newChild, oldChild) {
		//raises
		_insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
		newChild.ownerDocument = this;
		if (oldChild) {
			this.removeChild(oldChild);
		}
		if (isElementNode(newChild)) {
			this.documentElement = newChild;
		}
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},

	/**
	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
	 * of all child elements which have **all** of the given class name(s).
	 *
	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
	 *
	 *
	 * Warning: This is a live LiveNodeList.
	 * Changes in the DOM will reflect in the array as the changes occur.
	 * If an element selected by this array no longer qualifies for the selector,
	 * it will automatically be removed. Be aware of this for iteration purposes.
	 *
	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
	 */
	getElementsByClassName: function(classNames) {
		var classNamesSet = toOrderedSet(classNames)
		return new LiveNodeList(this, function(base) {
			var ls = [];
			if (classNamesSet.length > 0) {
				_visitNode(base.documentElement, function(node) {
					if(node !== base && node.nodeType === ELEMENT_NODE) {
						var nodeClassNames = node.getAttribute('class')
						// can be null if the attribute does not exist
						if (nodeClassNames) {
							// before splitting and iterating just compare them for the most common case
							var matches = classNames === nodeClassNames;
							if (!matches) {
								var nodeClassNamesSet = toOrderedSet(nodeClassNames)
								matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet))
							}
							if(matches) {
								ls.push(node);
							}
						}
					}
				});
			}
			return ls;
		});
	},

	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.localName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.nodeName = node.target = target;
		node.nodeValue = node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},

	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},

	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},

	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;

		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);

	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
}
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9 && this.documentElement || this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;

	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null}
			//{namespace:uri,prefix:''}
			]
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}

function needNamespaceDefine(node, isHTML, visibleNamespaces) {
	var prefix = node.prefix || '';
	var uri = node.namespaceURI;
	// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
	// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
	// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
	// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
	// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
	// > [...] Furthermore, the attribute value [...] must not be an empty string.
	// so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
	if (!uri) {
		return false;
	}
	if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {
		return false;
	}

	var i = visibleNamespaces.length
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		if (ns.prefix === prefix) {
			return ns.namespace !== uri;
		}
	}
	return true;
}
/**
 * Well-formed constraint: No < in Attribute Values
 * The replacement text of any entity referred to directly or indirectly in an attribute value must not contain a <.
 * @see https://www.w3.org/TR/xml/#CleanAttrVals
 * @see https://www.w3.org/TR/xml/#NT-AttValue
 */
function addSerializedAttribute(buf, qualifiedName, value) {
	buf.push(' ', qualifiedName, '="', value.replace(/[<&"]/g,_xmlEncoder), '"')
}

function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if (!visibleNamespaces) {
		visibleNamespaces = [];
	}

	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}

	switch(node.nodeType){
	case ELEMENT_NODE:
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;

		isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML

		var prefixedNodeName = nodeName
		if (!isHTML && !node.prefix && node.namespaceURI) {
			var defaultNS
			// lookup current default ns from `xmlns` attribute
			for (var ai = 0; ai < attrs.length; ai++) {
				if (attrs.item(ai).name === 'xmlns') {
					defaultNS = attrs.item(ai).value
					break
				}
			}
			if (!defaultNS) {
				// lookup current default ns in visibleNamespaces
				for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
					var namespace = visibleNamespaces[nsi]
					if (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {
						defaultNS = namespace.namespace
						break
					}
				}
			}
			if (defaultNS !== node.namespaceURI) {
				for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
					var namespace = visibleNamespaces[nsi]
					if (namespace.namespace === node.namespaceURI) {
						if (namespace.prefix) {
							prefixedNodeName = namespace.prefix + ':' + nodeName
						}
						break
					}
				}
			}
		}

		buf.push('<', prefixedNodeName);

		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}

		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}

		// add namespace for current node
		if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}

		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
					child = child.nextSibling;
				}
			}
			buf.push('</',prefixedNodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return addSerializedAttribute(buf, node.name, node.value);
	case TEXT_NODE:
		/**
		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
		 * `&amp;` and `&lt;` respectively.
		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
		 * when that string is not marking the end of a CDATA section.
		 *
		 * In the content of elements, character data is any string of characters
		 * which does not contain the start-delimiter of any markup
		 * and does not include the CDATA-section-close delimiter, `]]>`.
		 *
		 * @see https://www.w3.org/TR/xml/#NT-CharData
		 */
		return buf.push(node.data
			.replace(/[<&]/g,_xmlEncoder)
			.replace(/]]>/g, ']]&gt;')
		);
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC ', pubid);
			if (sysid && sysid!='.') {
				buf.push(' ', sysid);
			}
			buf.push('>');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM ', sysid, '>');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for (var n in node) {
		if (Object.prototype.hasOwnProperty.call(node, n)) {
			var v = node[n];
			if (typeof v != "object") {
				if (v != node2[n]) {
					node2[n] = v;
				}
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});

		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},

			set:function(data){
				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;

				default:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		})

		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}

		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	exports.DocumentType = DocumentType;
	exports.DOMException = DOMException;
	exports.DOMImplementation = DOMImplementation;
	exports.Element = Element;
	exports.Node = Node;
	exports.NodeList = NodeList;
	exports.XMLSerializer = XMLSerializer;
//}


/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__handler__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_utils__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_groupchat__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__helpers_localDb__ = __webpack_require__(17);
// migration done (14-12-21)













/**
 * Sends Get Recent Chats IQ Request to server
 * @returns {Object} Success/Error Response
 */
const getRecentChatsIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const recentChatsIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, '#A')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      limit: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_47" /* RECENT_LIST_COUNT */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_46" /* RECENT_CHAT */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(recentChatsIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["j" /* handleRecentChatIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["l"] = getRecentChatsIQ;


/**
 * Sends Get Single Chat IQ Request to server
 * @param {String} toUserJid
 * @param {String} position
 * @param {String} rowId
 * @param {Number} limit
 * @returns {Object} Success/Error Response
 */
const getSingleChatIQ = (toUserJid, position, rowId, limit, sendSeen) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const singleChatIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      position: position,
      message_id: '',
      row_id: rowId,
      limit: limit,
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_53" /* SINGLE_CHAT */],
      to_user: toUserJid,
      send_seen: sendSeen ? '1' : '0'
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(singleChatIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["m" /* handleSingleChatIQ */])(response, sendSeen);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.userJid = toUserJid;
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["n"] = getSingleChatIQ;


/**
 * Sends IQ Request to server to Get List of Media Files With/Without Pagination
 * @param {String} toJid
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const getMediaMessagesIQ = (toJid, msgId) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const status = __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid) ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["N" /* GROUP_CHAT_MEDIA */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_54" /* SINGLE_CHAT_MEDIA */];
    const mediaIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: status,
      message_id: msgId,
      to_user: toJid
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(mediaIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["f" /* handleMediaIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["k"] = getMediaMessagesIQ;


// Change this function into new Function (Implementation Needed in Ejabberd)
/**
 * @param {String} msgId
 * @param {String} chatType="chat"
 * @returns {Object} Success/Error Response
 */
const getMessageByIdIQ = (msgId, chatType = 'chat') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const msgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_48" /* REPLY_MESSAGE */],
      chat_type: chatType,
      message_id: '', // Need to remove this from ejabberd
      reply_id: msgId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(msgIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["g" /* handleMessageById */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* unused harmony export getMessageByIdIQ */


/**
 * @param {String} replyMsgId
 * @param {String} chatType="chat"
 * @returns {Object} Success/Error Response
 */
const getReplyMessageIQ = (replyMsgId, chatType = 'chat') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const replyMsgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_48" /* REPLY_MESSAGE */],
      chat_type: chatType,
      message_id: '', // Need to remove this from ejabberd
      reply_id: replyMsgId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(replyMsgIQ, response => {
      Object(__WEBPACK_IMPORTED_MODULE_2__handler__["g" /* replyMessageHandler */])(response);
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["k" /* handleReplyMessage */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["m"] = getReplyMessageIQ;


/**
 * Using reply_message Stanza for Forward as well
 * @param {String} msgId
 * @param {String} chatType
 * @returns {Object} Success/Error Response
 */
const getOriginalMsgDetails = async (msgId, chatType, callBack) => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const forwardIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_48" /* REPLY_MESSAGE */],
      message_id: msgId,
      reply_id: msgId,
      chat_type: chatType
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(forwardIQ, forwardMessage => {
      callBack(Object(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* handleForwardMessage */])(forwardMessage));
      return true;
    });
  }
};
/* unused harmony export getOriginalMsgDetails */


/**
 * Sends IQ Request to server to Add/Remove Favourite Message
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const updateFavouriteStatusIQ = (toJid, msgId, isFavourite) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const status = isFavourite ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_51" /* SET_FAVOURITE_MESSAGE */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_66" /* UPDATE_FAVOURITE_MESSAGE */];
    const favMsgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      to_user: toJid,
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_39" /* NS_USER_FAV */],
      status: status,
      message_id: msgId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(favMsgIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["w"] = updateFavouriteStatusIQ;


/**
 * Sends IQ Request to server to Get All Favourited Message List
 * @returns {Object} Success/Error Response
 */
const getFavouritedMsgListIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const favMsgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_39" /* NS_USER_FAV */],
      chat_type: '',
      to_user: '',
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["E" /* GET_FAVOURITE_MESSAGE */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(favMsgIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["n" /* handleStarredMessage */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["e"] = getFavouritedMsgListIQ;


/**
 * Sends IQ Request to server to Remove All Favourited Messages
 * @returns {Object} Success/Error Response
 */
const removeAllFavouritedMsgIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const favMsgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_39" /* NS_USER_FAV */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["r" /* CLEARALL_FAVOURITE_MESSAGE */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(favMsgIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["r"] = removeAllFavouritedMsgIQ;


/**
 * Sends IQ Request to server to Clear the Chat Messages
 * @param {String} toJid
 * @param {Number} deleteType - 0 - Clear Chat / 1 - Delete Chat
 * @returns {Object} Success/Error Response
 */
const clearOrDeleteChatMsgIQ = (toJid, deleteType, favourites) => new Promise(async resolve => {
  const chatType = __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid) ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["L" /* GROUPCHAT */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["q" /* CHAT */];
  const favourite = favourites ? 0 : 1;

  const clearChatIQ = $iq({
    type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
    id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
  }).c('query', {
    xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
    remove_user: Strophe.getNodeFromJid(toJid),
    type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
    favourite: favourite,
    status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["t" /* CLEAR_MESSAGE */],
    chat_type: chatType,
    delete_type: deleteType
  });
  if (Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["b" /* getOnlineStatus */])()) {
    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(clearChatIQ);
    const successResp = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
    resolve(successResp);
  } else {
    Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["a" /* addStanza */])(clearChatIQ.toString(), toJid, 'clearChat');
    const successResp = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
    resolve(successResp);
  }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = clearOrDeleteChatMsgIQ;


/**
 * Sends IQ Request to server to Clear All Messages
 * @param {Number} deleteType - Delete Conversation (0) / Clear Conversation (1)
 * @returns {Object} Success/Error Response
 */
const removeAllChatMsgIQ = deleteType => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const clearChatIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["s" /* CLEAR_ALL */],
      delete_type: deleteType
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(clearChatIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["q"] = removeAllChatMsgIQ;


/**
 * Sends IQ Request to server to Delete One or More Messages (Delete For Me)
 * @param {String} toJid
 * @param {String} msgIds
 * @returns {Object} Success/Error Response
 */
const deleteMessageIQ = (toJid, msgIds) => new Promise(async resolve => {
  const chatType = __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_23" /* MIX_BARE_JID */].test(toJid) ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["L" /* GROUPCHAT */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["q" /* CHAT */];
  const deleteMsgIQ = $iq({
    type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
    id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
  }).c('query', {
    to_user: toJid,
    chat_type: chatType,
    message_ids: msgIds,
    type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_61" /* TYPE_CHAT */],
    status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["y" /* DELETE_MESSAGE */],
    xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */]
  });
  if (Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["b" /* getOnlineStatus */])()) {
    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(deleteMsgIQ);
    const successResp = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
    resolve(successResp);
  } else {
    Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["a" /* addStanza */])(deleteMsgIQ.toString(), toJid, 'deleteMsgIQ');
    const successResp = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
    resolve(successResp);
  }
});
/* harmony export (immutable) */ __webpack_exports__["d"] = deleteMessageIQ;


/**
 * Sends IQ Request to Server to Create a New Group - Which also Adds Participants, Sets Owner, Updates Group Profile Internally in Ejabberd
 * @param {String} groupName
 * @param {Array} participants
 * @param {String} groupImage
 * @returns {Object} Success/Error Response
 */
const createGroupIQ = (groupName, participants, groupImage = '') => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    try {
      let profileResponse = {};
      if (groupImage.type) {
        profileResponse = await Object(__WEBPACK_IMPORTED_MODULE_5__modules_utils__["e" /* profileUpdate */])(groupImage);
        if (profileResponse.statusCode !== 200) resolve(profileResponse);
      }
      const imageUrl = profileResponse.imageFileToken || groupImage;

      const groupIQ = $iq({
        type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
        to: `${__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_22" /* MIX */]}.${Object(__WEBPACK_IMPORTED_MODULE_1__connection__["e" /* getServer */])()}`,
        id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
      }).c('query', {
        xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
        status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["x" /* CREATE_GROUP */],
        group_id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'AB')
      });

      groupIQ.c('profile', {}).c('vCard', { xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_40" /* NS_VCARD */] }).c('nickName').t(groupName);
      imageUrl && groupIQ.up().c('image').t(imageUrl);
      groupIQ.up().up().up().c('participants', {});
      participants.forEach(el => groupIQ.c('participant').t(el).up());

      await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, () => {
        Object(__WEBPACK_IMPORTED_MODULE_7__modules_groupchat__["f" /* getGroupsList */])();
        Object(__WEBPACK_IMPORTED_MODULE_8__modules_chat__["s" /* getRecentChats */])();
        resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])());
      }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
    } catch (error) {
      resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
    }
  }
});
/* harmony export (immutable) */ __webpack_exports__["c"] = createGroupIQ;


/**
 * Sends IQ Request to Server to Add Participants to the Created Group
 * @param {String} groupJid
 * @param {String} groupName
 * @param {Array} participants
 * @returns {Object} Success/Error Response
 */
const addParticipantsIQ = (groupJid, groupName, participants) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    try {
      const addMembersIq = $iq({
        type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
        id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA'),
        to: groupJid
      }).c('query', {
        status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["a" /* ADD_PARTICIPANTS */],
        xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */]
      }).c('subscriptions', {}).c('subscribe', { node: 'urn:xmpp:mix:nodes:messages' }).up().c('subscribe', { node: 'urn:xmpp:mix:nodes:presence' }).up().c('subscribe', { node: 'urn:xmpp:mix:nodes:participants' }).up().c('subscribe', { node: 'urn:xmpp:mix:nodes:info' }).up().c('subscribe', { node: 'urn:xmpp:mix:nodes:config' }).up().up().c('participants', {});
      participants.forEach(element => addMembersIq.c('participant').t(element).up());
      addMembersIq.up().c('nick').t(groupName).up();

      await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(addMembersIq, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
    } catch (error) {
      resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */]));
    }
  }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = addParticipantsIQ;


/**
 * Sends IQ Request to Server to Set the User Profile Details
 * @param {String} groupJid
 * @param {String} groupName
 * @param {String} groupImage
 * @returns {Object} Success/Error Response
 */
const setGroupProfileIQ = async (groupJid, groupName, groupImage) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    let profileResponse = {};
    if (groupImage.type) {
      profileResponse = await Object(__WEBPACK_IMPORTED_MODULE_5__modules_utils__["e" /* profileUpdate */])(groupImage);
      if (profileResponse.statusCode !== 200) resolve(profileResponse);
    }
    const imageUrl = profileResponse.imageFileToken || groupImage;

    const groupProfileIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA'),
      to: groupJid
    }).c('query', {
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_52" /* SET_GROUP_INFO */],
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */]
    }).c('profile', {}).c('vCard', {
      xmlns: 'vcard-temp'
    }).c('nickName').t(groupName).up().c('image').t(imageUrl).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupProfileIQ, () => {
      const iqResponse = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      iqResponse.fileToken = imageUrl;
      resolve(iqResponse);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["v"] = setGroupProfileIQ;


/**
 * Sends IQ Request to server to Get the Groups List
 * @returns {Object} Success/Error Response
 */
const getGroupsListIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      to: `${__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["e" /* ANY */]}@${__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_22" /* MIX */]}.${Object(__WEBPACK_IMPORTED_MODULE_1__connection__["e" /* getServer */])()}`,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["F" /* GET_GROUP_ID */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["e" /* handleGroupsListIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["j"] = getGroupsListIQ;


/**
 * Sends IQ Request to Server to Get the Group Profile Details
 * @param {String} groupJid
 * @returns {Object} Success/Error Response
 */
const getGroupProfileIQ = groupJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["G" /* GET_GROUP_PROFILE */],
      group_id: Strophe.getNodeFromJid(groupJid)
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["e" /* handleGroupsListIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item[0] || {};
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["i"] = getGroupProfileIQ;


/**
 * Sends IQ Request to Server to Get the Group Participants
 * @param {String} groupJid
 * @returns {Object} Success/Error Response
 */
const getGroupParticipantsIQ = groupJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["H" /* GET_PARTICIPANTS */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* handleGroupParticipantsIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["h"] = getGroupParticipantsIQ;


/**
 * Sends IQ Request to Server to Make a Participant as a Admin
 * @param {String} groupJid
 * @param {String} userJid
 * @returns {Object} Success/Error Response
 */
const makeAsAdminIQ = (groupJid, userJid) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_8" /* MAKE_ADMIN */]
    }).c('participant').t(userJid).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["o"] = makeAsAdminIQ;


/**
 * Sends IQ Request to Server to Remove a Participant from the Group
 * @param {String} groupJid
 * @param {String} userJid
 * @param {String} isAdmin
 * @returns {Object} Success/Error Response
 */
const removeParticipantIQ = (groupJid, userJid, isAdmin, type) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    let status;
    if (type === 'exit') {
      status = isAdmin ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["b" /* ADMIN_EXIT_GROUP */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_72" /* USER_EXIT_GROUP */];
    } else {
      status = isAdmin ? __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["c" /* ADMIN_REMOVE_ADMIN */] : __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["d" /* ADMIN_REMOVE_PARTICIPANT */];
    }

    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: status
    }).c('participant').t(userJid).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["s"] = removeParticipantIQ;


/**
 * Sends IQ Request to Server to Delete the Group for User
 * @param {String} groupJid
 * @returns {Object} Success/Error Response
 */
const userDeleteGroupIQ = groupJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const userJid = `${Object(__WEBPACK_IMPORTED_MODULE_6__helpers_common__["v" /* getloggedinUserJid */])()}@${Object(__WEBPACK_IMPORTED_MODULE_1__connection__["e" /* getServer */])()}`;
    const groupIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_71" /* USER_DELETE_GROUP */]
    }).c('participant').t(userJid).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["z"] = userDeleteGroupIQ;


/**
 * Sends Get Group Chat IQ Request to Server
 * @param {String} groupJid
 * @param {String} position
 * @param {String} rowId
 * @param {Number} limit
 * @returns {Object} Success/Error Response
 */
const getGroupChatIQ = (groupJid, position, rowId, limit, sendSeen) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const groupChatIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      position: position,
      message_id: '',
      row_id: rowId,
      limit: limit,
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["M" /* GROUP_CHAT */],
      to_user: groupJid,
      send_seen: sendSeen ? '1' : '0'
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(groupChatIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["c" /* handleGroupChatIQ */])(response, sendSeen);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      successRes.groupJid = groupJid;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["f"] = getGroupChatIQ;


/**
 * Sends Typing Status IQ to server
 * @param {String} toJid
 * @returns {Object} Success/Error Response
 */
const sendTypingStatusGroupIQ = toJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const typingIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      to: toJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["u" /* COMPOSING */]
    }).c('no-store', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_34" /* NS_HINTS */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(typingIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["u"] = sendTypingStatusGroupIQ;


/**
 * Sends Typing Gone Status IQ to server
 * @param {String} toJid
 * @returns {Object} Success/Error Response
 */
const sendTypingGoneStatusGroupIQ = toJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const typingGoneIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      to: toJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["I" /* GONE */]
    }).c('no-store', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_34" /* NS_HINTS */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(typingGoneIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["t"] = sendTypingGoneStatusGroupIQ;


/**
 * Sends Typing Gone Status IQ to server
 * @param {String} groupJid
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const getGroupMsgInfoIQ = (groupJid, msgId) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const msgInfoIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      to: groupJid,
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["P" /* GROUP_MESSAGE_STATUS */],
      message_id: msgId
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(msgInfoIQ, response => {
      Object(__WEBPACK_IMPORTED_MODULE_2__handler__["d" /* messageInfoHandler */])(response);
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["h" /* handleMessageInfoIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["g"] = getGroupMsgInfoIQ;


/**
 * Sends IQ Request to server to Delete Message For Everyone
 * @param {String} toJid
 * @param {String} msgId
 * @returns {Object} Success/Error Response
 */
const recallGroupMessageIQ = (toJid, msgIds) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const recallIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA'),
      to: toJid
    }).c('query', {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_33" /* NS_GROUP_MIX */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_45" /* RECALL */],
      chat_type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_26" /* NORMAL */],
      msgid: msgIds
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(recallIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["p"] = recallGroupMessageIQ;


/**
 * Sends IQ Request to server to Update Chat Mute Notification
 * @param {String} toJid
 * @param {Boolean} isMuted
 * @returns {Object} Success/Error Response
 */
const updateMuteStatusIQ = (toJid, isMuted) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const muteMsgIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA')
    }).c('query', {
      to_user: toJid,
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_67" /* UPDATE_MUTE_NOTIFICATION */],
      mute_status: isMuted ? '1' : '0'
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(muteMsgIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["x"] = updateMuteStatusIQ;


/**
 * Sends IQ Request to server to Update Unread Count on Recent Chat
 * @param {String} toJid
 * @returns {Object} Success/Error Response
 */
const updateRecentChatUnreadCountIQ = toJid => new Promise(async resolve => {
  const iqId = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["x" /* randomString */])(16, 'BA');
  const unreadIQ = $iq({
    type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
    id: iqId
  }).c('query', {
    to_user: toJid,
    xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
    status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_68" /* UPDATE_UNREAD_COUNT */]
  });
  if (Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["b" /* getOnlineStatus */])()) {
    Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(unreadIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  } else {
    Object(__WEBPACK_IMPORTED_MODULE_9__helpers_localDb__["a" /* addStanza */])(unreadIQ.toString(), iqId, 'updateUnreadCount');
    resolve(Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])());
  }
});
/* harmony export (immutable) */ __webpack_exports__["y"] = updateRecentChatUnreadCountIQ;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var dom = __webpack_require__(112)
exports.DOMImplementation = dom.DOMImplementation
exports.XMLSerializer = dom.XMLSerializer
exports.DOMParser = __webpack_require__(211).DOMParser


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var conventions = __webpack_require__(57);

var find = conventions.find;
var NAMESPACE = conventions.NAMESPACE;

/**
 * A prerequisite for `[].filter`, to drop elements that are empty
 * @param {string} input
 * @returns {boolean}
 */
function notEmptyString (input) {
	return input !== ''
}
/**
 * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * @param {string} input
 * @returns {string[]} (can be empty)
 */
function splitOnASCIIWhitespace(input) {
	// U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
	return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : []
}

/**
 * Adds element as a key to current if it is not already present.
 *
 * @param {Record<string, boolean | undefined>} current
 * @param {string} element
 * @returns {Record<string, boolean | undefined>}
 */
function orderedSetReducer (current, element) {
	if (!current.hasOwnProperty(element)) {
		current[element] = true;
	}
	return current;
}

/**
 * @see https://infra.spec.whatwg.org/#ordered-set
 * @param {string} input
 * @returns {string[]}
 */
function toOrderedSet(input) {
	if (!input) return [];
	var list = splitOnASCIIWhitespace(input);
	return Object.keys(list.reduce(orderedSetReducer, {}))
}

/**
 * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
 * which we can not rely on being available.
 *
 * @param {any[]} list
 * @returns {function(any): boolean}
 */
function arrayIncludes (list) {
	return function(element) {
		return list && list.indexOf(element) !== -1;
	}
}

function copy(src,dest){
	for(var p in src){
		if (Object.prototype.hasOwnProperty.call(src, p)) {
			dest[p] = src[p];
		}
	}
}

/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknown Class:"+Class)
		}
		pt.constructor = Class
	}
}

// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);

/**
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 */
function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)

/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0,
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
	 */
	item: function(index) {
		return this[index] || null;
	},
	toString:function(isHTML,nodeFilter){
		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	},
	/**
	 * @private
	 * @param {function (Node):boolean} predicate
	 * @returns {Node[]}
	 */
	filter: function (predicate) {
		return Array.prototype.filter.call(this, predicate);
	},
	/**
	 * @private
	 * @param {Node} item
	 * @returns {number}
	 */
	indexOf: function (item) {
		return Array.prototype.indexOf.call(this, item);
	},
};

function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
}

_extends(LiveNodeList,NodeList);

/**
 * Objects implementing the NamedNodeMap interface are used
 * to represent collections of nodes that can be accessed by name.
 * Note that NamedNodeMap does not inherit from NodeList;
 * NamedNodeMaps are not maintained in any particular order.
 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
 * and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw new DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;


	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR

	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};

/**
 * The DOMImplementation interface represents an object providing methods
 * which are not dependent on any particular document.
 * Such an object is returned by the `Document.implementation` property.
 *
 * __The individual methods describe the differences compared to the specs.__
 *
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
 */
function DOMImplementation() {
}

DOMImplementation.prototype = {
	/**
	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
	 * The different implementations fairly diverged in what kind of features were reported.
	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
	 *
	 * @deprecated It is deprecated and modern browsers return true in all cases.
	 *
	 * @param {string} feature
	 * @param {string} [version]
	 * @returns {boolean} always true
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
	 */
	hasFeature: function(feature, version) {
			return true;
	},
	/**
	 * Creates an XML Document object of the specified type with its document element.
	 *
	 * __It behaves slightly different from the description in the living standard__:
	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string|null} namespaceURI
	 * @param {string} qualifiedName
	 * @param {DocumentType=null} doctype
	 * @returns {Document}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */
	createDocument: function(namespaceURI,  qualifiedName, doctype){
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype || null;
		if (doctype){
			doc.appendChild(doctype);
		}
		if (qualifiedName){
			var root = doc.createElementNS(namespaceURI, qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	/**
	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
	 *
	 * __This behavior is slightly different from the in the specs__:
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string} qualifiedName
	 * @param {string} [publicId]
	 * @param {string} [systemId]
	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */
	createDocumentType: function(qualifiedName, publicId, systemId){
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId || '';
		node.systemId = systemId || '';

		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises
		_insertBefore(this, newChild,oldChild, assertPreReplacementValidityInDocument);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
	/**
	 * Look up the prefix associated to the given namespace URI, starting from this node.
	 * **The default namespace declarations are ignored by this method.**
	 * See Namespace Prefix Lookup for details on the algorithm used by this method.
	 *
	 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
	 *
	 * @param {string | null} namespaceURI
	 * @returns {string | null}
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
	 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
	 * @see https://github.com/xmldom/xmldom/issues/322
	 */
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
						if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {
							return n;
						}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(Object.prototype.hasOwnProperty.call(map, prefix)){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
	this.ownerDocument = this;
}

function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns === NAMESPACE.XMLNS){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}

function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns === NAMESPACE.XMLNS){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}

/**
 * Updates `el.childNodes`, updating the indexed items and it's `length`.
 * Passing `newChild` means it will be appended.
 * Otherwise it's assumed that an item has been removed,
 * and `el.firstNode` and it's `.nextSibling` are used
 * to walk the current list of child nodes.
 *
 * @param {Document} doc
 * @param {Node} el
 * @param {Node} [newChild]
 * @private
 */
function _onUpdateChild (doc, el, newChild) {
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if (newChild) {
			cs[cs.length++] = newChild;
		} else {
			var child = el.firstChild;
			var i = 0;
			while (child) {
				cs[i++] = child;
				child = child.nextSibling;
			}
			cs.length = i;
			delete cs[cs.length];
		}
	}
}

/**
 * Removes the connections between `parentNode` and `child`
 * and any existing `child.previousSibling` or `child.nextSibling`.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 *
 * @param {Node} parentNode
 * @param {Node} child
 * @returns {Node} the child that was removed.
 * @private
 */
function _removeChild (parentNode, child) {
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if (previous) {
		previous.nextSibling = next;
	} else {
		parentNode.firstChild = next;
	}
	if (next) {
		next.previousSibling = previous;
	} else {
		parentNode.lastChild = previous;
	}
	child.parentNode = null;
	child.previousSibling = null;
	child.nextSibling = null;
	_onUpdateChild(parentNode.ownerDocument, parentNode);
	return child;
}

/**
 * Returns `true` if `node` can be a parent for insertion.
 * @param {Node} node
 * @returns {boolean}
 */
function hasValidParentNodeType(node) {
	return (
		node &&
		(node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE)
	);
}

/**
 * Returns `true` if `node` can be inserted according to it's `nodeType`.
 * @param {Node} node
 * @returns {boolean}
 */
function hasInsertableNodeType(node) {
	return (
		node &&
		(isElementNode(node) ||
			isTextNode(node) ||
			isDocTypeNode(node) ||
			node.nodeType === Node.DOCUMENT_FRAGMENT_NODE ||
			node.nodeType === Node.COMMENT_NODE ||
			node.nodeType === Node.PROCESSING_INSTRUCTION_NODE)
	);
}

/**
 * Returns true if `node` is a DOCTYPE node
 * @param {Node} node
 * @returns {boolean}
 */
function isDocTypeNode(node) {
	return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;
}

/**
 * Returns true if the node is an element
 * @param {Node} node
 * @returns {boolean}
 */
function isElementNode(node) {
	return node && node.nodeType === Node.ELEMENT_NODE;
}
/**
 * Returns true if `node` is a text node
 * @param {Node} node
 * @returns {boolean}
 */
function isTextNode(node) {
	return node && node.nodeType === Node.TEXT_NODE;
}

/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Document} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function isElementInsertionPossible(doc, child) {
	var parentChildNodes = doc.childNodes || [];
	if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {
		return false;
	}
	var docTypeNode = find(parentChildNodes, isDocTypeNode);
	return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}

/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Node} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function isElementReplacementPossible(doc, child) {
	var parentChildNodes = doc.childNodes || [];

	function hasElementChildThatIsNotChild(node) {
		return isElementNode(node) && node !== child;
	}

	if (find(parentChildNodes, hasElementChildThatIsNotChild)) {
		return false;
	}
	var docTypeNode = find(parentChildNodes, isDocTypeNode);
	return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}

/**
 * @private
 * Steps 1-5 of the checks before inserting and before replacing a child are the same.
 *
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreInsertionValidity1to5(parent, node, child) {
	// 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a "HierarchyRequestError" DOMException.
	if (!hasValidParentNodeType(parent)) {
		throw new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected parent node type ' + parent.nodeType);
	}
	// 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a "HierarchyRequestError" DOMException.
	// not implemented!
	// 3. If `child` is non-null and its parent is not `parent`, then throw a "NotFoundError" DOMException.
	if (child && child.parentNode !== parent) {
		throw new DOMException(NOT_FOUND_ERR, 'child not in parent');
	}
	if (
		// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
		!hasInsertableNodeType(node) ||
		// 5. If either `node` is a Text node and `parent` is a document,
		// the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
		// || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
		// or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
		(isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE)
	) {
		throw new DOMException(
			HIERARCHY_REQUEST_ERR,
			'Unexpected node type ' + node.nodeType + ' for parent node type ' + parent.nodeType
		);
	}
}

/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreInsertionValidityInDocument(parent, node, child) {
	var parentChildNodes = parent.childNodes || [];
	var nodeChildNodes = node.childNodes || [];

	// DocumentFragment
	if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		var nodeChildElements = nodeChildNodes.filter(isElementNode);
		// If node has more than one element child or has a Text node child.
		if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
		}
		// Otherwise, if `node` has one element child and either `parent` has an element child,
		// `child` is a doctype, or `child` is non-null and a doctype is following `child`.
		if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
		}
	}
	// Element
	if (isElementNode(node)) {
		// `parent` has an element child, `child` is a doctype,
		// or `child` is non-null and a doctype is following `child`.
		if (!isElementInsertionPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
		}
	}
	// DocumentType
	if (isDocTypeNode(node)) {
		// `parent` has a doctype child,
		if (find(parentChildNodes, isDocTypeNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
		}
		var parentElementChild = find(parentChildNodes, isElementNode);
		// `child` is non-null and an element is preceding `child`,
		if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
		}
		// or `child` is null and `parent` has an element child.
		if (!child && parentElementChild) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can not be appended since element is present');
		}
	}
}

/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */
function assertPreReplacementValidityInDocument(parent, node, child) {
	var parentChildNodes = parent.childNodes || [];
	var nodeChildNodes = node.childNodes || [];

	// DocumentFragment
	if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
		var nodeChildElements = nodeChildNodes.filter(isElementNode);
		// If `node` has more than one element child or has a Text node child.
		if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');
		}
		// Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.
		if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');
		}
	}
	// Element
	if (isElementNode(node)) {
		// `parent` has an element child that is not `child` or a doctype is following `child`.
		if (!isElementReplacementPossible(parent, child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');
		}
	}
	// DocumentType
	if (isDocTypeNode(node)) {
		function hasDoctypeChildThatIsNotChild(node) {
			return isDocTypeNode(node) && node !== child;
		}

		// `parent` has a doctype child that is not `child`,
		if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');
		}
		var parentElementChild = find(parentChildNodes, isElementNode);
		// or an element is preceding `child`.
		if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
			throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');
		}
	}
}

/**
 * @private
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */
function _insertBefore(parent, node, child, _inDocumentAssertion) {
	// To ensure pre-insertion validity of a node into a parent before a child, run these steps:
	assertPreInsertionValidity1to5(parent, node, child);

	// If parent is a document, and any of the statements below, switched on the interface node implements,
	// are true, then throw a "HierarchyRequestError" DOMException.
	if (parent.nodeType === Node.DOCUMENT_NODE) {
		(_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);
	}

	var cp = node.parentNode;
	if(cp){
		cp.removeChild(node);//remove and update
	}
	if(node.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = node.firstChild;
		if (newFirst == null) {
			return node;
		}
		var newLast = node.lastChild;
	}else{
		newFirst = newLast = node;
	}
	var pre = child ? child.previousSibling : parent.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = child;


	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parent.firstChild = newFirst;
	}
	if(child == null){
		parent.lastChild = newLast;
	}else{
		child.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parent;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parent.ownerDocument||parent, parent);
	//console.log(parent.lastChild.nextSibling == null)
	if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {
		node.firstChild = node.lastChild = null;
	}
	return node;
}

/**
 * Appends `newChild` to `parentNode`.
 * If `newChild` is already connected to a `parentNode` it is first removed from it.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 * @param {Node} parentNode
 * @param {Node} newChild
 * @returns {Node}
 * @private
 */
function _appendSingleChild (parentNode, newChild) {
	if (newChild.parentNode) {
		newChild.parentNode.removeChild(newChild);
	}
	newChild.parentNode = parentNode;
	newChild.previousSibling = parentNode.lastChild;
	newChild.nextSibling = null;
	if (newChild.previousSibling) {
		newChild.previousSibling.nextSibling = newChild;
	} else {
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
	return newChild;
}

Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	/**
	 * The DocumentType node of the document.
	 *
	 * @readonly
	 * @type DocumentType
	 */
	doctype :  null,
	documentElement :  null,
	_inc : 1,

	insertBefore :  function(newChild, refChild){//raises
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		_insertBefore(this, newChild, refChild);
		newChild.ownerDocument = this;
		if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {
			this.documentElement = newChild;
		}

		return newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	replaceChild: function (newChild, oldChild) {
		//raises
		_insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
		newChild.ownerDocument = this;
		if (oldChild) {
			this.removeChild(oldChild);
		}
		if (isElementNode(newChild)) {
			this.documentElement = newChild;
		}
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},

	/**
	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
	 * of all child elements which have **all** of the given class name(s).
	 *
	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
	 *
	 *
	 * Warning: This is a live LiveNodeList.
	 * Changes in the DOM will reflect in the array as the changes occur.
	 * If an element selected by this array no longer qualifies for the selector,
	 * it will automatically be removed. Be aware of this for iteration purposes.
	 *
	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
	 */
	getElementsByClassName: function(classNames) {
		var classNamesSet = toOrderedSet(classNames)
		return new LiveNodeList(this, function(base) {
			var ls = [];
			if (classNamesSet.length > 0) {
				_visitNode(base.documentElement, function(node) {
					if(node !== base && node.nodeType === ELEMENT_NODE) {
						var nodeClassNames = node.getAttribute('class')
						// can be null if the attribute does not exist
						if (nodeClassNames) {
							// before splitting and iterating just compare them for the most common case
							var matches = classNames === nodeClassNames;
							if (!matches) {
								var nodeClassNamesSet = toOrderedSet(nodeClassNames)
								matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet))
							}
							if(matches) {
								ls.push(node);
							}
						}
					}
				});
			}
			return ls;
		});
	},

	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.localName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},

	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},

	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},

	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;

		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);

	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
}
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9 && this.documentElement || this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;

	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null}
			//{namespace:uri,prefix:''}
			]
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}

function needNamespaceDefine(node, isHTML, visibleNamespaces) {
	var prefix = node.prefix || '';
	var uri = node.namespaceURI;
	// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
	// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
	// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
	// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
	// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
	// > [...] Furthermore, the attribute value [...] must not be an empty string.
	// so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
	if (!uri) {
		return false;
	}
	if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {
		return false;
	}

	var i = visibleNamespaces.length
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		if (ns.prefix === prefix) {
			return ns.namespace !== uri;
		}
	}
	return true;
}
/**
 * Well-formed constraint: No < in Attribute Values
 * > The replacement text of any entity referred to directly or indirectly
 * > in an attribute value must not contain a <.
 * @see https://www.w3.org/TR/xml11/#CleanAttrVals
 * @see https://www.w3.org/TR/xml11/#NT-AttValue
 *
 * Literal whitespace other than space that appear in attribute values
 * are serialized as their entity references, so they will be preserved.
 * (In contrast to whitespace literals in the input which are normalized to spaces)
 * @see https://www.w3.org/TR/xml11/#AVNormalize
 * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes
 */
function addSerializedAttribute(buf, qualifiedName, value) {
	buf.push(' ', qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"')
}

function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if (!visibleNamespaces) {
		visibleNamespaces = [];
	}

	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}

	switch(node.nodeType){
	case ELEMENT_NODE:
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;

		isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML

		var prefixedNodeName = nodeName
		if (!isHTML && !node.prefix && node.namespaceURI) {
			var defaultNS
			// lookup current default ns from `xmlns` attribute
			for (var ai = 0; ai < attrs.length; ai++) {
				if (attrs.item(ai).name === 'xmlns') {
					defaultNS = attrs.item(ai).value
					break
				}
			}
			if (!defaultNS) {
				// lookup current default ns in visibleNamespaces
				for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
					var namespace = visibleNamespaces[nsi]
					if (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {
						defaultNS = namespace.namespace
						break
					}
				}
			}
			if (defaultNS !== node.namespaceURI) {
				for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
					var namespace = visibleNamespaces[nsi]
					if (namespace.namespace === node.namespaceURI) {
						if (namespace.prefix) {
							prefixedNodeName = namespace.prefix + ':' + nodeName
						}
						break
					}
				}
			}
		}

		buf.push('<', prefixedNodeName);

		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}

		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}

		// add namespace for current node
		if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : "xmlns", uri);
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}

		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
					child = child.nextSibling;
				}
			}
			buf.push('</',prefixedNodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return addSerializedAttribute(buf, node.name, node.value);
	case TEXT_NODE:
		/**
		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
		 * `&amp;` and `&lt;` respectively.
		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
		 * when that string is not marking the end of a CDATA section.
		 *
		 * In the content of elements, character data is any string of characters
		 * which does not contain the start-delimiter of any markup
		 * and does not include the CDATA-section-close delimiter, `]]>`.
		 *
		 * @see https://www.w3.org/TR/xml/#NT-CharData
		 * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node
		 */
		return buf.push(node.data
			.replace(/[<&>]/g,_xmlEncoder)
		);
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC ', pubid);
			if (sysid && sysid!='.') {
				buf.push(' ', sysid);
			}
			buf.push('>');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM ', sysid, '>');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for (var n in node) {
		if (Object.prototype.hasOwnProperty.call(node, n)) {
			var v = node[n];
			if (typeof v != "object") {
				if (v != node2[n]) {
					node2[n] = v;
				}
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});

		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},

			set:function(data){
				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;

				default:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		})

		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}

		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	exports.DocumentType = DocumentType;
	exports.DOMException = DOMException;
	exports.DOMImplementation = DOMImplementation;
	exports.Element = Element;
	exports.Node = Node;
	exports.NodeList = NodeList;
	exports.XMLSerializer = XMLSerializer;
//}


/***/ }),
/* 113 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(32)
exports.createHash = exports.Hash = __webpack_require__(47)
exports.createHmac = exports.Hmac = __webpack_require__(127)

var algos = __webpack_require__(240)
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(130)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(242)

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(257)

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(262)

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(303)

var publicEncrypt = __webpack_require__(304)

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(307)

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(218).Buffer
var Transform = __webpack_require__(219).Transform
var inherits = __webpack_require__(0)

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(23).EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(117);
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = __webpack_require__(220);
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = __webpack_require__(221);
var destroyImpl = __webpack_require__(118);
var _require = __webpack_require__(119),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = __webpack_require__(33).codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
__webpack_require__(0)(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(34);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || __webpack_require__(34);
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(224);
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(225);
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(23).EventEmitter;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(33).codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(75)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(117);
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = __webpack_require__(118);
var _require = __webpack_require__(119),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = __webpack_require__(33).codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
__webpack_require__(0)(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(34);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || __webpack_require__(34);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;
var _require$codes = __webpack_require__(33).codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = __webpack_require__(34);
__webpack_require__(0)(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = Readable;

/*<replacement>*/
var processNextTick = __webpack_require__(79);
/*</replacement>*/

/*<replacement>*/
var isArray = __webpack_require__(113);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(3).Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = __webpack_require__(23);

/*<replacement>*/
var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = __webpack_require__(58);
  } catch (_) {} finally {
    if (!Stream) Stream = __webpack_require__(23).EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(0);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(233);
var debug = undefined;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(28);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || __webpack_require__(28);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && !this._readableState.endEmitted) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(81);

/*<replacement>*/
var util = __webpack_require__(48);
util.inherits = __webpack_require__(0);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(28)


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var Legacy = __webpack_require__(239)
var Base = __webpack_require__(24)
var Buffer = __webpack_require__(2).Buffer
var md5 = __webpack_require__(128)
var RIPEMD160 = __webpack_require__(77)

var sha = __webpack_require__(78)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(74)

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = {"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(241)
exports.pbkdf2Sync = __webpack_require__(133)


/***/ }),
/* 131 */
/***/ (function(module, exports) {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(128)
var RIPEMD160 = __webpack_require__(77)
var sha = __webpack_require__(78)
var Buffer = __webpack_require__(2).Buffer

var checkParameters = __webpack_require__(131)
var defaultEncoding = __webpack_require__(132)
var toBuffer = __webpack_require__(134)

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(11);
var inherits = __webpack_require__(0);

var utils = __webpack_require__(135);
var Cipher = __webpack_require__(82);

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  if (this.padding === false) {
    return false;
  }

  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  if (this.padding === false) {
    return buffer;
  }

  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(49)
var Buffer = __webpack_require__(2).Buffer
var incr32 = __webpack_require__(138)

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),
/* 138 */
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = {"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(59)
var Buffer = __webpack_require__(2).Buffer
var Transform = __webpack_require__(24)
var inherits = __webpack_require__(0)
var GHASH = __webpack_require__(254)
var xor = __webpack_require__(49)
var incr32 = __webpack_require__(138)

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(59)
var Buffer = __webpack_require__(2).Buffer
var Transform = __webpack_require__(24)
var inherits = __webpack_require__(0)

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(32);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(9);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(143);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(9);
var brorand = __webpack_require__(85);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(23).EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(145);
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = __webpack_require__(264);
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = __webpack_require__(265);
var destroyImpl = __webpack_require__(146);
var _require = __webpack_require__(147),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = __webpack_require__(36).codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
__webpack_require__(0)(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(37);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || __webpack_require__(37);
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(27).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(267);
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(268);
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(23).EventEmitter;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(36).codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(75)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(145);
/*</replacement>*/

var Buffer = __webpack_require__(3).Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = __webpack_require__(146);
var _require = __webpack_require__(147),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = __webpack_require__(36).codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
__webpack_require__(0)(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(37);
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || __webpack_require__(37);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;
var _require$codes = __webpack_require__(36).codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = __webpack_require__(37);
__webpack_require__(0)(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(61);
curve.short = __webpack_require__(275);
curve.mont = __webpack_require__(276);
curve.edwards = __webpack_require__(277);


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var common = __webpack_require__(50);
var shaCommon = __webpack_require__(152);
var assert = __webpack_require__(11);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var common = __webpack_require__(50);
var assert = __webpack_require__(11);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(292).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const asn1 = exports;

asn1.bignum = __webpack_require__(9);

asn1.define = __webpack_require__(294).define;
asn1.base = __webpack_require__(297);
asn1.constants = __webpack_require__(298);
asn1.decoders = __webpack_require__(159);
asn1.encoders = __webpack_require__(157);


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const encoders = exports;

encoders.der = __webpack_require__(158);
encoders.pem = __webpack_require__(295);


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);
const Buffer = __webpack_require__(92).Buffer;
const Node = __webpack_require__(93);

// Import DER constants
const der = __webpack_require__(95);

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const decoders = exports;

decoders.der = __webpack_require__(160);
decoders.pem = __webpack_require__(296);


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);

const bignum = __webpack_require__(9);
const DecoderBuffer = __webpack_require__(51).DecoderBuffer;
const Node = __webpack_require__(93);

// Import DER constants
const der = __webpack_require__(95);

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = {"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__(47)
var Buffer = __webpack_require__(2).Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__(9)
var Buffer = __webpack_require__(2).Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__db_controllers_vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_call_communication_callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__profileutils__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils__ = __webpack_require__(198);
// migration done (14-12-21)











// import { handleIncomingCall } from "../modules/call/communication/callAdapter";

/**
 * Handles All Incoming Message IQs from Server
 * @param {any} message
 * @returns true to Indicate that this handler should be called repeatedly
 */
const messageHandler = async message => {
  let item = {},
      carbon = false;
  // Type "error" Message Stanzas
  if (message.getAttribute('type') !== 'error') {
    const received = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["l" /* findXML */])(message.childNodes, 'received'),
          sent = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["l" /* findXML */])(message.childNodes, 'sent');
    // Web-Mobile Sync - If mobile sent request to server, it will be forwarded and recieved here.
    if (sent) {
      carbon = true;
      item = Object(__WEBPACK_IMPORTED_MODULE_9__utils__["l" /* handleSentMsg */])(sent);
    }
    // Handling received msg stanzas
    if (received) {
      // Validating for carbon messages
      if (received.getAttribute('xmlns') === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_30" /* NS_CARBON */]) {
        carbon = true;
        item = Object(__WEBPACK_IMPORTED_MODULE_9__utils__["a" /* handleCarbonMessage */])(received);
        // Incoming call carbon copy
        const callMessage = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["l" /* findXML */])(received.childNodes, 'message');
        Object(__WEBPACK_IMPORTED_MODULE_5__modules_call_communication_callAdapter__["b" /* handleIncomingCall */])(callMessage, true);
      }
    }

    // Handling received msg stanzas - Non Carbon
    if (!carbon && message) {
      item = await Object(__WEBPACK_IMPORTED_MODULE_9__utils__["i" /* handleNonCarbonMessage */])(message);
      // Incoming call
      Object(__WEBPACK_IMPORTED_MODULE_5__modules_call_communication_callAdapter__["b" /* handleIncomingCall */])(message);
    }
    let dbCheck;
    if (item.msgType === 'receiveMessage' || item.msgType === 'carbonReceiveMessage') {
      dbCheck = await Object(__WEBPACK_IMPORTED_MODULE_0__db_Utils__["b" /* dbCheckWithMsgId */])(item.msgId);
    }
    if (!dbCheck) {
      Object.keys(item).length > 0 && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(item);
    }
  }
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["c"] = messageHandler;


/**
 * Handles Presence Stanza sent from Server
 * @param {any} presenceIq
 * @returns true to Indicate that this handler should be called repeatedly
 */
const presenceHandler = presenceIq => {
  let from = presenceIq.getAttribute('from');

  if (Strophe.getNodeFromJid(from) !== Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])()) {
    const type = presenceIq.getAttribute('type');
    from = Strophe.getNodeFromJid(from) + '@' + Object(__WEBPACK_IMPORTED_MODULE_7__connection__["e" /* getServer */])();
    const item = {
      fromUserJid: from,
      status: type !== null ? type : 'online'
    };

    Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().presenceListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().presenceListener(item);
  }
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["f"] = presenceHandler;


/**
 * Sends Acknowledgment as pong when Ping received from Server
 * @param {any} ping
 * @returns true to Indicate that this handler should be called repeatedly
 */
const pingHandler = ping => {
  const pingId = ping.getAttribute('id'),
        from = ping.getAttribute('from'),
        to = ping.getAttribute('to');

  const pong = $iq({
    id: pingId,
    type: 'result',
    to: from,
    from: to
  });

  Object(__WEBPACK_IMPORTED_MODULE_7__connection__["b" /* getConnection */])().connected && Object(__WEBPACK_IMPORTED_MODULE_7__connection__["b" /* getConnection */])().send(pong);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = pingHandler;


/**
 * Handles Stream received from Server
 * @returns true to Indicate that this handler should be called repeatedly
 */
const streamHandler = () => true;
/* harmony export (immutable) */ __webpack_exports__["h"] = streamHandler;


/**
 * Handles New Blocked/Unblocked User received from Server
 * @returns true to Indicate that this handler should be called repeatedly
 */
const blockUserHandler = stanza => {
  const item = Object(__WEBPACK_IMPORTED_MODULE_8__profileutils__["a" /* handleBlockUserIQ */])(stanza);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().blockUserListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().blockUserListener(item);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = blockUserHandler;


/**
 * Handles Friends List IQ received from Server
 * @param {any} friendsIQ
 * @returns true to Indicate that this handler should be called repeatedly
 */
const friendsListHandler = friendsIQ => {
  const item = Object(__WEBPACK_IMPORTED_MODULE_8__profileutils__["e" /* handleFriendsListIQ */])(friendsIQ);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().friendsListListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().friendsListListener(item);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = friendsListHandler;


/**
 * Handles User Profile Details IQ received from Server
 * @param {any} profileIQ
 * @returns true to Indicate that this handler should be called repeatedly
 */
const userProfileHandler = profileIQ => {
  const item = Object(__WEBPACK_IMPORTED_MODULE_8__profileutils__["g" /* handleProfileIQ */])(profileIQ);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().userProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().userProfileListener(item);
  Object(__WEBPACK_IMPORTED_MODULE_1__db_controllers_vcardTable__["c" /* updateVcardDetail */])(item);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["i"] = userProfileHandler;


/**
 * Handles Reply Message IQ received from Server
 * @param {any} message
 * @returns true to Indicate that this handler should be called repeatedly
 */
const replyMessageHandler = message => {
  const item = Object(__WEBPACK_IMPORTED_MODULE_9__utils__["k" /* handleReplyMessage */])(message);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().replyMessageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().replyMessageListener(item);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = replyMessageHandler;


/**
 * Handles Favourite Message IQ received from Server
 * @param {any} listIQ
 * @returns true to Indicate that this handler should be called repeatedly
 */
const favouriteMsgListHandler = listIQ => {
  const query = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_utils__["l" /* findXML */])(listIQ, 'query');
  const type = query.getAttribute('type') || '';
  if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["E" /* GET_FAVOURITE_MESSAGE */]) {
    const item = Object(__WEBPACK_IMPORTED_MODULE_9__utils__["n" /* handleStarredMessage */])(listIQ);
    Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().favouriteMessageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().favouriteMessageListener(item);
  } else {
    Object(__WEBPACK_IMPORTED_MODULE_6__modules_chat__["j" /* getAllFavouriteMessages */])();
  }
  return true;
};
/* unused harmony export favouriteMsgListHandler */


/**
 * Handles Single Chat Message received from Server
 * @param {any} chatIQ
 * @returns true to Indicate that this handler should be called repeatedly
 */
const messageInfoHandler = chatIQ => {
  const item = Object(__WEBPACK_IMPORTED_MODULE_9__utils__["h" /* handleMessageInfoIQ */])(chatIQ);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupMsgInfoListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupMsgInfoListener(item);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["d"] = messageInfoHandler;


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__users__ = __webpack_require__(25);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





let stream = null;
const videoProperties = {
    width: 1280,
    height: 720,
    frameRate: 24
};

/**
 * Get the media devices stream based on given callType
 * @param {*} callType - audio/video/video_only
 */
const getMediaDevicesStream = callType => {
    const audioProperties = {
        noiseSuppression: { exact: true },
        echoCancellation: { exact: true },
        googEchoCancellation: { exact: true },
        googAutoGainControl: { exact: true },
        googNoiseSuppression: { exact: true }
    };
    const constraintObj = {
        "video": {
            audio: _extends({}, audioProperties),
            video: _extends({}, videoProperties)
        },
        "audio": {
            audio: _extends({}, audioProperties),
            video: false
        },
        "video_only": {
            audio: false,
            video: _extends({}, videoProperties)
        }
    };
    const constraints = constraintObj[callType] || constraintObj.default;
    return __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia(constraints);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = getMediaDevicesStream;


/**
 * Get the media device error object & send the error details to client callback listener
 * @param {*} e
 * @param {*} callType
 * @param {*} action
 * @param {*} deviceType
 */
const mediaDevicesError = (e, callType, action, deviceType) => {
    const error = e.name;
    const errorMessage = e.message || e;
    let device = deviceType;
    if (!device) {
        device = callType === "audio" && ["videoUnMute", "callSwitch"].indexOf(action) === -1 ? __WEBPACK_IMPORTED_MODULE_1__constants__["_18" /* MEDIA_DEVICE_MIC */] : __WEBPACK_IMPORTED_MODULE_1__constants__["_17" /* MEDIA_DEVICE_CAMERA */];
    }
    return {
        statusCode: 500,
        message: errorMessage,
        error,
        device,
        action,
        sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["_16" /* MEDIA_ACCESS_ERROR */]
    };
};
/* unused harmony export mediaDevicesError */


/**
 * Get the media devices tracks based on given callType
 * @param {*} callType - audio/video/video_only
 * @param {*} callType - makeCall/attendCall/videoUnMute/callSwitch
 * @param {*} callType - mic/camera
 */
const getMediaDevicesTracks = async (callType, action, deviceType) => {
    try {
        const str = await getMediaDevicesStream(callType);
        return str && str.getTracks() || [];
    } catch (e) {
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["c" /* consoleLog */])(e);
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["c" /* consoleLog */])(e.name);
        return mediaDevicesError(e, callType, action, deviceType);
    }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getMediaDevicesTracks;


/**
 * Get media devices list
 */
const getMediaDevices = () => {
    if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"] && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].enumerateDevices) {
        return __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].enumerateDevices();
    }
};
/* unused harmony export getMediaDevices */


const setStream = str => {
    stream = str;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = setStream;


const getStream = () => stream;
/* unused harmony export getStream */


const stopStream = () => {
    if (stream !== null) {
        const tracks = stream.getTracks();
        for (const mst of tracks) {
            if (mst) {
                mst.stop();
            }
        }
        stream = null;
    }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = stopStream;


const stopVideoTrack = () => {
    if (stream !== null) {
        const tracks = stream.getVideoTracks();
        for (const mst of tracks) {
            if (mst) {
                mst.stop();
            }
        }
    }
};
/* unused harmony export stopVideoTrack */


const muteAudioTrack = () => {
    if (stream !== null) {
        const tracks = stream.getAudioTracks();
        for (const mst of tracks) {
            if (mst) {
                mst.enabled = false;
            }
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = muteAudioTrack;


const unmuteAudioTrack = () => {
    if (stream !== null) {
        const tracks = stream.getAudioTracks();
        for (const mst of tracks) {
            if (mst) {
                mst.enabled = true;
            }
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = unmuteAudioTrack;


const localStreamListener = data => {
    if (data.stream.getVideoTracks() && data.stream.getVideoTracks().length > 0) {
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])({
            sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["G" /* CALL_STATE_USER_TRACK */],
            trackType: data.stream.getVideoTracks()[0].kind,
            track: data.stream.getVideoTracks()[0],
            userJid: data.uniqueId,
            usersStatus: Object(__WEBPACK_IMPORTED_MODULE_3__users__["e" /* getCallUsers */])()
        });
    }
    if (data.stream.getAudioTracks() && data.stream.getAudioTracks().length > 0) {
        Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])({
            sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["G" /* CALL_STATE_USER_TRACK */],
            trackType: data.stream.getAudioTracks()[0].kind,
            track: data.stream.getAudioTracks()[0],
            userJid: data.uniqueId,
            usersStatus: Object(__WEBPACK_IMPORTED_MODULE_3__users__["e" /* getCallUsers */])()
        });
    }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = localStreamListener;


const stopTracks = tracks => {
    for (const mst of tracks) {
        if (mst) {
            mst.stop();
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = stopTracks;


/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_167__;

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Axios */
/* unused harmony export AxiosError */
/* unused harmony export CanceledError */
/* unused harmony export isCancel */
/* unused harmony export CancelToken */
/* unused harmony export VERSION */
/* unused harmony export all */
/* unused harmony export Cancel */
/* unused harmony export isAxiosError */
/* unused harmony export spread */
/* unused harmony export toFormData */
/* unused harmony export AxiosHeaders */
/* unused harmony export HttpStatusCode */
/* unused harmony export formToJSON */
/* unused harmony export getAdapter */
/* unused harmony export mergeConfig */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_axios_js__ = __webpack_require__(317);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__lib_axios_js__["a"]; });


// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const {
  Axios,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken,
  VERSION,
  all,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = __WEBPACK_IMPORTED_MODULE_0__lib_axios_js__["a" /* default */];




/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bind;


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildURL;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_AxiosURLSearchParams_js__ = __webpack_require__(171);





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isURLSearchParams(params) ?
      params.toString() :
      new __WEBPACK_IMPORTED_MODULE_1__helpers_AxiosURLSearchParams_js__["a" /* default */](params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__toFormData_js__ = __webpack_require__(63);




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && Object(__WEBPACK_IMPORTED_MODULE_0__toFormData_js__["a" /* default */])(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ __webpack_exports__["a"] = (AxiosURLSearchParams);


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// eslint-disable-next-line strict
/* harmony default export */ __webpack_exports__["a"] = (null);


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";


/* harmony default export */ __webpack_exports__["a"] = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(target) ? target.length : name;

    if (isLast) {
      if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFormData(formData) && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(formData.entries)) {
    const obj = {};

    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ __webpack_exports__["a"] = (formDataToJSON);


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isCancel;


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__http_js__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xhr_js__ = __webpack_require__(328);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_AxiosError_js__ = __webpack_require__(26);





const knownAdapters = {
  http: __WEBPACK_IMPORTED_MODULE_1__http_js__["a" /* default */],
  xhr: __WEBPACK_IMPORTED_MODULE_2__xhr_js__["a" /* default */]
}

__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ __webpack_exports__["a"] = ({
  getAdapter: (adapters) => {
    adapters = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new __WEBPACK_IMPORTED_MODULE_3__core_AxiosError_js__["a" /* default */](`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new __WEBPACK_IMPORTED_MODULE_3__core_AxiosError_js__["a" /* default */](
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});


/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildFullPath;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_isAbsoluteURL_js__ = __webpack_require__(331);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_combineURLs_js__ = __webpack_require__(332);





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !Object(__WEBPACK_IMPORTED_MODULE_0__helpers_isAbsoluteURL_js__["a" /* default */])(requestedURL)) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_combineURLs_js__["a" /* default */])(baseURL, requestedURL);
  }
  return requestedURL;
}


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeConfig;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AxiosHeaders_js__ = __webpack_require__(42);





const headersToObject = (thing) => thing instanceof __WEBPACK_IMPORTED_MODULE_1__AxiosHeaders_js__["a" /* default */] ? thing.toJSON() : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isPlainObject(target) && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isPlainObject(source)) {
      return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].merge.call({caseless}, target, source);
    } else if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isPlainObject(source)) {
      return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].merge({}, source);
    } else if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const VERSION = "1.5.1";
/* harmony export (immutable) */ __webpack_exports__["a"] = VERSION;


/***/ }),
/* 180 */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);

    return uri;
};

function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
    }
    if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
    }

    return names;
}

function queryKey(uri, query) {
    var data = {};

    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
            data[$1] = $2;
        }
    });

    return data;
}


/***/ }),
/* 181 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(349);
var Socket = __webpack_require__(189);
var Emitter = __webpack_require__(43);
var parser = __webpack_require__(100);
var on = __webpack_require__(190);
var bind = __webpack_require__(191);
var debug = __webpack_require__(65)('socket.io-client:manager');
var indexOf = __webpack_require__(188);
var Backoff = __webpack_require__(366);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    if (timeout === 0) {
      openSub.destroy(); // prevents a race condition with the 'open' event
    }

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(101);
var XHR = __webpack_require__(352);
var JSONP = __webpack_require__(362);
var websocket = __webpack_require__(363);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(103);
var parseqs = __webpack_require__(66);
var parser = __webpack_require__(44);
var inherit = __webpack_require__(67);
var yeast = __webpack_require__(187);
var debug = __webpack_require__(68)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(101);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState && packet.type === 'open') {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(354);

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),
/* 188 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(100);
var Emitter = __webpack_require__(43);
var toArray = __webpack_require__(365);
var on = __webpack_require__(190);
var bind = __webpack_require__(191);
var debug = __webpack_require__(65)('socket.io-client:socket');
var parseqs = __webpack_require__(66);
var hasBin = __webpack_require__(186);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  if (!this.io.reconnecting) this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emitBuffered();
  this.emit('connect');
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};


/***/ }),
/* 190 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),
/* 191 */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__call__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__service_api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_react_native__);










const getRandomString = key => {
  return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["x" /* randomString */])(Math.floor(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["s" /* getRandomNumber */])() * (18 - 12 + 1)) + 12, key, false);
};

/**
 * Geenarate the call initializaion IQ
 * @param {*} dataObj
 */
const getCallInitIq = dataObj => {
  const callInitIq = $iq({
    type: 'set',
    id: getRandomString('A#')
  }).c('query', {
    xmlns: 'jabber:iq:media_call_activities',
    status: 'call_status',
    room_id: dataObj.roomId,
    call_type: dataObj.callType,
    call_from: dataObj.callFrom,
    call_time: dataObj.callTime || '',
    start_time: dataObj.startTime || '',
    end_time: dataObj.endTime || '',
    call_status: dataObj.status,
    group_id: dataObj.groupId || ''
  }).c('users', {});

  if (dataObj.toUsers && Array.isArray(dataObj.toUsers)) {
    dataObj.toUsers.forEach(element => {
      callInitIq.c('user').t(element).up();
    });
  }

  if (dataObj.inviteUsers && Array.isArray(dataObj.inviteUsers)) {
    callInitIq.up().c('invite', {});
    dataObj.inviteUsers.forEach(element => {
      callInitIq.c('user').t(element).up();
    });
  }

  return callInitIq;
};
/* unused harmony export getCallInitIq */


/**
 * Send IQ of given element
 * @param {*} element - XML structure to send
 * @param {*} succCallback
 * @param {*} errCallback
 * @param {*} timeout
 */
const sendIq = (element, succCallback, errCallback, timeout) => new Promise(async (resolve, reject) => {
  const connection = await Object(__WEBPACK_IMPORTED_MODULE_1__strophe_connection__["b" /* getConnection */])();
  if (!connection || !connection.connected) resolve(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["b" /* connectionErrorResponse */])());

  succCallback = succCallback || function (response) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])());
  };

  errCallback = errCallback || function (response) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])("Couldn't Initiate the call. Please try again."));
  };

  await connection.sendIQ(element, succCallback, errCallback);
});
/* unused harmony export sendIq */


/**
 * Get the calling IQ object & send the IQ to respective users
 * @param {*} dataObj
 */
const _sendCalling = dataObj => {
  const callInitIq = getCallInitIq(dataObj);
  Object(__WEBPACK_IMPORTED_MODULE_5__functions__["c" /* consoleLog */])('call data sending calling iq ', callInitIq);
  return sendIq(callInitIq);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = _sendCalling;


/**
 * Get the incoming call details from message XML data and
 * parse it to send to client side
 * @param {*} message
 * @param {*} isCarbon
 */
const _handleIncomingCall = async (message, isCarbon) => {
  if (!message) return undefined;
  const mediacallTag = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'mediacall');
  if (!mediacallTag) return undefined;
  let userJid = message.getAttribute('from');
  userJid = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["u" /* getUserJidFromResource */])(userJid);
  const status = mediacallTag.getAttribute('call_status');
  const roomId = mediacallTag.getAttribute('room_id');
  const callType = mediacallTag.getAttribute('call_type');
  let callTime = mediacallTag.getAttribute('call_time');
  callTime = callTime ? Number(callTime) : callTime;
  const groupId = mediacallTag.getAttribute('group_id') || null;

  const usersTag = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(mediacallTag.childNodes, 'users');
  const usersJson = usersTag ? Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(usersTag) : {};

  const inviteTag = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(mediacallTag.childNodes, 'invite');
  const inviteUsersJson = inviteTag ? Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(inviteTag) : {};

  const messages = {
    data: {
      caller_id: userJid,
      call_status: status,
      room_id: roomId,
      call_type: callType,
      call_time: callTime,
      group_id: groupId,
      users: usersJson,
      inviteUsersJson: inviteUsersJson
    }
  };
  return handleIncomingCall(messages);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = _handleIncomingCall;


const validateAndHandleCallMessage = async message => {
  try {
    var _message$data = message.data;
    _message$data = _message$data === undefined ? {} : _message$data;
    let room_id = _message$data.room_id,
        call_time = _message$data.call_time;

    const token = await Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["v" /* getUserToken */])();
    const apiEndpoints = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["d" /* getApiEndPoints */])();

    let inputdata = {
      callingTime: call_time,
      deviceType: __WEBPACK_IMPORTED_MODULE_8_react_native__["Platform"].OS,
      roomId: room_id
    };

    let apiResponse = await Object(__WEBPACK_IMPORTED_MODULE_6__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_7__helpers_constants__["_15" /* METHOD_POST */], `${apiEndpoints.validateCall}`, inputdata, token, false);

    if (apiResponse.status === 200) {
      if (apiResponse.data.anotherResourceHandledThisCall === false) {
        if (apiResponse.data.validCall) {
          return handleIncomingCall(message);
        } else {
          Object(__WEBPACK_IMPORTED_MODULE_5__functions__["y" /* sendMissedCallDataToClient */])(message);
          await Object(__WEBPACK_IMPORTED_MODULE_5__functions__["w" /* resetCallData */])();
        }
      } else return;
    } else {
      return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(apiResponse.message);
    }
  } catch (err) {
    console.log(err, 'validateAndHandleCallMessage');
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(err);
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = validateAndHandleCallMessage;


const handleIncomingCall = async message => {
  try {
    var _message$data2 = message.data;
    _message$data2 = _message$data2 === undefined ? {} : _message$data2;
    let caller_id = _message$data2.caller_id,
        call_status = _message$data2.call_status,
        room_id = _message$data2.room_id,
        call_type = _message$data2.call_type,
        call_time = _message$data2.call_time,
        group_id = _message$data2.group_id,
        users = _message$data2.users;
    var _message$data2$invite = _message$data2.inviteUsersJson;
    let inviteUsersJson = _message$data2$invite === undefined ? {} : _message$data2$invite;

    let userJid = Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["u" /* getUserJidFromResource */])(caller_id);
    let toUsers = [];
    let usersJson = {};

    if (users) {
      usersJson = typeof users === 'object' ? users : { user: users };
    }

    if (usersJson && usersJson.user) {
      toUsers = Array.isArray(usersJson.user) ? usersJson.user : [usersJson.user];
    }

    let inviteUsers = [];
    if (inviteUsersJson && inviteUsersJson.user) {
      inviteUsers = (await Array.isArray(inviteUsersJson.user)) ? inviteUsersJson.user : [inviteUsersJson.user];
    }

    const item = {
      userJid,
      status: call_status,
      sdkStatus: __WEBPACK_IMPORTED_MODULE_3__constants__["v" /* CALL_STATE_INCOMING_CALL */],
      roomId: room_id,
      callType: call_type,
      callTime: call_time,
      groupId: group_id,
      toUsers
    };

    item['allUsers'] = [userJid, ...toUsers];

    if (call_status === __WEBPACK_IMPORTED_MODULE_3__constants__["K" /* CALL_STATUS_CALLING */]) {
      inviteUsers.map(inviteUserJid => {
        if (item['toUsers'].indexOf(inviteUserJid) === -1) {
          item['toUsers'] = [...item.toUsers, inviteUserJid];
        }
        if (item['allUsers'].indexOf(inviteUserJid) === -1) {
          item['allUsers'] = [...item.allUsers, inviteUserJid];
        }
        return undefined;
      });
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["c" /* consoleLog */])('handleIncomingCall --- ', item);
      Object(__WEBPACK_IMPORTED_MODULE_2__call__["A" /* incomingCall */])(item);
    } else if (call_status === __WEBPACK_IMPORTED_MODULE_3__constants__["w" /* CALL_STATE_INVITE_USERS */]) {
      item['inviteUsers'] = inviteUsers;
      item['allUsers'] = [...item.allUsers, ...inviteUsers];
      item['sdkStatus'] = __WEBPACK_IMPORTED_MODULE_3__constants__["w" /* CALL_STATE_INVITE_USERS */];
      Object(__WEBPACK_IMPORTED_MODULE_5__functions__["c" /* consoleLog */])('handleIncomingCall - Invite Users --- ', item);
      Object(__WEBPACK_IMPORTED_MODULE_2__call__["B" /* receiveInviteUsers */])(item);
    }
    let success = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
    success.data = item;
    return success;
  } catch (error) {
    console.log(error, 'handleIncomingCall');
    return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = handleIncomingCall;


/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__callHandleMessage__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__communication_callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__users__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__janus_index__ = __webpack_require__(70);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };










const CALL_SWITCH_DURATION = 20;

/**
 * Hold the call conversion info(_sdk_callSwitchInfo) object key list. The listed values in this array only can be keys
 * to _sdk_callSwitchInfo array of object.
 */
const _sdk_callSwitchObjKey = ['userCallId', 'userJid', 'status', 'callerDevice', 'intervalId'];

/**
 * Holds the Call Conversion process details such as userJid, Track Sender, status
 * @example
 * {
 *      userCallId: USER_UNIQUE_ID_FOR_CALL,
 *      userJid: USER_JID,
 *      status: accept|decline|request|cancel
 *      callerDevice: web|android|ios
 * }
 */
let _sdk_callSwitchInfo = {};

/**
 * Getter of current call user details
 */
const getCallSwitchInfo = () => {
    return _extends({}, _sdk_callSwitchInfo);
};
/* unused harmony export getCallSwitchInfo */


/**
 * Setter of current call user details
 */
const setCallSwitchInfo = dataObj => {
    if (!dataObj) {
        if (_sdk_callSwitchInfo.intervalId) {
            clearInterval(_sdk_callSwitchInfo.intervalId);
        }
        _sdk_callSwitchInfo = {};
        return;
    }
    if (typeof dataObj !== 'object') return;
    const newDataObj = dataObj;
    for (const key in newDataObj) {
        // _sdk_callSwitchObjKey variable we declared, what are the values could be key to this object
        // that's why, we check condition here, given dataObj key is match with _sdk_callSwitchObjKey array value.
        if (_sdk_callSwitchObjKey.indexOf(key) > -1) {
            _sdk_callSwitchInfo[key] = newDataObj[key];
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = setCallSwitchInfo;


/**
 * Update the unmute status of the users when a user accecpt the request
 */
const callSwitchUserVideoUnmute = () => {
    const callUsers = Object(__WEBPACK_IMPORTED_MODULE_6__users__["e" /* getCallUsers */])();
    callUsers.map(user => {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__functions__["s" /* isUserConnectedCall */])(null, user) && !user.localUser) {
            Object(__WEBPACK_IMPORTED_MODULE_6__users__["a" /* addOrUpdateCallUser */])({
                [__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]]: user[__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]],
                videoMuted: false
            });

            // Send the user mute status
            const dataToClient = {
                userJid: user.userJid,
                sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["B" /* CALL_STATE_MUTE_STATUS */],
                isMuted: false,
                trackType: __WEBPACK_IMPORTED_MODULE_1__constants__["_5" /* CALL_TYPE_VIDEO */]
            };
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
        }
    });
};
/* harmony export (immutable) */ __webpack_exports__["b"] = callSwitchUserVideoUnmute;


const cancelCallSwitch = async () => {
    setCallSwitchInfo();
    Object(__WEBPACK_IMPORTED_MODULE_6__users__["a" /* addOrUpdateCallUser */])({
        [__WEBPACK_IMPORTED_MODULE_0__config__["a" /* _SDK_USER_FILTER_KEY */]]: Object(__WEBPACK_IMPORTED_MODULE_0__config__["i" /* getLocalUserFilterValue */])(),
        videoMuted: true
    });
    // Send the localuser mute status
    const muteMessage = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["j" /* getSendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["H" /* CALL_STATE_VIDEO_MUTE */], {
        payload: {
            isMute: true
        }
    });
    Object(__WEBPACK_IMPORTED_MODULE_4__callHandleMessage__["g" /* handleMuteStatusMsg */])(muteMessage);
    await Object(__WEBPACK_IMPORTED_MODULE_7__janus_index__["h" /* muteVideo */])();
    Object(__WEBPACK_IMPORTED_MODULE_5__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["o" /* CALL_STATE_CALL_SWITCH */], {
        payload: {
            isRequest: false
        }
    });
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
};

const initCallSwitchInterval = () => {
    let timeLeft = CALL_SWITCH_DURATION;
    return setInterval(async () => {
        if (timeLeft === 0) {
            const callSwitchInfo = getCallSwitchInfo();
            clearInterval(callSwitchInfo.intervalId);
            const dataToClient = {
                userJid: callSwitchInfo.userJid,
                sdkStatus: __WEBPACK_IMPORTED_MODULE_1__constants__["o" /* CALL_STATE_CALL_SWITCH */],
                status: __WEBPACK_IMPORTED_MODULE_1__constants__["_3" /* CALL_SWITCH_TIMEOUT */]
            };
            Object(__WEBPACK_IMPORTED_MODULE_2__functions__["x" /* sendDataToClient */])(dataToClient);
            setCallSwitchInfo();
            await cancelCallSwitch();
        } else if (timeLeft < 0) {
            const callSwitchInfo = getCallSwitchInfo();
            callSwitchInfo && clearInterval(callSwitchInfo.intervalId);
        } else {
            timeLeft = timeLeft - 1;
        }
    }, 1000);
};

const doSwitch = async () => {
    // Send the localuser mute status
    await Object(__WEBPACK_IMPORTED_MODULE_7__janus_index__["l" /* unmuteVideo */])();
    const muteMessage = Object(__WEBPACK_IMPORTED_MODULE_2__functions__["j" /* getSendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["H" /* CALL_STATE_VIDEO_MUTE */], {
        payload: {
            isMute: false
        }
    });
    Object(__WEBPACK_IMPORTED_MODULE_4__callHandleMessage__["g" /* handleMuteStatusMsg */])(muteMessage);
};
/* unused harmony export doSwitch */


const requestCallSwitch = async () => {
    const users = Object(__WEBPACK_IMPORTED_MODULE_6__users__["e" /* getCallUsers */])();
    const user = users.find(u => !u.localUser) || {};
    const intervalId = initCallSwitchInterval();
    setCallSwitchInfo({
        userJid: user.userJid,
        userCallId: user.userCallId,
        status: __WEBPACK_IMPORTED_MODULE_1__constants__["_2" /* CALL_SWITCH_REQUEST */],
        callerDevice: __WEBPACK_IMPORTED_MODULE_1__constants__["b" /* CALLER_DEVICE */],
        intervalId
    });

    Object(__WEBPACK_IMPORTED_MODULE_5__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["o" /* CALL_STATE_CALL_SWITCH */], {
        payload: {
            isRequest: true
        }
    });

    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
};

const acceptCallSwitch = async () => {
    await doSwitch();
    // when user accept the request & has media error
    // then send the decline status to remote user
    // To Do

    Object(__WEBPACK_IMPORTED_MODULE_5__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["p" /* CALL_STATE_CALL_SWITCH_RES */], {
        payload: {
            isRequest: true
        }
    });
    callSwitchUserVideoUnmute();
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
};

const declineCallSwitch = () => {
    Object(__WEBPACK_IMPORTED_MODULE_5__communication_callAdapter__["e" /* sendMessage */])(__WEBPACK_IMPORTED_MODULE_1__constants__["p" /* CALL_STATE_CALL_SWITCH_RES */], {
        payload: {
            isRequest: false
        }
    });
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
};

const _callSwitch = async status => {
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__functions__["q" /* isUserAttendedCall */])()) return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('User is not on call.');
    status = status.toLowerCase();
    if ([__WEBPACK_IMPORTED_MODULE_1__constants__["_2" /* CALL_SWITCH_REQUEST */], __WEBPACK_IMPORTED_MODULE_1__constants__["_0" /* CALL_SWITCH_CANCEL */], __WEBPACK_IMPORTED_MODULE_1__constants__["Z" /* CALL_SWITCH_ACCEPT */], __WEBPACK_IMPORTED_MODULE_1__constants__["_1" /* CALL_SWITCH_DECLINE */]].indexOf(status) === -1) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(`Invalid stauts. Status value must be ${__WEBPACK_IMPORTED_MODULE_1__constants__["_2" /* CALL_SWITCH_REQUEST */]} or ${__WEBPACK_IMPORTED_MODULE_1__constants__["_0" /* CALL_SWITCH_CANCEL */]} or ${__WEBPACK_IMPORTED_MODULE_1__constants__["Z" /* CALL_SWITCH_ACCEPT */]} or ${__WEBPACK_IMPORTED_MODULE_1__constants__["_1" /* CALL_SWITCH_DECLINE */]}.`);
    }

    if (status === __WEBPACK_IMPORTED_MODULE_1__constants__["_2" /* CALL_SWITCH_REQUEST */]) {
        return requestCallSwitch();
    } else if (status === __WEBPACK_IMPORTED_MODULE_1__constants__["_0" /* CALL_SWITCH_CANCEL */]) {
        return cancelCallSwitch();
    } else if (status === __WEBPACK_IMPORTED_MODULE_1__constants__["Z" /* CALL_SWITCH_ACCEPT */]) {
        return acceptCallSwitch();
    } else if (status === __WEBPACK_IMPORTED_MODULE_1__constants__["_1" /* CALL_SWITCH_DECLINE */]) {
        return declineCallSwitch();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('Invalid request.');
};
/* harmony export (immutable) */ __webpack_exports__["a"] = _callSwitch;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env node */


// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substring(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' '),
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri +
      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
      '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substring(7, sp), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  description.profile = mline[2];
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
    .map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(codec => {
    wildcardRtcpFb.forEach(fb=> {
      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
        return existingFeedback.type === fb.type &&
          existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substring(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substring(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Create Location in Location Message Detail,
 * @example (realm, params)
 * @example  params as object with following keys
 * @param  mid Required
 * @param  latitude type String
 * @param  longitude type String
 */
const createLocationMsg = (realm, params) => {
  realm.write(() => {
    realm.create('LocationMessageTable', _extends({}, params));
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createLocationMsg;


const getLocationMsg = (realm, mid) => {
  try {
    return realm.objectForPrimaryKey('LocationMessageTable', mid);
  } catch (error) {
    console.log('getLocationMsg', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getLocationMsg;


/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * @typedef ContactMessageDetail
 * @property {string} mid
 * @property {string} name
 * @property {string} phone_number
 * @property {string} active_status
 */

/**
 * Create Contact in Contact Message Detail
 * @param {any} realm
 * @param {ContactMessageDetail} contact
 */
const createContactMsg = (realm, contact) => {
  realm.write(() => {
    realm.create('ContactMessageTable', _extends({}, contact));
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createContactMsg;


const getContactMsg = (realm, mid) => {
  try {
    return realm.objectForPrimaryKey('ContactMessageTable', mid);
  } catch (error) {
    console.log('Error in getContactMsg', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getContactMsg;


/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_native_fs__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_native_fs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_native_fs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__db_controllers_mediaDetailTable__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__service_api__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__common__ = __webpack_require__(45);










const getExtention = filename => {
  // To get the file extension
  const dotIndex = filename.lastIndexOf('.');
  return dotIndex !== -1 ? filename.substring(dotIndex + 1) : undefined;
};

const downloadMedia = async (msgID, addInPending = true) => {
  try {
    if (__WEBPACK_IMPORTED_MODULE_5_react_native__["Platform"].OS === 'ios' && addInPending) {
      Object(__WEBPACK_IMPORTED_MODULE_8__common__["b" /* addPendingDownloads */])(msgID);
    }
    const mediaDetail = await Object(__WEBPACK_IMPORTED_MODULE_2__db_controllers_mediaDetailTable__["b" /* getMediaDetail */])(msgID);
    if (mediaDetail) {
      const imageUrl = await Object(__WEBPACK_IMPORTED_MODULE_0__chat__["o" /* getMediaURL */])(mediaDetail.fileUrl);
      let ext = getExtention(mediaDetail.fileUrl);
      ext = ext[0];
      if (imageUrl.statusCode == 200) {
        const successReturn = Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["B" /* successResponse */])();
        const fileName = 'MFRN_' + Date.now() + '.' + ext;
        const destinationPath = __WEBPACK_IMPORTED_MODULE_1_react_native_fs___default.a.DocumentDirectoryPath + '/' + fileName;
        const response = await Object(__WEBPACK_IMPORTED_MODULE_6__service_api__["a" /* sendRequest */])(__WEBPACK_IMPORTED_MODULE_7__helpers_constants__["_14" /* METHOD_GET */], imageUrl.data.fileUrl, undefined, imageUrl.data.token, '', msgID, '', 'download');
        console.log('SDK downloadMedia response ==>', response);
        if (response.status === 500) {
          const item = {
            msgId: msgID,
            message: response.message
          };
          Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener && Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener(item);
        }
        if (response.message === __WEBPACK_IMPORTED_MODULE_7__helpers_constants__["_25" /* NETWORK_ERROR */]) {
          Object(__WEBPACK_IMPORTED_MODULE_8__common__["b" /* addPendingDownloads */])(msgID);
        }
        if (response.message === __WEBPACK_IMPORTED_MODULE_7__helpers_constants__["_70" /* USER_CANCELLED */]) {
          Object(__WEBPACK_IMPORTED_MODULE_8__common__["i" /* removePendingDownloads */])(msgID);
        }
        let image = btoa(new Uint8Array(response).reduce((data, byte) => data + String.fromCharCode(byte), ''));
        if (image) {
          const base64 = image;
          if (mediaDetail.localPath) await __WEBPACK_IMPORTED_MODULE_1_react_native_fs___default.a.unlink(mediaDetail.localPath);
          await __WEBPACK_IMPORTED_MODULE_1_react_native_fs___default.a.writeFile(destinationPath, base64, 'base64');
          const updateMediaDetail = {
            isDownloaded: 2,
            localPath: fileName
          };
          const returnRes = {
            msgId: msgID,
            isDownloaded: 2,
            local_path: __WEBPACK_IMPORTED_MODULE_5_react_native__["Platform"].OS !== 'ios' ? 'file://' + destinationPath : destinationPath
          };
          const item = {
            msgId: msgID,
            progress: 100,
            local_path: 'file://' + destinationPath
          };
          Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener && Object(__WEBPACK_IMPORTED_MODULE_4__helpers_common__["a" /* callbackListeners */])().mediaDownloadListener(item);
          Object(__WEBPACK_IMPORTED_MODULE_2__db_controllers_mediaDetailTable__["d" /* updateMediaDetailTable */])(msgID, updateMediaDetail);
          successReturn.data = returnRes;
          Object(__WEBPACK_IMPORTED_MODULE_8__common__["i" /* removePendingDownloads */])(msgID);
          return successReturn;
        } else return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('Media download failed');
      } else {
        Object(__WEBPACK_IMPORTED_MODULE_8__common__["b" /* addPendingDownloads */])(msgID);
        return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])(imageUrl.message);
      }
    }
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('Media not found');
  } catch (error) {
    console.log('downloadMedia', error);
    return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('Error in download media file');
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = downloadMedia;


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__msgstanza__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__profileutils__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_profile__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__db_controllers_vcardTable__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__db_controllers_roasterTable__ = __webpack_require__(52);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable prefer-const */
// migration done (14-12-21) - (15-12-21)












const handleIncomingMsg = async (message, msgBody, params) => {
  let msgbody = Strophe.getText(msgBody),
      msgId,
      chatType,
      sendFrom,
      groupId = '';

  // Validating For Group/Single Chat
  if (params.from && !params.from.includes('mix')) {
    chatType = 'chat';
    msgId = message.getAttribute('id');
    sendFrom = params.from;
  } else {
    chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
    const stanzaId = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message, 'submission-id'),
          jid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message, 'jid');
    msgId = Strophe.getText(stanzaId);
    sendFrom = Strophe.getText(jid);
    groupId = Strophe.getNodeFromJid(params.from);
  }

  const userID = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
        publisherId = Strophe.getNodeFromJid(sendFrom),
        toUserJid = message.getAttribute('to');
  userID !== publisherId && Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["b" /* sendDeliveredStatusIQ */])(sendFrom, msgId, groupId);

  // If it is Group Chat - Restrict Message from the Same User (Sent Message should not be Received)
  if (chatType === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] && userID === publisherId) return {};

  try {
    msgbody = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgbody, msgId));
  } catch (error) {}

  let profileDetials = {};
  let roasterDetail = await Object(__WEBPACK_IMPORTED_MODULE_10__db_controllers_roasterTable__["c" /* getRoasterDetail */])(Strophe.getBareJidFromJid(params.from));
  const profileDB = await Object(__WEBPACK_IMPORTED_MODULE_9__db_controllers_vcardTable__["a" /* getVcardDetial */])(Strophe.getBareJidFromJid(params.from));
  if (profileDB) {
    profileDetials = _extends({}, profileDB, {
      colorCode: roasterDetail ? roasterDetail.colourCode : ''
    });
  } else {
    const profile = await Object(__WEBPACK_IMPORTED_MODULE_8__modules_profile__["i" /* getUserProfile */])(Strophe.getNodeFromJid(params.from));
    if (profile.statusCode == 200) {
      profileDetials.nickName = profile.data.nickName;
      profileDetials.image = profile.data.image;
      profileDetials.colorCode = Object(__WEBPACK_IMPORTED_MODULE_7__db_Utils__["h" /* getRandomColorCode */])();
    } else {
      profileDetials.nickName = Strophe.getNodeFromJid(params.from);
      profileDetials.image = '';
      profileDetials.colorCode = Object(__WEBPACK_IMPORTED_MODULE_7__db_Utils__["h" /* getRandomColorCode */])();
    }
  }

  const handleIncngMsg = {
    msgId: msgId,
    msgBody: msgbody,
    chatType: chatType,
    publisherId: publisherId,
    msgType: 'receiveMessage',
    timestamp: Number(params.timeStamp),
    msgStatus: chatType === 'chat' ? 1 : 0,
    toUserId: Strophe.getNodeFromJid(toUserJid),
    toUserJid: Strophe.getBareJidFromJid(toUserJid),
    fromUserId: Strophe.getNodeFromJid(params.from),
    publisherJid: Strophe.getBareJidFromJid(sendFrom),
    fromUserJid: Strophe.getBareJidFromJid(params.from),
    profileDetails: _extends({}, profileDetials)
  };
  Object(__WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__["g" /* handleCreateIncomingMsg */])(handleIncngMsg);
  return handleIncngMsg;
};
/* unused harmony export handleIncomingMsg */


const handleAcknowledgement = async acknowledge => {
  const fromUserJid = acknowledge.getAttribute('sent_to');
  const fromUserId = Strophe.getNodeFromJid(fromUserJid),
        msgId = acknowledge.getAttribute('id'),
        type = acknowledge.getAttribute('type');

  const handleAck = _extends({
    type: type,
    msgId: msgId,
    fromUserJid: fromUserJid,
    fromUserId: fromUserId,
    msgType: 'acknowledge',
    timestamp: Date.now()
  }, type === 'acknowledge' && {
    msgStatus: 0,
    publisherId: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])()
  });
  Object(__WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__["i" /* updateMessageStatus */])(handleAck);
  return handleAck;
};
/* unused harmony export handleAcknowledgement */


const handleInfoMessages = (infoMsg, params) => {
  const vCard = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(infoMsg, 'vCard');
  const groupProfile = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(vCard);
  const publisherJid = infoMsg.getAttribute('done_by');

  const item = {
    publisherJid: publisherJid,
    groupJid: params.from,
    msgType: 'profileUpdated',
    groupProfile: groupProfile,
    timestamp: Number(params.timeStamp)
  };
  const msgItem = {
    msgId: '',
    msgBody: {},
    chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
    publisherId: Strophe.getNodeFromJid(publisherJid),
    msgType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */],
    profileUpdatedStatus: 'profileUpdated',
    timestamp: Number(params.timeStamp),
    msgStatus: 0,
    userId: '',
    userJid: '',
    fromUserId: Strophe.getNodeFromJid(params.from),
    publisherJid: Strophe.getBareJidFromJid(publisherJid),
    fromUserJid: Strophe.getBareJidFromJid(params.from)
  };
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(msgItem);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener(item);
  return {};
};
/* unused harmony export handleInfoMessages */


const handleGroupParticipantAdded = (participant, params) => {
  const userJid = participant.getAttribute('jid'),
        grpNickName = participant.getAttribute('nick'),
        publisherJson = params.publisherVcard ? Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(params.publisherVcard) : {};

  const item = {
    newUserJid: userJid,
    groupJid: params.from,
    groupId: Strophe.getNodeFromJid(params.from),
    groupName: grpNickName,
    msgType: 'userAdded',
    userProfile: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(participant).vCard,
    newUserId: Strophe.getNodeFromJid(userJid),
    publisherProfile: publisherJson.vCard || {},
    timestamp: parseInt(Number(params.timeStamp) / 1000),
    publisherJid: Strophe.getBareJidFromJid(params.publisher)
  };
  const msgItem = {
    msgId: '',
    msgBody: {},
    chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
    publisherId: Strophe.getNodeFromJid(params.publisher),
    msgType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */],
    profileUpdatedStatus: 'userAdded',
    timestamp: Number(params.timeStamp),
    msgStatus: 0,
    fromUserId: Strophe.getNodeFromJid(params.from),
    fromUserJid: Strophe.getBareJidFromJid(params.from),
    userId: Strophe.getNodeFromJid(userJid),
    publisherJid: Strophe.getBareJidFromJid(params.publisher),
    userJid: Strophe.getBareJidFromJid(userJid)
  };
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(msgItem);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener(item);
  return {};
};
/* unused harmony export handleGroupParticipantAdded */


const handleParticipantRemoval = (itemsIQ, params) => {
  const itemId = params.retract.getAttribute('id'),
        itemIQ = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(itemsIQ, 'item');
  const publisherJid = itemIQ.getAttribute('publisher'),
        jid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(itemIQ, 'jid');
  const userJid = Strophe.getText(jid);

  const msgType = publisherJid === Strophe.getText(jid) ? 'userLeft' : 'userRemoved';
  const item = {
    itemId: itemId,
    userJid: userJid,
    msgType: msgType,
    groupJid: params.from,
    publisherJid: publisherJid,
    timestamp: parseInt(Number(params.timeStamp) / 1000)
  };
  const msgItem = {
    msgId: '',
    msgBody: {},
    chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
    publisherId: Strophe.getNodeFromJid(params.publisher),
    msgType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */],
    profileUpdatedStatus: msgType,
    timestamp: Number(params.timeStamp),
    msgStatus: 0,
    userId: Strophe.getNodeFromJid(userJid),
    userJid: Strophe.getBareJidFromJid(userJid),
    fromUserId: Strophe.getNodeFromJid(params.from),
    publisherJid: Strophe.getBareJidFromJid(params.publisher),
    fromUserJid: Strophe.getBareJidFromJid(params.from)
  };
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(msgItem);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener(item);
  return {};
};
/* unused harmony export handleParticipantRemoval */


const handleNewAdmin = (infoIQ, params) => {
  const userJid = infoIQ.getAttribute('new_admin'),
        publisherJid = infoIQ.getAttribute('done_by');

  const item = {
    newAdminJid: userJid,
    msgType: 'madeAdmin',
    groupJid: params.from,
    doneBy: publisherJid
  };
  const msgItem = {
    msgId: '',
    msgBody: {},
    chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
    publisherId: Strophe.getNodeFromJid(publisherJid),
    msgType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */],
    profileUpdatedStatus: 'madeAdmin',
    timestamp: Number(params.timeStamp),
    msgStatus: 0,
    userId: Strophe.getNodeFromJid(userJid),
    userJid: Strophe.getBareJidFromJid(userJid),
    fromUserId: Strophe.getNodeFromJid(params.from),
    publisherJid: Strophe.getBareJidFromJid(publisherJid),
    fromUserJid: Strophe.getBareJidFromJid(params.from)
  };
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(msgItem);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener(item);
  return {};
};
/* unused harmony export handleNewAdmin */


const handleFavouriteMessage = favourite => {
  const type = favourite.getAttribute('type'),
        msgId = favourite.getAttribute('message_id'),
        fromUserJid = favourite.getAttribute('to_user');
  const favouriteStatus = type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_51" /* SET_FAVOURITE_MESSAGE */] ? 1 : 0;

  if (type !== 'delete_favourite_message') {
    const item = {
      msgId,
      fromUserJid,
      favouriteStatus,
      fromUserId: Strophe.getNodeFromJid(fromUserJid)
    };
    Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().favouriteMessageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().favouriteMessageListener(item);
  }
  return {};
};

const handleCarbonMessage = received => {
  let msgBody, receivedTime;
  const receivedMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(received.childNodes, 'message');
  const from = receivedMsg.getAttribute('from');

  // Handling Message Timestamp
  const timeStamp = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'timestamp');
  if (timeStamp) receivedTime = timeStamp.getAttribute('time');

  // Handling Incoming Message
  const bodyMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'body');
  if (bodyMsg) {
    let messageId, chatType, sendFrom;
    if (from && !from.includes('mix')) {
      chatType = 'chat';
      messageId = receivedMsg.getAttribute('id');
      sendFrom = from;
    } else {
      chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
      const stanzaId = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg, 'submission-id'),
            jid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg, 'jid');
      messageId = Strophe.getText(stanzaId);
      sendFrom = Strophe.getText(jid);
    }
    msgBody = Strophe.getText(bodyMsg);

    const userID = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
          publisherId = Strophe.getNodeFromJid(sendFrom),
          toUserJid = receivedMsg.getAttribute('to');

    // If it is Group Chat - Restrict Message from the Same User (Sent Message should not be Received)
    if (chatType === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] && userID === publisherId) return {};

    try {
      msgBody = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgBody, messageId));
    } catch (error) {}

    return {
      msgStatus: 1,
      msgId: messageId,
      msgBody: msgBody,
      chatType: chatType,
      publisherId: publisherId,
      msgType: 'carbonReceiveMessage',
      timestamp: Number(receivedTime),
      toUserId: Strophe.getNodeFromJid(toUserJid),
      toUserJid: Strophe.getBareJidFromJid(toUserJid),
      fromUserId: Strophe.getNodeFromJid(from),
      publisherJid: Strophe.getBareJidFromJid(sendFrom),
      fromUserJid: Strophe.getBareJidFromJid(from)
    };
  }

  // Handling Acknowledge
  const acknowledge = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'acknowledge');
  if (acknowledge) {
    const id = acknowledge.getAttribute('id'),
          type = acknowledge.getAttribute('type'),
          sent_to = acknowledge.getAttribute('sent_to');

    return {
      msgId: id,
      type: type,
      msgStatus: 0,
      fromUserJid: sent_to,
      msgType: 'carbonSentAcknowledge',
      fromUserId: Strophe.getNodeFromJid(sent_to),
      publisherId: Strophe.getNodeFromJid(sent_to)
    };
  }

  const composing = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'composing');
  if (composing) {
    // CarbonComposing indicates composing received from another carbon user
    const groupJid = composing.getAttribute('group_id') || '';
    return {
      msgType: 'carbonComposing',
      fromUserId: Strophe.getNodeFromJid(from),
      groupId: Strophe.getNodeFromJid(groupJid)
    };
  }

  const gone = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'gone');
  if (gone) {
    // carbonGone indicates gone received from another carbon user
    const groupJid = gone.getAttribute('group_id') || '';
    return {
      msgType: 'carbonGone',
      fromUserId: Strophe.getNodeFromJid(from),
      groupId: Strophe.getNodeFromJid(groupJid)
    };
  }

  // Delivery Message
  const delivered = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'delivered');
  if (delivered) {
    const msgStatus = delivered.getAttribute('message_status') || '0',
          groupId = delivered.getAttribute('group_id') || '';

    let fromUserId, fromUserJid, publisherId, publisherJid;
    if (groupId) {
      fromUserId = groupId;
      fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(groupId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
      publisherJid = Strophe.getBareJidFromJid(from);
      publisherId = Strophe.getNodeFromJid(from);
    } else {
      fromUserId = Strophe.getNodeFromJid(from);
      fromUserJid = Strophe.getBareJidFromJid(from);
      publisherJid = fromUserJid;
      publisherId = fromUserId;
    }

    return {
      fromUserJid,
      fromUserId,
      publisherId,
      publisherJid,
      msgId: delivered.getAttribute('id'),
      msgType: 'carbonDelivered',
      msgStatus: Number(msgStatus),
      timestamp: Number(receivedTime)
    };
  }

  // Seen Message
  const seen = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'seen');
  if (seen) {
    const msgStatus = seen.getAttribute('message_status') || '0',
          groupId = seen.getAttribute('group_id') || '';

    let fromUserId, fromUserJid, publisherId, publisherJid;
    if (groupId) {
      fromUserId = groupId;
      fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(groupId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
      publisherJid = Strophe.getBareJidFromJid(from);
      publisherId = Strophe.getNodeFromJid(from);
    } else {
      fromUserId = Strophe.getNodeFromJid(from);
      fromUserJid = Strophe.getBareJidFromJid(from);
      publisherJid = fromUserJid;
      publisherId = fromUserId;
    }

    return {
      fromUserJid,
      fromUserId,
      publisherId,
      publisherJid,
      msgId: seen.getAttribute('id'),
      msgType: 'carbonSeen',
      msgStatus: Number(msgStatus),
      timestamp: Number(receivedTime)
    };
  }

  const logout = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'logout');
  if (logout) return { msgType: 'carbonLogout' };

  // Recall Message (Remove Message For All)
  const recall = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'recall');
  if (recall) {
    let chatType = recall.getAttribute('chat_type') || '',
        groupId = recall.getAttribute('group_id') || '';

    let fromUserId = Strophe.getNodeFromJid(from);
    if (chatType === 'normal') {
      fromUserId = groupId;
      chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
    }

    return {
      msgType: 'carbonRecallMessage',
      fromUserJid: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId, chatType),
      timestamp: Number(receivedTime),
      msgId: recall.getAttribute('id'),
      fromUserId,
      chatType
    };
  }

  const messageClear = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'messageclear');
  if (messageClear) {
    const type = messageClear.getAttribute('type'),
          chatType = messageClear.getAttribute('chat_type');

    if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["t" /* CLEAR_MESSAGE */]) {
      const fromUserId = messageClear.getAttribute('remove_message_user'),
            deleteType = messageClear.getAttribute('delete_type');
      const msgType = Number(deleteType) === 1 ? 'carbonClearChat' : 'carbonDeleteChat';

      return {
        msgType,
        fromUserId,
        chatType: chatType === 'normal' ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] : chatType
      };
    } else if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["s" /* CLEAR_ALL */]) {
      const deleteType = messageClear.getAttribute('delete_type');
      const msgType = Number(deleteType) === 1 ? 'carbonClearAllChat' : 'carbonDeleteAllChat';

      return {
        msgType
      };
    } else if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["y" /* DELETE_MESSAGE */]) {
      const messageIds = messageClear.getAttribute('message_ids'),
            lastMesageId = messageClear.getAttribute('last_message_id'),
            fromUserId = messageClear.getAttribute('to_user'),
            msgIds = [];
      const tempIds = messageIds.replace('&apos;', '');
      const tempArray = tempIds.split(',');
      tempArray.forEach(value => msgIds.push(value.replace(/[']/g, '')));

      return {
        fromUserId,
        msgType: 'carbonDeleteMessage',
        chatType: chatType,
        msgIds: msgIds,
        lastMsgId: lastMesageId
      };
    }
  }

  const userBlocked = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'userblocked');
  if (userBlocked) return Object(__WEBPACK_IMPORTED_MODULE_5__profileutils__["c" /* handleBlockedUser */])(userBlocked, 'carbon');

  const groupDelete = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'groupdelete');
  if (groupDelete) {
    return {
      chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
      msgType: 'carbonDeleteChat',
      fromUserId: groupDelete.getAttribute('group_id')
    };
  }

  const favourite = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(receivedMsg.childNodes, 'favourite');
  if (favourite) return handleFavouriteMessage(favourite);

  return {};
};
/* harmony export (immutable) */ __webpack_exports__["a"] = handleCarbonMessage;


const handleRecentChatIQ = chatIQ => {
  const recentChats = [],
        participants = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(chatIQ.childNodes, 'participants');

  if (participants && participants.childNodes && participants.childNodes.length) {
    for (let i = 0; i < participants.childNodes.length; i++) {
      let msgBody = {};
      const chat = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(participants.childNodes[i]);
      const publisher = chat.publisher,
            time = chat.time,
            status = chat.status,
            message = chat.message,
            msgid = chat.msgid,
            chattype = chat.chattype,
            recallstatus = chat.recallstatus,
            user = chat.user,
            msgfrom = chat.msgfrom,
            Message_type = chat.Message_type,
            unread = chat.unread,
            Notification_to = chat.Notification_to,
            mute_status = chat.mute_status;


      try {
        msgBody = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(message, msgid));
      } catch (error) {
        msgBody = {};
      }

      if (msgfrom) {
        const chatType = chattype === 'normal' ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] : chattype,
              msgType = Message_type === 'notification' || Message_type === '0' ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */] : Message_type;

        const item = {
          msgBody,
          msgId: msgid,
          toUserId: user,
          createdAt: time,
          msgType: msgType,
          chatType: chatType,
          fromUserId: msgfrom,
          publisherId: publisher,
          userId: Notification_to,
          msgStatus: Number(status),
          unreadCount: Number(unread),
          muteStatus: Number(mute_status),
          deleteStatus: Number(recallstatus),
          timestamp: new Date(time).getTime()
        };
        if (chatType === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] && msgType === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */]) {
          item.msgBody = {};
          item.profileUpdatedStatus = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["p" /* getGroupMessageStatus */])(message, publisher, Notification_to);
        }
        recentChats.push(item);
      }
    }
  }
  return recentChats;
};
/* harmony export (immutable) */ __webpack_exports__["j"] = handleRecentChatIQ;


const handleSingleChatIQ = (chatIQ, sendSeen) => {
  const messages = [],
        jid = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
        chatHistory = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(chatIQ, 'history');
  if (chatHistory && chatHistory.childNodes) {
    for (let i = 0; i < chatHistory.childNodes.length; i++) {
      const chat = chatHistory.childNodes[i];
      const chatElements = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(chat);
      let messageContent = {};
      const row_id = chatElements.row_id,
            time = chatElements.time;
      var _chatElements$message = chatElements.message_time;
      const message_time = _chatElements$message === undefined ? 0 : _chatElements$message,
            status = chatElements.status,
            recallstatus = chatElements.recallstatus,
            favouritestatus = chatElements.favouritestatus,
            favouriteby = chatElements.favouriteby;
      var _chatElements$message2 = chatElements.message;
      const message = _chatElements$message2 === undefined ? '' : _chatElements$message2,
            msgid = chatElements.msgid;
      var _chatElements$user = chatElements.user;
      const user = _chatElements$user === undefined ? '' : _chatElements$user;


      const isReceiver = user.indexOf(jid) === -1,
            userJid = `${user}@${Object(__WEBPACK_IMPORTED_MODULE_4__connection__["e" /* getServer */])()}`;
      try {
        if (isReceiver) {
          if (Number(status) === 0) {
            Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["b" /* sendDeliveredStatusIQ */])(userJid, msgid);
            Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["e" /* sendSeenStatusIQ */])(userJid, msgid);
          } else if (Number(status) === 1 && sendSeen) {
            Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["e" /* sendSeenStatusIQ */])(userJid, msgid);
          }
        }
        const cypherText = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(message, msgid);
        messageContent = JSON.parse(cypherText);
      } catch (err) {}

      const item = {
        rowId: row_id,
        chatType: 'chat',
        msgId: msgid,
        createdAt: time,
        fromUserId: user,
        fromUserJid: userJid,
        msgBody: messageContent,
        favouriteBy: favouriteby,
        msgStatus: Number(status),
        timestamp: Number(message_time),
        deleteStatus: Number(recallstatus),
        favouriteStatus: Number(favouritestatus)
      };
      messages.push(item);
    }
  }
  return messages;
};
/* harmony export (immutable) */ __webpack_exports__["m"] = handleSingleChatIQ;


const handleSentMsg = sent => {
  let item = {};
  const composing = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(sent.childNodes, 'composing'),
        gone = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(sent.childNodes, 'gone');

  if (!composing && !gone) {
    const message = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(sent.childNodes, 'message');
    let msgBody, sentTime, sentChatType;
    const from = message.getAttribute('from'),
          msgId = message.getAttribute('id'),
          to = message.getAttribute('to');

    // Handling Message Timestamp
    const timeStamp = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'timestamp');
    if (timeStamp) sentTime = timeStamp.getAttribute('time');

    // Delivered Message
    const delivered = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'delivered');
    if (delivered) {
      return {
        msgId: delivered.getAttribute('id') || '',
        fromUserJid: from,
        fromUserId: Strophe.getNodeFromJid(from),
        msgType: 'carbonSentDelivered',
        timestamp: Number(sentTime)
      };
    }

    // Seen Message
    const seen = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'seen');
    if (seen) {
      return {
        toUserJid: to,
        fromUserJid: from,
        msgType: 'carbonSentSeen',
        timestamp: Number(sentTime),
        msgId: seen.getAttribute('id') || '',
        toUserId: Strophe.getNodeFromJid(to),
        fromUserId: Strophe.getNodeFromJid(from)
      };
    }

    // Recall (Delete For Everyone)
    const recall = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'recall');
    if (recall) {
      const chatType = recall.getAttribute('chat_type') || '';
      return {
        msgType: 'carbonSentRecall',
        fromUserJid: to,
        timestamp: Number(sentTime),
        msgId: recall.getAttribute('id') || '',
        fromUserId: Strophe.getNodeFromJid(to),
        chatType: chatType === 'normal' ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] : chatType
      };
    }

    // Handling Incoming Message
    const bodyMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'body');
    if (bodyMsg) {
      sentChatType = to.includes('mix') ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] : 'chat';
      msgBody = Strophe.getText(bodyMsg);
      try {
        msgBody = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgBody, msgId));
      } catch (error) {}

      item = {
        msgId: msgId,
        msgStatus: 0,
        toUserJid: to,
        msgBody: msgBody,
        fromUserJid: from,
        publisherJid: from,
        chatType: sentChatType,
        msgType: 'carbonSentMessage',
        toUserId: Strophe.getNodeFromJid(to),
        fromUserId: Strophe.getNodeFromJid(from),
        publisherId: Strophe.getNodeFromJid(from),
        timestamp: Number(sentTime)
      };
    }
  }
  return item;
};
/* harmony export (immutable) */ __webpack_exports__["l"] = handleSentMsg;


const handleMediaIQ = mediaIQ => {
  const mediaMessages = [],
        chatMedia = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(mediaIQ, 'mediamessages');

  if (chatMedia && chatMedia.childNodes && chatMedia.childNodes.length) {
    for (let i = 0; i < chatMedia.childNodes.length; i++) {
      const media = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(chatMedia.childNodes[i]);
      const msgid = media.msgid,
            message_time = media.message_time;

      let messageContent = {},
          msgBody;
      try {
        const messageBody = chatMedia.childNodes[i].tagName === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] ? media.body : media.message;
        const decryptedText = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(messageBody, msgid);
        msgBody = JSON.parse(decryptedText);
      } catch (error) {}

      if (msgBody) {
        messageContent = msgBody;
        messageContent.chatType = chatMedia.childNodes[i].tagName;
        messageContent.msgId = msgid;
        messageContent.timestamp = Number(message_time);
        mediaMessages.push(messageContent);
      }
    }
  }
  return mediaMessages;
};
/* harmony export (immutable) */ __webpack_exports__["f"] = handleMediaIQ;


const handleMessageById = message => {
  const messages = [],
        replyMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message, 'replymessage');

  if (replyMsg && replyMsg.childNodes && replyMsg.childNodes.length) {
    for (let i = 0; i < replyMsg.childNodes.length; i++) {
      const chat = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(replyMsg.childNodes[i]);
      const chat_type = chat.chat_type,
            msgId = chat.msgid,
            msgBody = chat.body,
            toUser = chat.to_user,
            msgStatus = chat.status,
            createdAt = chat.created_at,
            deletedBy = chat.deleted_by,
            replyFromUser = chat.replyfromuser,
            deleteStatus = chat.recall_status,
            toNotification = chat.to_notification,
            fromNotification = chat.from_notification,
            msgNotification = chat.message_notification;


      let msgBodyContent = {};
      try {
        msgBodyContent = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgBody, msgId));
      } catch (err) {}

      let msgType,
          chatType,
          fromUserId,
          fromUserJid,
          publisherId,
          publisherJid,
          userId = '',
          userJid = '',
          profileUpdatedStatus = '';

      if (chat_type === 'normal') {
        chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
        fromUserId = replyFromUser;
        fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
        publisherId = Strophe.getNodeFromJid(fromNotification);
        publisherJid = fromNotification;
        profileUpdatedStatus = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["p" /* getGroupMessageStatus */])(msgNotification, publisherId, toNotification);
        userId = toNotification;
        userJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(toNotification);
      } else {
        chatType = chat_type;
        const userID = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])();
        fromUserId = userID === replyFromUser ? toUser : replyFromUser;
        fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId);
        publisherId = replyFromUser;
        publisherJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(replyFromUser);
      }
      msgType = msgNotification === '0' ? msgBodyContent.message_type : __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */];

      const item = {
        msgId,
        userId,
        userJid,
        msgType,
        publisherId,
        chatType: chatType,
        createdAt: createdAt,
        deletedBy: deletedBy,
        profileUpdatedStatus,
        msgBody: msgBodyContent,
        fromUserId: fromUserId,
        fromUserJid: fromUserJid,
        publisherJid: publisherJid,
        msgStatus: Number(msgStatus),
        deleteStatus: Number(deleteStatus),
        timestamp: new Date(createdAt).getTime()
      };
      messages.push(item);
    }
  }
  let messageObj = {};
  if (messages.length > 0) {
    ;
    messageObj = messages[0];
  }Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().singleMessageDataListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().singleMessageDataListener(messageObj);
  return messageObj;
};
/* harmony export (immutable) */ __webpack_exports__["g"] = handleMessageById;


const handleReplyMessage = message => {
  const messages = [],
        replyMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message, 'replymessage');

  if (replyMsg && replyMsg.childNodes && replyMsg.childNodes.length) {
    for (let i = 0; i < replyMsg.childNodes.length; i++) {
      const chat = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(replyMsg.childNodes[i]);

      const chat_type = chat.chat_type,
            replyMsgId = chat.msgid,
            msgBody = chat.body,
            deletedBy = chat.deleted_by,
            replyFromUser = chat.replyfromuser,
            deleteStatus = chat.deleted_status,
            fromNotification = chat.from_notification;


      let replyMsgContent = {};
      try {
        replyMsgContent = JSON.parse(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgBody, replyMsgId));
      } catch (err) {}

      let chatType, fromUserId, groupId;

      if (chat_type === 'normal') {
        chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
        fromUserId = Strophe.getNodeFromJid(fromNotification);
        groupId = replyFromUser;
      } else {
        chatType = chat_type;
        fromUserId = replyFromUser;
      }
      const oldMsgId = replyMsg.getAttribute('id') || replyMsgContent.replyTo || '';
      const item = {
        fromUserId,
        oldMsgId,
        groupId,
        replyMsgId,
        replyMsgContent,
        chatType: chatType,
        deletedBy: deletedBy,
        deleteStatus: Number(deleteStatus)
      };
      messages.push(item);
    }
  }
  return messages.length > 0 ? messages[0] : {};
};
/* harmony export (immutable) */ __webpack_exports__["k"] = handleReplyMessage;


const handleForwardMessage = message => {
  const forwardMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message, 'replymessage');

  if (forwardMsg && forwardMsg.childNodes && forwardMsg.childNodes.length) {
    const chat = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(forwardMsg.childNodes[0]);
    const msgId = chat.msgid,
          msgBody = chat.body;

    let msgContent = {};

    try {
      const decrypt = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(msgBody, msgId);
      msgContent = JSON.parse(decrypt);
    } catch (err) {}

    return {
      statusCode: 200,
      message: 'Success',
      data: msgContent
    };
  }
  return {
    statusCode: 201,
    message: 'Error'
  };
};
/* harmony export (immutable) */ __webpack_exports__["b"] = handleForwardMessage;


const handleStarredMessage = listIQ => {
  const messages = [],
        starredMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(listIQ, 'history');

  if (starredMsg && starredMsg.childNodes && starredMsg.childNodes.length) {
    for (let i = 0; i < starredMsg.childNodes.length; i++) {
      const chat = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(starredMsg.childNodes[i]);
      const row_id = chat.row_id,
            user = chat.user,
            status = chat.status,
            time = chat.time,
            chat_type = chat.chat_type,
            favourite_date = chat.favourite_date,
            message = chat.message,
            msgid = chat.msgid,
            from_notification = chat.from_notification,
            messageto = chat.messageto,
            favmsgid = chat.favmsgid;
      var _chat$message_time = chat.message_time;
      const message_time = _chat$message_time === undefined ? 0 : _chat$message_time;


      let messageContent;
      try {
        const cypherText = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(message, favmsgid);
        messageContent = JSON.parse(cypherText);
      } catch (err) {}

      let chatType, fromUserId, fromUserJid, publisherId, publisherJid;

      if (chat_type === 'normal') {
        chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
        fromUserId = user;
        fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
        publisherId = Strophe.getNodeFromJid(from_notification);
        publisherJid = from_notification;
      } else {
        chatType = chat_type;
        const userID = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])();
        fromUserId = userID === user ? messageto : user;
        fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId);
        publisherId = user;
        publisherJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(user);
      }

      const item = {
        fromUserId,
        fromUserJid,
        publisherId,
        publisherJid,
        msgId: msgid,
        rowId: row_id,
        createdAt: time,
        favouriteStatus: 1,
        favMsgId: favmsgid,
        chatType: chatType,
        favDate: favourite_date,
        msgBody: messageContent,
        msgStatus: Number(status),
        timestamp: Number(message_time),
        favouriteBy: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
        msgType: messageContent.message_type
      };
      messages.push(item);
    }
  }
  return messages;
};
/* harmony export (immutable) */ __webpack_exports__["n"] = handleStarredMessage;


const handleGroupsListIQ = groupsIQ => {
  const groups = [],
        group = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(groupsIQ, 'group');

  if (group && group.childNodes && group.childNodes.length) {
    for (let i = 0; i < group.childNodes.length; i++) {
      const groupDetails = group.childNodes[i];
      const groupId = groupDetails.getAttribute('groupid') || '',
            createdAt = groupDetails.getAttribute('createddate') || '',
            itemId = groupDetails.getAttribute('item_id') || '',
            userType = groupDetails.getAttribute('affiliation') || '';

      const vCardJson = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(groupDetails);
      let groupName = '',
          groupImage = '';

      if (vCardJson && vCardJson.vCard) {
        groupName = vCardJson.vCard.nickName || '';
        groupImage = vCardJson.vCard.image || '';
      }

      const item = {
        itemId: itemId,
        groupId: groupId,
        timestamp: new Date(createdAt).getTime(),
        groupName: groupName,
        groupImage: groupImage,
        userType: userType
      };
      groups.push(item);
    }
  }
  return groups;
};
/* harmony export (immutable) */ __webpack_exports__["e"] = handleGroupsListIQ;


const handleGroupParticipantsIQ = participantsIQ => {
  const grpParticipants = [],
        groupJid = participantsIQ.getAttribute('from'),
        participants = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(participantsIQ, 'participants');

  if (participants && participants.childNodes && participants.childNodes.length) {
    for (let i = 0; i < participants.childNodes.length; i++) {
      const participant = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(participants.childNodes[i]);
      const jid = participant.jid,
            affiliation = participant.affiliation,
            itemid = participant.itemid,
            created_at = participant.created_at;
      var _participant$user_pro = participant.user_profile;
      _participant$user_pro = _participant$user_pro === undefined ? {} : _participant$user_pro;
      const vCard = _participant$user_pro.vCard;


      const item = {
        itemId: itemid,
        userJid: jid,
        userId: Strophe.getNodeFromJid(jid),
        userType: affiliation,
        timestamp: new Date(created_at).getTime(),
        userProfile: vCard || {}
      };
      grpParticipants.push(item);
    }
  }
  return {
    groupJid: groupJid,
    participants: grpParticipants
  };
};
/* harmony export (immutable) */ __webpack_exports__["d"] = handleGroupParticipantsIQ;


const handleGroupDelete = deleteIQ => {
  const item = {
    chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
    msgType: 'deleteChat',
    fromUserId: deleteIQ.getAttribute('group_id')
  };
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().messageListener(item);
  Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener && Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["a" /* callbackListeners */])().groupProfileListener(item);
  return {};
};
/* unused harmony export handleGroupDelete */


const handleGroupChatIQ = (chatIQ, sendSeen) => {
  const messages = [],
        jid = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
        chatHistory = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(chatIQ, 'history');

  if (chatHistory && chatHistory.childNodes) {
    for (let i = 0; i < chatHistory.childNodes.length; i++) {
      const chat = chatHistory.childNodes[i];
      const chatElements = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(chat);
      let messageContent = '';
      const row_id = chatElements.row_id,
            time = chatElements.time;
      var _chatElements$message3 = chatElements.message_time;
      const message_time = _chatElements$message3 === undefined ? 0 : _chatElements$message3,
            status = chatElements.status,
            recallstatus = chatElements.recallstatus,
            favouriteby = chatElements.favouriteby,
            body = chatElements.body,
            msgid = chatElements.msgid,
            user = chatElements.user,
            fromuser = chatElements.fromuser,
            message_notification = chatElements.message_notification,
            to_notification = chatElements.to_notification,
            msgtype = chatElements.msgtype,
            gstatus = chatElements.gstatus,
            favouritestatus = chatElements.favouritestatus;


      let msgType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */];
      if (msgtype !== '0') {
        try {
          msgType = msgtype;
          const cypherText = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["f" /* decryptMsg */])(body, msgid);
          messageContent = JSON.parse(cypherText);

          const isReceiver = fromuser.indexOf(jid) === -1;
          if (isReceiver) {
            if (Number(status) === 0) {
              Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["b" /* sendDeliveredStatusIQ */])(fromuser, msgid, user);
              Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["e" /* sendSeenStatusIQ */])(fromuser, msgid, user);
            } else if (Number(status) === 1 && sendSeen) {
              Object(__WEBPACK_IMPORTED_MODULE_1__msgstanza__["e" /* sendSeenStatusIQ */])(fromuser, msgid, user);
            }
          }
        } catch (err) {}
      }
      const publisherId = fromuser.split('@').length > 1 ? Strophe.getNodeFromJid(fromuser) : fromuser;
      const item = {
        rowId: row_id,
        chatType: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */],
        msgId: msgid,
        createdAt: time,
        fromUserId: user,
        publisherId: publisherId,
        msgBody: messageContent,
        favouriteBy: favouriteby,
        msgStatus: Number(gstatus),
        timestamp: Number(message_time),
        deleteStatus: Number(recallstatus),
        userId: to_notification,
        status: Number(message_notification),
        msgType: msgType,
        favouriteStatus: Number(favouritestatus)
      };
      if (msgType === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["Q" /* GROUP_PROFILE_UPDATE */]) {
        item.msgBody = {};
        item.profileUpdatedStatus = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["p" /* getGroupMessageStatus */])(message_notification, publisherId, to_notification);
      }
      messages.push(item);
    }
  }
  return messages;
};
/* harmony export (immutable) */ __webpack_exports__["c"] = handleGroupChatIQ;


const handleMessageInfoIQ = msgInfoIQ => {
  const participants = [],
        query = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(msgInfoIQ, 'query'),
        group = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(msgInfoIQ, 'group');
  const from = msgInfoIQ.getAttribute('from'),
        msgId = query.getAttribute('message_id');

  if (group && group.childNodes) {
    for (let i = 0; i < group.childNodes.length; i++) {
      const participant = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["E" /* xml2json */])(group.childNodes[i]);
      const user = participant.user,
            seentime = participant.seentime,
            status = participant.status,
            receivetime = participant.receivetime;

      const item = {
        userId: user,
        seenTime: seentime,
        msgStatus: Number(status),
        deliveredTime: receivetime
      };
      participants.push(item);
    }
  }
  return {
    msgId: msgId,
    groupJid: from,
    participants: participants,
    groupId: Strophe.getNodeFromJid(from)
  };
};
/* harmony export (immutable) */ __webpack_exports__["h"] = handleMessageInfoIQ;


const handleDeleteMessages = async deleteIQ => {
  const type = deleteIQ.getAttribute('type'),
        chatType = deleteIQ.getAttribute('chat_type');
  let item = {};

  if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["t" /* CLEAR_MESSAGE */]) {
    const fromUserId = deleteIQ.getAttribute('remove_message_user'),
          deleteType = deleteIQ.getAttribute('delete_type');

    const msgType = Number(deleteType) === 1 ? 'clearChat' : 'deleteChat';
    item = {
      msgType,
      fromUserId,
      chatType: chatType === 'normal' ? __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */] : chatType
    };
  } else if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["s" /* CLEAR_ALL */]) {
    const deleteType = deleteIQ.getAttribute('delete_type');
    const msgType = Number(deleteType) === 1 ? 'clearAllChat' : 'deleteAllChat';

    item = {
      msgType
    };
  } else if (type === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["y" /* DELETE_MESSAGE */]) {
    const messageIds = deleteIQ.getAttribute('message_ids'),
          lastMesageId = deleteIQ.getAttribute('last_message_id'),
          fromUserId = deleteIQ.getAttribute('to_user'),
          msgIds = [];
    const tempIds = messageIds.replace('&apos;', '');
    const tempArray = tempIds.split(',');
    tempArray.forEach(value => msgIds.push(value.replace(/[']/g, '')));
    const dbCheck = await Object(__WEBPACK_IMPORTED_MODULE_7__db_Utils__["b" /* dbCheckWithMsgId */])(lastMesageId);
    item = {
      fromUserId,
      msgType: 'deleteMessage',
      chatType: chatType,
      msgIds: msgIds,
      lastMsgId: dbCheck ? lastMesageId : ''
    };
  }
  return item;
};
/* unused harmony export handleDeleteMessages */


const handleGroupActivities = (eventMsg, params) => {
  let publisher = '';

  // Info Message to handle Group Profile Update
  const infoMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(eventMsg.childNodes, 'info');
  if (infoMsg) {
    const status = infoMsg.getAttribute('status');
    if (status && status === __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["R" /* GROUP_PROFILE_UPDATED */]) return handleInfoMessages(infoMsg, params);
    return handleNewAdmin(infoMsg, params);
  }

  // Item Message to get the Publisher (Id who added the participant to the Group)
  const item = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(eventMsg.childNodes, 'item');
  if (item) publisher = item.getAttribute('publisher');
  params.publisher = publisher;

  // Message to handle Group New Participant Added
  const participant = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(eventMsg.childNodes, 'participant');
  if (participant) {
    const publisherVcard = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(eventMsg.childNodes, 'publisher');
    params.publisherVcard = publisherVcard || '';
    return handleGroupParticipantAdded(participant, params);
  }

  // Remove Participant/Exit Group Handler
  const retract = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(eventMsg.childNodes, 'retract');
  params.retract = retract;
  if (retract) return handleParticipantRemoval(eventMsg.childNodes, params);
  return {};
};
/* unused harmony export handleGroupActivities */


const handleNonCarbonMessage = async message => {
  let receivedTime = 0;
  const userJID = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["v" /* getloggedinUserJid */])(),
        from = message.getAttribute('from'),
        msgId = message.getAttribute('id');

  const params = {
    from,
    msgId,
    userJID
  };

  // Handling Message Timestamp
  const timeStamp = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'timestamp');
  if (timeStamp) receivedTime = timeStamp.getAttribute('time');
  params.timeStamp = receivedTime;

  // Handling Received Message
  const msgBody = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'body');
  if (msgBody) return handleIncomingMsg(message, msgBody, params);

  // Handling Logout - When User is Logged in With Multiple Sessions
  const logout = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'logout');
  if (logout) return { msgType: 'logout' };

  // Handling Acknowledgement for Sent Message
  const acknowledge = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'acknowledge');
  if (acknowledge) return handleAcknowledgement(acknowledge);

  // Typing Status
  const composing = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'composing');
  if (composing) {
    const groupJid = composing.getAttribute('group_id') || '';
    return {
      msgType: 'composing',
      fromUserId: Strophe.getNodeFromJid(from),
      groupId: Strophe.getNodeFromJid(groupJid)
    };
  }

  // Typing Gone Status
  const gone = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'gone');
  if (gone) {
    const groupJid = gone.getAttribute('group_id') || '';
    return {
      msgType: 'gone',
      fromUserId: Strophe.getNodeFromJid(from),
      groupId: Strophe.getNodeFromJid(groupJid)
    };
  }

  // Delivery Message
  const delivered = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'delivered');
  if (delivered) {
    const msgStatus = delivered.getAttribute('message_status') || '0',
          groupId = delivered.getAttribute('group_id') || '';

    let fromUserId, fromUserJid, publisherId, publisherJid;
    if (groupId) {
      fromUserId = groupId;
      fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(groupId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
      publisherJid = Strophe.getBareJidFromJid(params.from);
      publisherId = Strophe.getNodeFromJid(params.from);
    } else {
      fromUserId = Strophe.getNodeFromJid(params.from);
      fromUserJid = Strophe.getBareJidFromJid(params.from);
      publisherJid = fromUserJid;
      publisherId = fromUserId;
    }

    const handleDelivered = {
      fromUserJid,
      fromUserId,
      publisherId,
      publisherJid,
      msgId: delivered.getAttribute('id') || '',
      msgType: 'delivered',
      msgStatus: Number(msgStatus),
      timestamp: Number(params.timeStamp)
    };
    Object(__WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__["i" /* updateMessageStatus */])(handleDelivered);
    return handleDelivered;
  }

  // Seen Message
  const seen = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'seen');
  if (seen) {
    const msgStatus = seen.getAttribute('message_status') || '0',
          groupId = seen.getAttribute('group_id') || '';

    let fromUserId, fromUserJid, publisherId, publisherJid;
    if (groupId) {
      fromUserId = groupId;
      fromUserJid = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(groupId, __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */]);
      publisherJid = Strophe.getBareJidFromJid(params.from);
      publisherId = Strophe.getNodeFromJid(params.from);
    } else {
      fromUserId = Strophe.getNodeFromJid(params.from);
      fromUserJid = Strophe.getBareJidFromJid(params.from);
      publisherJid = fromUserJid;
      publisherId = fromUserId;
    }

    const handleSeen = {
      fromUserJid,
      fromUserId,
      publisherId,
      publisherJid,
      msgId: seen.getAttribute('id') || '',
      msgType: 'seen',
      msgStatus: Number(msgStatus),
      timestamp: params.timeStamp
    };
    Object(__WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__["i" /* updateMessageStatus */])(handleSeen);

    return handleSeen;
  }

  // Recall Message (Remove Message For All)
  const recall = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'recall');
  if (recall) {
    let chatType = recall.getAttribute('chat_type') || '',
        groupId = recall.getAttribute('group_id') || '';

    let fromUserId = Strophe.getNodeFromJid(params.from);
    if (chatType === 'normal') {
      fromUserId = groupId;
      chatType = __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["L" /* GROUPCHAT */];
    }
    const recallObj = {
      msgType: 'recallMessage',
      fromUserJid: Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["m" /* formatUserIdToJid */])(fromUserId, chatType),
      timestamp: params.timeStamp,
      msgId: recall.getAttribute('id') || '',
      fromUserId,
      chatType
    };
    const msgId = recallObj.msgId,
          fromUserJid = recallObj.fromUserJid;

    const msgIdArr = msgId ? [msgId] : [];
    Object(__WEBPACK_IMPORTED_MODULE_6__db_controllers_messageTable__["c" /* deleteMessagesForEveryoneDB */])(fromUserJid, msgIdArr);
    return recallObj;
  }

  // Blocked User Handling
  const userBlocked = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'userblocked');
  if (userBlocked) return Object(__WEBPACK_IMPORTED_MODULE_5__profileutils__["c" /* handleBlockedUser */])(userBlocked);

  // Clear/Delete Messages
  const messageClear = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'messageclear');
  if (messageClear) return handleDeleteMessages(messageClear);

  // Group Delete
  const groupDelete = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'groupdelete');
  if (groupDelete) return handleGroupDelete(groupDelete);

  // Event Messages - Group Activities
  const eventMsg = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'event');
  if (eventMsg) return handleGroupActivities(eventMsg, params);

  const favourite = Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["l" /* findXML */])(message.childNodes, 'favourite');
  if (favourite) return handleFavouriteMessage(favourite);

  return {};
};
/* harmony export (immutable) */ __webpack_exports__["i"] = handleNonCarbonMessage;


/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__realmDB__ = __webpack_require__(13);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Create UserDetail in UserDetailsTable
 * @example realm, params
 *  @param key: string,
 * @param value: string,
 */



const createConfigCredentialsTable = (realm, params) => {
  try {
    const userData = realm.objectForPrimaryKey('ConfigCredentialsTable', params.key);
    if (userData) {
      realm.write(() => {
        userData.value = params.value;
      });
    } else {
      realm.write(() => {
        realm.create('ConfigCredentialsTable', _extends({}, params));
      });
    }
  } catch (error) {
    console.log('createConfigCredentialsTable', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createConfigCredentialsTable;


const getConfigCredentialsTable = async keyParam => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_0__realmDB__["a" /* getRealmDB */])();
    const userData = realm.objectForPrimaryKey('ConfigCredentialsTable', keyParam);
    let userDetails = {};
    if (userData) {
      Object.assign(userDetails, JSON.parse(userData.value));
    }
    return userDetails;
  } catch (error) {
    console.log('getConfigCredentialsTable', error);
    return {};
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = getConfigCredentialsTable;


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getGroupMsgInfo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_constants__ = __webpack_require__(6);
// migration done (13-12-21)






/**
 * Create a New Group
 * @example SDK.createGroup("My Group", ["111111@xmppdomain"], "");
 * @param {String} groupName - Group Name
 * @param {Array} participants - Array of User Jid (Username with Domain)
 * @param {String} groupImage - Group Image URL
 * @returns {Object} Success/Error Response
 */
const createGroup = (groupName, participants, groupImage) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupName",
      value: groupName,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_50" /* REQUIRED */]
    }, {
      key: "participants",
      value: participants,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      const participantsJid = participants.every(el => __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["m" /* BARE_JID */].test(el));
      if (participantsJid) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["c" /* createGroupIQ */])(groupName, participants, groupImage);
      }
      return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["D" /* validationErrorResponse */])("Invalid Participant(s) Jid");
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = createGroup;


/**
 * Add Participants to the Group
 * @example SDK.addParticipants("1111111111123456@mix.xmppdomain", "My Group", ["111111@xmppdomain"]);
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @param {String} groupName - Group Name
 * @param {String} participants - Array of User Jid (Username with Domain)
 * @returns {Object} Success/Error Response
 */
const addParticipants = (groupJid, groupName, participants) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "groupName",
      value: groupName,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_50" /* REQUIRED */]
    }, {
      key: "participants",
      value: participants,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["h" /* ARRAY_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      const participantsJid = participants.every(el => __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["m" /* BARE_JID */].test(el));
      if (participantsJid) return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["a" /* addParticipantsIQ */])(groupJid, groupName, participants);
      return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["D" /* validationErrorResponse */])("Invalid Participant(s) Jid");
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = addParticipants;


/**
 * Set Group Profile Information
 * @example SDK.setGroupProfile("1111111111123456@mix.xmppdomain", "SampleGroupName", File);
 * @example SDK.setGroupProfile("1111111111123456@mix.xmppdomain", "SampleGroupName", "http://domain/sample.png");
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @param {String} groupName -  Name of the Group
 * @param {File Object / String} groupImage - File Object/ Image Url
 * @returns {Promise} Success/Error Response and mediaUrl of the Image
 */
const setGroupProfile = async (groupJid, groupName, groupImage = "") => {
  try {
    const response = await Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "groupName",
      value: groupName,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return await Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["v" /* setGroupProfileIQ */])(groupJid, groupName, groupImage);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["i"] = setGroupProfile;


/**
 * Get the List of Groups in which the Current User is Present
 * @example SDK.getGroupsList();
 * @returns {Object} Success/Error Response with Data
 */
const getGroupsList = () => {
  try {
    return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["j" /* getGroupsListIQ */])();
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getGroupsList;


/**
 * Get the Group Profile Information
 * @example SDK.getGroupProfile("1111111111123456@mix.xmppdomain")
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @returns {Object} Success/Error Response (Emit array of objects. It will be received in callbacks.groupProfileListener)
 */
const getGroupProfile = groupJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["i" /* getGroupProfileIQ */])(groupJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["e"] = getGroupProfile;


/**
 * Get Groups Participants List
 * @example SDK.getGroupParticipants("1111111111123456@mix.xmppdomain")
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @returns {Object} Success/Error Response with Data
 */
const getGroupParticipants = groupJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["h" /* getGroupParticipantsIQ */])(groupJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = getGroupParticipants;


/**
 * Remove Participants from the Group
 * @example SDK.groupRemoveMember("1111111111123456@mix.xmppdomain", "4444444444@xmppdomain", false)
 * @example SDK.groupRemoveMember("1111111111123456@mix.xmppdomain", "4444444444@xmppdomain", true)
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @param {String} userJid - User Jid (Jid with Domain)
 * @param {Boolean} isAdmin - isAdmin - true/false
 * @returns {Object} Success/Error Response
 */
const removeParticipant = (groupJid, userJid, isAdmin) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "userJid",
      value: userJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }, {
      key: "isAdmin",
      value: isAdmin,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["s" /* removeParticipantIQ */])(groupJid, userJid, isAdmin);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = removeParticipant;


/**
 * Make Member as Admin to the Group
 * @example SDK.makeAsAdmin("1111111111123456@mix.xmppdomain","5555555555@xmppdomain")
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @param {String} userJid - User Jid (Jid with Domain)
 * @returns {Object} Success/Error Response
 */
const makeAsAdmin = (groupJid, userJid) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "userJid",
      value: userJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["o" /* makeAsAdminIQ */])(groupJid, userJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = makeAsAdmin;


/**
 * User Exit from the Group
 * @example SDK.userExitGroup("1111111111123456@mix.xmppdomain","5555555555@xmppdomain", true);
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @param {String} userJid - User Jid (Jid with Domain)
 * @param {Boolean} isAdmin - isAdmin - true/false
 * @returns {Object} Success/Error Response
 */
const userExitGroup = (groupJid, userJid, isAdmin) => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "userJid",
      value: userJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_0" /* JID_FORMAT_REQUIRED */]
    }, {
      key: "isAdmin",
      value: isAdmin,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["o" /* BOOLEAN_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      // Using Method of Removeparticipant
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["s" /* removeParticipantIQ */])(groupJid, userJid, isAdmin, "exit");
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["k"] = userExitGroup;


/**
 * User Deletes the Group
 * @example SDK.userDeleteGroup("1111111111123456@mix.xmppdomain");
 * @param {String} groupJid - Group Jid (Jid with Domain)
 * @returns {Object} Success/Error Response
 */
const userDeleteGroup = groupJid => {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["z" /* userDeleteGroupIQ */])(groupJid);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
};
/* harmony export (immutable) */ __webpack_exports__["j"] = userDeleteGroup;


/**
 * Get Message Info of Group Message
 * @example SDK.getGroupMsgInfo("1111111111123456@xmppdomain","123abc456")
 * @param {String} groupJid - Group Jid (Username with Domain)
 * @param {String} msgId - Unique Id of the Message
 * @returns {Object} Success/Error Response with Data
 */
function getGroupMsgInfo(groupJid, msgId) {
  try {
    const response = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_common__["b" /* clientSideValidation */])([{
      key: "groupJid",
      value: groupJid,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_1" /* JID_GROUP_REQUIRED */]
    }, {
      key: "msgId",
      value: msgId,
      rules: __WEBPACK_IMPORTED_MODULE_3__helpers_constants__["_50" /* REQUIRED */]
    }]);
    if (response.statusCode === 200) {
      return Object(__WEBPACK_IMPORTED_MODULE_0__strophe_chatiqstanza__["g" /* getGroupMsgInfoIQ */])(groupJid, msgId);
    }
    return response;
  } catch (error) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["j" /* errorResponse */])(error.message);
  }
}

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(202);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SDK", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["a"]; });


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_polyfills__ = __webpack_require__(203);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__initialize__ = __webpack_require__(388);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_app_Utils__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__service_auth__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_react_native_get_random_values__ = __webpack_require__(389);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_react_native_get_random_values___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_react_native_get_random_values__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__db_Utils__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__modules_app_appState__ = __webpack_require__(390);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__modules_app_common__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__modules_utils__ = __webpack_require__(46);
// migration done (15-12-21)

/* eslint-disable @typescript-eslint/no-var-requires */



// initializing polyfillers
Object(__WEBPACK_IMPORTED_MODULE_0__helpers_polyfills__["a" /* polyfillers */])();









/** import * as Call from "./modules/call/initialize"; */
 // crypto.getRandomValues polyfill






__webpack_require__(393).config();

Object(__WEBPACK_IMPORTED_MODULE_12__modules_app_appState__["a" /* appStateHandler */])();

const getFriendsList = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["e" /* getFriendsList */],
      getUserProfile = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["i" /* getUserProfile */],
      getLastSeen = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["f" /* getLastSeen */],
      blockUser = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["b" /* blockUser */],
      unblockUser = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["q" /* unblockUser */],
      getUsersIBlocked = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["k" /* getUsersIBlocked */],
      getUsersWhoBlockedMe = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["m" /* getUsersWhoBlockedMe */],
      setUserProfile = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["n" /* setUserProfile */],
      getCurrentUserJid = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["d" /* getCurrentUserJid */],
      getUserToken = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["j" /* getUserToken */],
      setUserToken = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["o" /* setUserToken */],
      getTranslateLanguages = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["h" /* getTranslateLanguages */],
      translateText = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["p" /* translateText */],
      getUsersList = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["l" /* getUsersList */],
      getStatusList = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["g" /* getStatusList */],
      addProfileStatus = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["a" /* addProfileStatus */],
      deleteProfileStatus = __WEBPACK_IMPORTED_MODULE_3__src_modules_profile__["c" /* deleteProfileStatus */];
const getRecentChats = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["s" /* getRecentChats */],
      getRecentChatsDB = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["t" /* getRecentChatsDB */],
      getChatMessages = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["l" /* getChatMessages */],
      getChatMessagesDB = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["m" /* getChatMessagesDB */],
      sendTextMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["G" /* sendTextMessage */],
      sendImageMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["B" /* sendImageMessage */],
      sendAudioMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["y" /* sendAudioMessage */],
      sendVideoMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["J" /* sendVideoMessage */],
      sendDocumentMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["A" /* sendDocumentMessage */],
      sendLocationMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["C" /* sendLocationMessage */],
      sendContactMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["z" /* sendContactMessage */],
      sendMediaMessageData = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["E" /* sendMediaMessageData */],
      sendSeenStatus = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["F" /* sendSeenStatus */],
      getMediaMessages = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["n" /* getMediaMessages */],
      getReplyMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["u" /* getReplyMessage */],
      forwardMessages = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["h" /* forwardMessages */],
      forwardMessagesToMultipleUsers = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["i" /* forwardMessagesToMultipleUsers */],
      updateFavouriteStatus = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["L" /* updateFavouriteStatus */],
      getAllFavouriteMessages = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["j" /* getAllFavouriteMessages */],
      removeAllFavouriteMessages = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["w" /* removeAllFavouriteMessages */],
      clearChat = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["b" /* clearChat */],
      deleteChat = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["e" /* deleteChat */],
      clearAllChat = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["a" /* clearAllChat */],
      deleteAllChat = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["d" /* deleteAllChat */],
      deleteMessagesForMe = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["g" /* deleteMessagesForMe */],
      deleteMessagesForEveryone = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["f" /* deleteMessagesForEveryone */],
      sendTypingStatus = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["I" /* sendTypingStatus */],
      sendTypingGoneStatus = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["H" /* sendTypingGoneStatus */],
      showChatNotification = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["K" /* showChatNotification */],
      getMessageById = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["p" /* getMessageById */],
      getMediaURL = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["o" /* getMediaURL */],
      updateMuteNotification = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["M" /* updateMuteNotification */],
      getMessageInfo = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["q" /* getMessageInfo */],
      clearDBData = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["c" /* clearDBData */],
      getNotificationData = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["r" /* getNotificationData */],
      messageSearch = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["v" /* messageSearch */],
      updateRecentChatUnreadCount = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["N" /* updateRecentChatUnreadCount */],
      sendMediaMessage = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["D" /* sendMediaMessage */],
      getCallNotification = __WEBPACK_IMPORTED_MODULE_1__src_modules_chat__["k" /* getCallNotification */];
const createGroup = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["b" /* createGroup */],
      addParticipants = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["a" /* addParticipants */],
      setGroupProfile = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["i" /* setGroupProfile */],
      getGroupsList = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["f" /* getGroupsList */],
      getGroupParticipants = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["d" /* getGroupParticipants */],
      getGroupProfile = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["e" /* getGroupProfile */],
      removeParticipant = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["h" /* removeParticipant */],
      makeAsAdmin = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["g" /* makeAsAdmin */],
      userExitGroup = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["k" /* userExitGroup */],
      userDeleteGroup = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["j" /* userDeleteGroup */],
      getGroupMsgInfo = __WEBPACK_IMPORTED_MODULE_2__src_modules_groupchat__["c" /* getGroupMsgInfo */];
const downloadMedia = __WEBPACK_IMPORTED_MODULE_6__modules_app_Utils__["a" /* downloadMedia */];
const makeVoiceCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["t" /* makeVoiceCall */],
      makeVideoCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["s" /* makeVideoCall */],
      answerCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["b" /* answerCall */],
      declineCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["f" /* declineCall */],
      endCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["h" /* endCall */],
      callEngaged = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["c" /* callEngaged */],
      callReceived = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["d" /* callReceived */],
      muteAudio = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["u" /* muteAudio */],
      muteVideo = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["v" /* muteVideo */],
      inviteUsers = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["o" /* inviteUsers */],
      requestVideoCallSwitch = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["w" /* requestVideoCallSwitch */],
      cancelVideoCallSwitchRequest = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["e" /* cancelVideoCallSwitchRequest */],
      acceptVideoCallSwitchRequest = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["a" /* acceptVideoCallSwitchRequest */],
      declineVideoCallSwitchRequest = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["g" /* declineVideoCallSwitchRequest */],
      isRemoteVideoMuted = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["r" /* isRemoteVideoMuted */],
      isRemoteAudioMuted = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["q" /* isRemoteAudioMuted */],
      getCallInfo = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["j" /* getCallInfo */],
      isAllUsersVideoMuted = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["p" /* isAllUsersVideoMuted */],
      sendCustomData = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["x" /* sendCustomData */],
      endUserFromCall = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["i" /* endUserFromCall */],
      getUserCallStatus = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["l" /* getUserCallStatus */],
      getCallLogs = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["k" /* getCallLogs */],
      showCallNotification = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["y" /* showCallNotification */],
      startScreenShare = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["z" /* startScreenShare */],
      stopScreenShare = __WEBPACK_IMPORTED_MODULE_7__modules_call_initialize__["A" /* stopScreenShare */];


const _SDK = {
  initializeSDK: __WEBPACK_IMPORTED_MODULE_5__initialize__["a" /* initializeSDK */],
  connect: __WEBPACK_IMPORTED_MODULE_8__service_auth__["a" /* connect */],
  login: __WEBPACK_IMPORTED_MODULE_8__service_auth__["c" /* login */],
  register: __WEBPACK_IMPORTED_MODULE_8__service_auth__["e" /* register */],
  syncContacts: __WEBPACK_IMPORTED_MODULE_8__service_auth__["f" /* syncContacts */],
  logout: __WEBPACK_IMPORTED_MODULE_8__service_auth__["d" /* logout */],
  getFriendsList,
  getUserProfile,
  getLastSeen,
  blockUser,
  unblockUser,
  getUsersIBlocked,
  getUsersWhoBlockedMe,
  getRecentChats,
  activeChatUser: __WEBPACK_IMPORTED_MODULE_13__modules_app_common__["a" /* activeChatUser */],
  getRecentChatsDB,
  getChatMessages,
  getChatMessagesDB,
  getMessageInfo,
  sendTextMessage,
  sendImageMessage,
  sendAudioMessage,
  sendVideoMessage,
  sendDocumentMessage,
  sendLocationMessage,
  sendContactMessage,
  sendMediaMessageData,
  sendSeenStatus,
  getMediaMessages,
  getReplyMessage,
  forwardMessages,
  forwardMessagesToMultipleUsers,
  updateFavouriteStatus,
  getAllFavouriteMessages,
  removeAllFavouriteMessages,
  clearChat,
  deleteChat,
  clearAllChat,
  deleteAllChat,
  deleteMessagesForMe,
  deleteMessagesForEveryone,
  sendTypingStatus,
  sendTypingGoneStatus,
  createGroup,
  addParticipants,
  setUserProfile,
  setGroupProfile,
  getGroupsList,
  getGroupProfile,
  getGroupParticipants,
  removeParticipant,
  makeAsAdmin,
  userExitGroup,
  userDeleteGroup,
  getGroupMsgInfo,
  getCurrentUserJid,
  getUserToken,
  setUserToken,
  makeVoiceCall,
  makeVideoCall,
  // generateQrCode,
  answerCall,
  declineCall,
  endCall,
  callEngaged,
  callReceived,
  muteAudio,
  muteVideo,
  inviteUsers,
  requestVideoCallSwitch,
  cancelVideoCallSwitchRequest,
  acceptVideoCallSwitchRequest,
  declineVideoCallSwitchRequest,
  isRemoteVideoMuted,
  isRemoteAudioMuted,
  getCallInfo,
  isAllUsersVideoMuted,
  sendCustomData,
  endUserFromCall,
  getUserCallStatus,
  getCallLogs,
  startScreenShare,
  stopScreenShare,
  showCallNotification,
  decryptMsg: __WEBPACK_IMPORTED_MODULE_4__helpers_utils__["f" /* decryptMsg */],
  showChatNotification,
  getMessageById,
  getMediaURL,
  getTranslateLanguages,
  translateText,
  updateMuteNotification,
  getJid: __WEBPACK_IMPORTED_MODULE_11__helpers_common__["m" /* getJid */],
  getUsersList,
  profileUpdate: __WEBPACK_IMPORTED_MODULE_14__modules_utils__["e" /* profileUpdate */],
  getStatusList,
  addProfileStatus,
  deleteProfileStatus,
  downloadMedia,
  clearDBData,
  setShouldKeepConnectionWhenAppGoesBackground: __WEBPACK_IMPORTED_MODULE_12__modules_app_appState__["b" /* setShouldKeepConnectionWhenAppGoesBackground */],
  getNotificationData,
  getRandomColorCode: __WEBPACK_IMPORTED_MODULE_10__db_Utils__["h" /* getRandomColorCode */],
  messageSearch,
  getHashSha256: __WEBPACK_IMPORTED_MODULE_4__helpers_utils__["q" /* getHashSha256 */],
  updateRecentChatUnreadCount,
  sendMediaMessage,
  randomString: __WEBPACK_IMPORTED_MODULE_4__helpers_utils__["x" /* randomString */],
  decryptProfileDetails: __WEBPACK_IMPORTED_MODULE_4__helpers_utils__["g" /* decryptProfileDetails */],
  getCallNotification
};

if (!global.SDK) {
  global.SDK = _SDK;
}

const SDK = _SDK;
/* harmony export (immutable) */ __webpack_exports__["a"] = SDK;

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(8)))

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_base_64__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_base_64___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_base_64__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xmldom_xmldom__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xmldom_xmldom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__xmldom_xmldom__);
/* eslint-disable prefer-destructuring */

// import XMLParser from "react-xml-parser";

// const DomParser = require("dom-parser");
// eslint-disable-next-line @typescript-eslint/no-var-requires
// const jsdom = require("jsdom");
// const { JSDOM } = jsdom;
// require("jsdom-global")();
// global.DOMParser = XMLParser;
// let XMLdocument;
// new DOMParser().parseFromString("", "application/xml");
/**
 * polyfillers function to initiate or apply all the polyfills needed to make it work in React Native
 */
const polyfillers = () => {
  // strophe hacks
  // window.DOMParser = DOMParser;
  // XMLdocument = new DOMParser().parseFromString("<?xml version='1.0'?>", "text/xml");
  // window.document = XMLdocument;
  // HTMLDocument = new DOMParser().parseFromString("<html><body /></html>", "text/html");
  // window.document = XMLdocument;
  // DOMParser Hacks
  // if (!global.DOMParser) {
  console.log("global DOM Parser before", global.DOMParser);
  global.DOMParser = __WEBPACK_IMPORTED_MODULE_1__xmldom_xmldom__["DOMParser"];
  console.log("global DOM Parser after", global.DOMParser);
  // }
  // atob & btoa Hacks
  if (!global.btoa) {
    global.btoa = __WEBPACK_IMPORTED_MODULE_0_base_64__["encode"];
  }
  if (!global.atob) {
    global.atob = __WEBPACK_IMPORTED_MODULE_0_base_64__["decode"];
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = polyfillers;


// import * as StropheLib from "strophe.js";
// export const $iq = StropheLib.$iq;
// export const $build = StropheLib.$build;
// export const $msg = StropheLib.$msg;
// export const $pres = StropheLib.$pres;
// export const Strophe = StropheLib.Strophe;
// export const NS = StropheLib.Strophe.NS;
// export const Status = StropheLib.Strophe.Status;
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(8)))

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/base64 v1.0.0 by @mathias | MIT license */
;(function(root) {

	// Detect free variables `exports`.
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`.
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code, and use
	// it as `root`.
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var InvalidCharacterError = function(message) {
		this.message = message;
	};
	InvalidCharacterError.prototype = new Error;
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	var error = function(message) {
		// Note: the error messages used throughout this file match those used by
		// the native `atob`/`btoa` implementation in Chromium.
		throw new InvalidCharacterError(message);
	};

	var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	// http://whatwg.org/html/common-microsyntaxes.html#space-character
	var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;

	// `decode` is designed to be fully compatible with `atob` as described in the
	// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
	// The optimized base64-decoding algorithm used is based on @atk’s excellent
	// implementation. https://gist.github.com/atk/1020396
	var decode = function(input) {
		input = String(input)
			.replace(REGEX_SPACE_CHARACTERS, '');
		var length = input.length;
		if (length % 4 == 0) {
			input = input.replace(/==?$/, '');
			length = input.length;
		}
		if (
			length % 4 == 1 ||
			// http://whatwg.org/C#alphanumeric-ascii-characters
			/[^+a-zA-Z0-9/]/.test(input)
		) {
			error(
				'Invalid character: the string to be decoded is not correctly encoded.'
			);
		}
		var bitCounter = 0;
		var bitStorage;
		var buffer;
		var output = '';
		var position = -1;
		while (++position < length) {
			buffer = TABLE.indexOf(input.charAt(position));
			bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
			// Unless this is the first of a group of 4 characters…
			if (bitCounter++ % 4) {
				// …convert the first 8 bits to a single ASCII character.
				output += String.fromCharCode(
					0xFF & bitStorage >> (-2 * bitCounter & 6)
				);
			}
		}
		return output;
	};

	// `encode` is designed to be fully compatible with `btoa` as described in the
	// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
	var encode = function(input) {
		input = String(input);
		if (/[^\0-\xFF]/.test(input)) {
			// Note: no need to special-case astral symbols here, as surrogates are
			// matched, and the input is supposed to only contain ASCII anyway.
			error(
				'The string to be encoded contains characters outside of the ' +
				'Latin1 range.'
			);
		}
		var padding = input.length % 3;
		var output = '';
		var position = -1;
		var a;
		var b;
		var c;
		var buffer;
		// Make sure any padding is handled outside of the loop.
		var length = input.length - padding;

		while (++position < length) {
			// Read three bytes, i.e. 24 bits.
			a = input.charCodeAt(position) << 16;
			b = input.charCodeAt(++position) << 8;
			c = input.charCodeAt(++position);
			buffer = a + b + c;
			// Turn the 24 bits into four chunks of 6 bits each, and append the
			// matching character for each of them to the output.
			output += (
				TABLE.charAt(buffer >> 18 & 0x3F) +
				TABLE.charAt(buffer >> 12 & 0x3F) +
				TABLE.charAt(buffer >> 6 & 0x3F) +
				TABLE.charAt(buffer & 0x3F)
			);
		}

		if (padding == 2) {
			a = input.charCodeAt(position) << 8;
			b = input.charCodeAt(++position);
			buffer = a + b;
			output += (
				TABLE.charAt(buffer >> 10) +
				TABLE.charAt((buffer >> 4) & 0x3F) +
				TABLE.charAt((buffer << 2) & 0x3F) +
				'='
			);
		} else if (padding == 1) {
			buffer = input.charCodeAt(position);
			output += (
				TABLE.charAt(buffer >> 2) +
				TABLE.charAt((buffer << 4) & 0x3F) +
				'=='
			);
		}

		return output;
	};

	var base64 = {
		'encode': encode,
		'decode': decode,
		'version': '1.0.0'
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return base64;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = base64;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (var key in base64) {
				base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.base64 = base64;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module), __webpack_require__(8)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var dom = __webpack_require__(109)
exports.DOMImplementation = dom.DOMImplementation
exports.XMLSerializer = dom.XMLSerializer
exports.DOMParser = __webpack_require__(206).DOMParser


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var conventions = __webpack_require__(56);
var dom = __webpack_require__(109)
var entities = __webpack_require__(207);
var sax = __webpack_require__(208);

var DOMImplementation = dom.DOMImplementation;

var NAMESPACE = conventions.NAMESPACE;

var ParseError = sax.ParseError;
var XMLReader = sax.XMLReader;

function DOMParser(options){
	this.options = options ||{locator:{}};
}

DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var isHTML = /\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;
  	var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}

	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(isHTML){
		defaultNSMap[''] = NAMESPACE.HTML;
	}
	defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
	if(source && typeof source === 'string'){
		sax.parse(source,defaultNSMap,entityMap);
	}else{
		sax.errorHandler.error("invalid doc source");
	}
	return domBuilder.doc;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler
 *
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;

		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},

	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},

	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
					this.doc.doctype = dt;
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		throw new ParseError(error, this.locator);
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

exports.__DOMHandler = DOMHandler;
exports.DOMParser = DOMParser;

/**
 * @deprecated Import/require from main entry point instead
 */
exports.DOMImplementation = dom.DOMImplementation;

/**
 * @deprecated Import/require from main entry point instead
 */
exports.XMLSerializer = dom.XMLSerializer;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var freeze = __webpack_require__(56).freeze;

/**
 * The entities that are predefined in every XML document.
 *
 * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
 * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
 */
exports.XML_ENTITIES = freeze({
	amp: '&',
	apos: "'",
	gt: '>',
	lt: '<',
	quot: '"',
});

/**
 * A map of all entities that are detected in an HTML document.
 * They contain all entries from `XML_ENTITIES`.
 *
 * @see XML_ENTITIES
 * @see DOMParser.parseFromString
 * @see DOMImplementation.prototype.createHTMLDocument
 * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
 * @see https://html.spec.whatwg.org/entities.json JSON
 * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
 * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
 */
exports.HTML_ENTITIES = freeze({
	Aacute: '\u00C1',
	aacute: '\u00E1',
	Abreve: '\u0102',
	abreve: '\u0103',
	ac: '\u223E',
	acd: '\u223F',
	acE: '\u223E\u0333',
	Acirc: '\u00C2',
	acirc: '\u00E2',
	acute: '\u00B4',
	Acy: '\u0410',
	acy: '\u0430',
	AElig: '\u00C6',
	aelig: '\u00E6',
	af: '\u2061',
	Afr: '\uD835\uDD04',
	afr: '\uD835\uDD1E',
	Agrave: '\u00C0',
	agrave: '\u00E0',
	alefsym: '\u2135',
	aleph: '\u2135',
	Alpha: '\u0391',
	alpha: '\u03B1',
	Amacr: '\u0100',
	amacr: '\u0101',
	amalg: '\u2A3F',
	AMP: '\u0026',
	amp: '\u0026',
	And: '\u2A53',
	and: '\u2227',
	andand: '\u2A55',
	andd: '\u2A5C',
	andslope: '\u2A58',
	andv: '\u2A5A',
	ang: '\u2220',
	ange: '\u29A4',
	angle: '\u2220',
	angmsd: '\u2221',
	angmsdaa: '\u29A8',
	angmsdab: '\u29A9',
	angmsdac: '\u29AA',
	angmsdad: '\u29AB',
	angmsdae: '\u29AC',
	angmsdaf: '\u29AD',
	angmsdag: '\u29AE',
	angmsdah: '\u29AF',
	angrt: '\u221F',
	angrtvb: '\u22BE',
	angrtvbd: '\u299D',
	angsph: '\u2222',
	angst: '\u00C5',
	angzarr: '\u237C',
	Aogon: '\u0104',
	aogon: '\u0105',
	Aopf: '\uD835\uDD38',
	aopf: '\uD835\uDD52',
	ap: '\u2248',
	apacir: '\u2A6F',
	apE: '\u2A70',
	ape: '\u224A',
	apid: '\u224B',
	apos: '\u0027',
	ApplyFunction: '\u2061',
	approx: '\u2248',
	approxeq: '\u224A',
	Aring: '\u00C5',
	aring: '\u00E5',
	Ascr: '\uD835\uDC9C',
	ascr: '\uD835\uDCB6',
	Assign: '\u2254',
	ast: '\u002A',
	asymp: '\u2248',
	asympeq: '\u224D',
	Atilde: '\u00C3',
	atilde: '\u00E3',
	Auml: '\u00C4',
	auml: '\u00E4',
	awconint: '\u2233',
	awint: '\u2A11',
	backcong: '\u224C',
	backepsilon: '\u03F6',
	backprime: '\u2035',
	backsim: '\u223D',
	backsimeq: '\u22CD',
	Backslash: '\u2216',
	Barv: '\u2AE7',
	barvee: '\u22BD',
	Barwed: '\u2306',
	barwed: '\u2305',
	barwedge: '\u2305',
	bbrk: '\u23B5',
	bbrktbrk: '\u23B6',
	bcong: '\u224C',
	Bcy: '\u0411',
	bcy: '\u0431',
	bdquo: '\u201E',
	becaus: '\u2235',
	Because: '\u2235',
	because: '\u2235',
	bemptyv: '\u29B0',
	bepsi: '\u03F6',
	bernou: '\u212C',
	Bernoullis: '\u212C',
	Beta: '\u0392',
	beta: '\u03B2',
	beth: '\u2136',
	between: '\u226C',
	Bfr: '\uD835\uDD05',
	bfr: '\uD835\uDD1F',
	bigcap: '\u22C2',
	bigcirc: '\u25EF',
	bigcup: '\u22C3',
	bigodot: '\u2A00',
	bigoplus: '\u2A01',
	bigotimes: '\u2A02',
	bigsqcup: '\u2A06',
	bigstar: '\u2605',
	bigtriangledown: '\u25BD',
	bigtriangleup: '\u25B3',
	biguplus: '\u2A04',
	bigvee: '\u22C1',
	bigwedge: '\u22C0',
	bkarow: '\u290D',
	blacklozenge: '\u29EB',
	blacksquare: '\u25AA',
	blacktriangle: '\u25B4',
	blacktriangledown: '\u25BE',
	blacktriangleleft: '\u25C2',
	blacktriangleright: '\u25B8',
	blank: '\u2423',
	blk12: '\u2592',
	blk14: '\u2591',
	blk34: '\u2593',
	block: '\u2588',
	bne: '\u003D\u20E5',
	bnequiv: '\u2261\u20E5',
	bNot: '\u2AED',
	bnot: '\u2310',
	Bopf: '\uD835\uDD39',
	bopf: '\uD835\uDD53',
	bot: '\u22A5',
	bottom: '\u22A5',
	bowtie: '\u22C8',
	boxbox: '\u29C9',
	boxDL: '\u2557',
	boxDl: '\u2556',
	boxdL: '\u2555',
	boxdl: '\u2510',
	boxDR: '\u2554',
	boxDr: '\u2553',
	boxdR: '\u2552',
	boxdr: '\u250C',
	boxH: '\u2550',
	boxh: '\u2500',
	boxHD: '\u2566',
	boxHd: '\u2564',
	boxhD: '\u2565',
	boxhd: '\u252C',
	boxHU: '\u2569',
	boxHu: '\u2567',
	boxhU: '\u2568',
	boxhu: '\u2534',
	boxminus: '\u229F',
	boxplus: '\u229E',
	boxtimes: '\u22A0',
	boxUL: '\u255D',
	boxUl: '\u255C',
	boxuL: '\u255B',
	boxul: '\u2518',
	boxUR: '\u255A',
	boxUr: '\u2559',
	boxuR: '\u2558',
	boxur: '\u2514',
	boxV: '\u2551',
	boxv: '\u2502',
	boxVH: '\u256C',
	boxVh: '\u256B',
	boxvH: '\u256A',
	boxvh: '\u253C',
	boxVL: '\u2563',
	boxVl: '\u2562',
	boxvL: '\u2561',
	boxvl: '\u2524',
	boxVR: '\u2560',
	boxVr: '\u255F',
	boxvR: '\u255E',
	boxvr: '\u251C',
	bprime: '\u2035',
	Breve: '\u02D8',
	breve: '\u02D8',
	brvbar: '\u00A6',
	Bscr: '\u212C',
	bscr: '\uD835\uDCB7',
	bsemi: '\u204F',
	bsim: '\u223D',
	bsime: '\u22CD',
	bsol: '\u005C',
	bsolb: '\u29C5',
	bsolhsub: '\u27C8',
	bull: '\u2022',
	bullet: '\u2022',
	bump: '\u224E',
	bumpE: '\u2AAE',
	bumpe: '\u224F',
	Bumpeq: '\u224E',
	bumpeq: '\u224F',
	Cacute: '\u0106',
	cacute: '\u0107',
	Cap: '\u22D2',
	cap: '\u2229',
	capand: '\u2A44',
	capbrcup: '\u2A49',
	capcap: '\u2A4B',
	capcup: '\u2A47',
	capdot: '\u2A40',
	CapitalDifferentialD: '\u2145',
	caps: '\u2229\uFE00',
	caret: '\u2041',
	caron: '\u02C7',
	Cayleys: '\u212D',
	ccaps: '\u2A4D',
	Ccaron: '\u010C',
	ccaron: '\u010D',
	Ccedil: '\u00C7',
	ccedil: '\u00E7',
	Ccirc: '\u0108',
	ccirc: '\u0109',
	Cconint: '\u2230',
	ccups: '\u2A4C',
	ccupssm: '\u2A50',
	Cdot: '\u010A',
	cdot: '\u010B',
	cedil: '\u00B8',
	Cedilla: '\u00B8',
	cemptyv: '\u29B2',
	cent: '\u00A2',
	CenterDot: '\u00B7',
	centerdot: '\u00B7',
	Cfr: '\u212D',
	cfr: '\uD835\uDD20',
	CHcy: '\u0427',
	chcy: '\u0447',
	check: '\u2713',
	checkmark: '\u2713',
	Chi: '\u03A7',
	chi: '\u03C7',
	cir: '\u25CB',
	circ: '\u02C6',
	circeq: '\u2257',
	circlearrowleft: '\u21BA',
	circlearrowright: '\u21BB',
	circledast: '\u229B',
	circledcirc: '\u229A',
	circleddash: '\u229D',
	CircleDot: '\u2299',
	circledR: '\u00AE',
	circledS: '\u24C8',
	CircleMinus: '\u2296',
	CirclePlus: '\u2295',
	CircleTimes: '\u2297',
	cirE: '\u29C3',
	cire: '\u2257',
	cirfnint: '\u2A10',
	cirmid: '\u2AEF',
	cirscir: '\u29C2',
	ClockwiseContourIntegral: '\u2232',
	CloseCurlyDoubleQuote: '\u201D',
	CloseCurlyQuote: '\u2019',
	clubs: '\u2663',
	clubsuit: '\u2663',
	Colon: '\u2237',
	colon: '\u003A',
	Colone: '\u2A74',
	colone: '\u2254',
	coloneq: '\u2254',
	comma: '\u002C',
	commat: '\u0040',
	comp: '\u2201',
	compfn: '\u2218',
	complement: '\u2201',
	complexes: '\u2102',
	cong: '\u2245',
	congdot: '\u2A6D',
	Congruent: '\u2261',
	Conint: '\u222F',
	conint: '\u222E',
	ContourIntegral: '\u222E',
	Copf: '\u2102',
	copf: '\uD835\uDD54',
	coprod: '\u2210',
	Coproduct: '\u2210',
	COPY: '\u00A9',
	copy: '\u00A9',
	copysr: '\u2117',
	CounterClockwiseContourIntegral: '\u2233',
	crarr: '\u21B5',
	Cross: '\u2A2F',
	cross: '\u2717',
	Cscr: '\uD835\uDC9E',
	cscr: '\uD835\uDCB8',
	csub: '\u2ACF',
	csube: '\u2AD1',
	csup: '\u2AD0',
	csupe: '\u2AD2',
	ctdot: '\u22EF',
	cudarrl: '\u2938',
	cudarrr: '\u2935',
	cuepr: '\u22DE',
	cuesc: '\u22DF',
	cularr: '\u21B6',
	cularrp: '\u293D',
	Cup: '\u22D3',
	cup: '\u222A',
	cupbrcap: '\u2A48',
	CupCap: '\u224D',
	cupcap: '\u2A46',
	cupcup: '\u2A4A',
	cupdot: '\u228D',
	cupor: '\u2A45',
	cups: '\u222A\uFE00',
	curarr: '\u21B7',
	curarrm: '\u293C',
	curlyeqprec: '\u22DE',
	curlyeqsucc: '\u22DF',
	curlyvee: '\u22CE',
	curlywedge: '\u22CF',
	curren: '\u00A4',
	curvearrowleft: '\u21B6',
	curvearrowright: '\u21B7',
	cuvee: '\u22CE',
	cuwed: '\u22CF',
	cwconint: '\u2232',
	cwint: '\u2231',
	cylcty: '\u232D',
	Dagger: '\u2021',
	dagger: '\u2020',
	daleth: '\u2138',
	Darr: '\u21A1',
	dArr: '\u21D3',
	darr: '\u2193',
	dash: '\u2010',
	Dashv: '\u2AE4',
	dashv: '\u22A3',
	dbkarow: '\u290F',
	dblac: '\u02DD',
	Dcaron: '\u010E',
	dcaron: '\u010F',
	Dcy: '\u0414',
	dcy: '\u0434',
	DD: '\u2145',
	dd: '\u2146',
	ddagger: '\u2021',
	ddarr: '\u21CA',
	DDotrahd: '\u2911',
	ddotseq: '\u2A77',
	deg: '\u00B0',
	Del: '\u2207',
	Delta: '\u0394',
	delta: '\u03B4',
	demptyv: '\u29B1',
	dfisht: '\u297F',
	Dfr: '\uD835\uDD07',
	dfr: '\uD835\uDD21',
	dHar: '\u2965',
	dharl: '\u21C3',
	dharr: '\u21C2',
	DiacriticalAcute: '\u00B4',
	DiacriticalDot: '\u02D9',
	DiacriticalDoubleAcute: '\u02DD',
	DiacriticalGrave: '\u0060',
	DiacriticalTilde: '\u02DC',
	diam: '\u22C4',
	Diamond: '\u22C4',
	diamond: '\u22C4',
	diamondsuit: '\u2666',
	diams: '\u2666',
	die: '\u00A8',
	DifferentialD: '\u2146',
	digamma: '\u03DD',
	disin: '\u22F2',
	div: '\u00F7',
	divide: '\u00F7',
	divideontimes: '\u22C7',
	divonx: '\u22C7',
	DJcy: '\u0402',
	djcy: '\u0452',
	dlcorn: '\u231E',
	dlcrop: '\u230D',
	dollar: '\u0024',
	Dopf: '\uD835\uDD3B',
	dopf: '\uD835\uDD55',
	Dot: '\u00A8',
	dot: '\u02D9',
	DotDot: '\u20DC',
	doteq: '\u2250',
	doteqdot: '\u2251',
	DotEqual: '\u2250',
	dotminus: '\u2238',
	dotplus: '\u2214',
	dotsquare: '\u22A1',
	doublebarwedge: '\u2306',
	DoubleContourIntegral: '\u222F',
	DoubleDot: '\u00A8',
	DoubleDownArrow: '\u21D3',
	DoubleLeftArrow: '\u21D0',
	DoubleLeftRightArrow: '\u21D4',
	DoubleLeftTee: '\u2AE4',
	DoubleLongLeftArrow: '\u27F8',
	DoubleLongLeftRightArrow: '\u27FA',
	DoubleLongRightArrow: '\u27F9',
	DoubleRightArrow: '\u21D2',
	DoubleRightTee: '\u22A8',
	DoubleUpArrow: '\u21D1',
	DoubleUpDownArrow: '\u21D5',
	DoubleVerticalBar: '\u2225',
	DownArrow: '\u2193',
	Downarrow: '\u21D3',
	downarrow: '\u2193',
	DownArrowBar: '\u2913',
	DownArrowUpArrow: '\u21F5',
	DownBreve: '\u0311',
	downdownarrows: '\u21CA',
	downharpoonleft: '\u21C3',
	downharpoonright: '\u21C2',
	DownLeftRightVector: '\u2950',
	DownLeftTeeVector: '\u295E',
	DownLeftVector: '\u21BD',
	DownLeftVectorBar: '\u2956',
	DownRightTeeVector: '\u295F',
	DownRightVector: '\u21C1',
	DownRightVectorBar: '\u2957',
	DownTee: '\u22A4',
	DownTeeArrow: '\u21A7',
	drbkarow: '\u2910',
	drcorn: '\u231F',
	drcrop: '\u230C',
	Dscr: '\uD835\uDC9F',
	dscr: '\uD835\uDCB9',
	DScy: '\u0405',
	dscy: '\u0455',
	dsol: '\u29F6',
	Dstrok: '\u0110',
	dstrok: '\u0111',
	dtdot: '\u22F1',
	dtri: '\u25BF',
	dtrif: '\u25BE',
	duarr: '\u21F5',
	duhar: '\u296F',
	dwangle: '\u29A6',
	DZcy: '\u040F',
	dzcy: '\u045F',
	dzigrarr: '\u27FF',
	Eacute: '\u00C9',
	eacute: '\u00E9',
	easter: '\u2A6E',
	Ecaron: '\u011A',
	ecaron: '\u011B',
	ecir: '\u2256',
	Ecirc: '\u00CA',
	ecirc: '\u00EA',
	ecolon: '\u2255',
	Ecy: '\u042D',
	ecy: '\u044D',
	eDDot: '\u2A77',
	Edot: '\u0116',
	eDot: '\u2251',
	edot: '\u0117',
	ee: '\u2147',
	efDot: '\u2252',
	Efr: '\uD835\uDD08',
	efr: '\uD835\uDD22',
	eg: '\u2A9A',
	Egrave: '\u00C8',
	egrave: '\u00E8',
	egs: '\u2A96',
	egsdot: '\u2A98',
	el: '\u2A99',
	Element: '\u2208',
	elinters: '\u23E7',
	ell: '\u2113',
	els: '\u2A95',
	elsdot: '\u2A97',
	Emacr: '\u0112',
	emacr: '\u0113',
	empty: '\u2205',
	emptyset: '\u2205',
	EmptySmallSquare: '\u25FB',
	emptyv: '\u2205',
	EmptyVerySmallSquare: '\u25AB',
	emsp: '\u2003',
	emsp13: '\u2004',
	emsp14: '\u2005',
	ENG: '\u014A',
	eng: '\u014B',
	ensp: '\u2002',
	Eogon: '\u0118',
	eogon: '\u0119',
	Eopf: '\uD835\uDD3C',
	eopf: '\uD835\uDD56',
	epar: '\u22D5',
	eparsl: '\u29E3',
	eplus: '\u2A71',
	epsi: '\u03B5',
	Epsilon: '\u0395',
	epsilon: '\u03B5',
	epsiv: '\u03F5',
	eqcirc: '\u2256',
	eqcolon: '\u2255',
	eqsim: '\u2242',
	eqslantgtr: '\u2A96',
	eqslantless: '\u2A95',
	Equal: '\u2A75',
	equals: '\u003D',
	EqualTilde: '\u2242',
	equest: '\u225F',
	Equilibrium: '\u21CC',
	equiv: '\u2261',
	equivDD: '\u2A78',
	eqvparsl: '\u29E5',
	erarr: '\u2971',
	erDot: '\u2253',
	Escr: '\u2130',
	escr: '\u212F',
	esdot: '\u2250',
	Esim: '\u2A73',
	esim: '\u2242',
	Eta: '\u0397',
	eta: '\u03B7',
	ETH: '\u00D0',
	eth: '\u00F0',
	Euml: '\u00CB',
	euml: '\u00EB',
	euro: '\u20AC',
	excl: '\u0021',
	exist: '\u2203',
	Exists: '\u2203',
	expectation: '\u2130',
	ExponentialE: '\u2147',
	exponentiale: '\u2147',
	fallingdotseq: '\u2252',
	Fcy: '\u0424',
	fcy: '\u0444',
	female: '\u2640',
	ffilig: '\uFB03',
	fflig: '\uFB00',
	ffllig: '\uFB04',
	Ffr: '\uD835\uDD09',
	ffr: '\uD835\uDD23',
	filig: '\uFB01',
	FilledSmallSquare: '\u25FC',
	FilledVerySmallSquare: '\u25AA',
	fjlig: '\u0066\u006A',
	flat: '\u266D',
	fllig: '\uFB02',
	fltns: '\u25B1',
	fnof: '\u0192',
	Fopf: '\uD835\uDD3D',
	fopf: '\uD835\uDD57',
	ForAll: '\u2200',
	forall: '\u2200',
	fork: '\u22D4',
	forkv: '\u2AD9',
	Fouriertrf: '\u2131',
	fpartint: '\u2A0D',
	frac12: '\u00BD',
	frac13: '\u2153',
	frac14: '\u00BC',
	frac15: '\u2155',
	frac16: '\u2159',
	frac18: '\u215B',
	frac23: '\u2154',
	frac25: '\u2156',
	frac34: '\u00BE',
	frac35: '\u2157',
	frac38: '\u215C',
	frac45: '\u2158',
	frac56: '\u215A',
	frac58: '\u215D',
	frac78: '\u215E',
	frasl: '\u2044',
	frown: '\u2322',
	Fscr: '\u2131',
	fscr: '\uD835\uDCBB',
	gacute: '\u01F5',
	Gamma: '\u0393',
	gamma: '\u03B3',
	Gammad: '\u03DC',
	gammad: '\u03DD',
	gap: '\u2A86',
	Gbreve: '\u011E',
	gbreve: '\u011F',
	Gcedil: '\u0122',
	Gcirc: '\u011C',
	gcirc: '\u011D',
	Gcy: '\u0413',
	gcy: '\u0433',
	Gdot: '\u0120',
	gdot: '\u0121',
	gE: '\u2267',
	ge: '\u2265',
	gEl: '\u2A8C',
	gel: '\u22DB',
	geq: '\u2265',
	geqq: '\u2267',
	geqslant: '\u2A7E',
	ges: '\u2A7E',
	gescc: '\u2AA9',
	gesdot: '\u2A80',
	gesdoto: '\u2A82',
	gesdotol: '\u2A84',
	gesl: '\u22DB\uFE00',
	gesles: '\u2A94',
	Gfr: '\uD835\uDD0A',
	gfr: '\uD835\uDD24',
	Gg: '\u22D9',
	gg: '\u226B',
	ggg: '\u22D9',
	gimel: '\u2137',
	GJcy: '\u0403',
	gjcy: '\u0453',
	gl: '\u2277',
	gla: '\u2AA5',
	glE: '\u2A92',
	glj: '\u2AA4',
	gnap: '\u2A8A',
	gnapprox: '\u2A8A',
	gnE: '\u2269',
	gne: '\u2A88',
	gneq: '\u2A88',
	gneqq: '\u2269',
	gnsim: '\u22E7',
	Gopf: '\uD835\uDD3E',
	gopf: '\uD835\uDD58',
	grave: '\u0060',
	GreaterEqual: '\u2265',
	GreaterEqualLess: '\u22DB',
	GreaterFullEqual: '\u2267',
	GreaterGreater: '\u2AA2',
	GreaterLess: '\u2277',
	GreaterSlantEqual: '\u2A7E',
	GreaterTilde: '\u2273',
	Gscr: '\uD835\uDCA2',
	gscr: '\u210A',
	gsim: '\u2273',
	gsime: '\u2A8E',
	gsiml: '\u2A90',
	Gt: '\u226B',
	GT: '\u003E',
	gt: '\u003E',
	gtcc: '\u2AA7',
	gtcir: '\u2A7A',
	gtdot: '\u22D7',
	gtlPar: '\u2995',
	gtquest: '\u2A7C',
	gtrapprox: '\u2A86',
	gtrarr: '\u2978',
	gtrdot: '\u22D7',
	gtreqless: '\u22DB',
	gtreqqless: '\u2A8C',
	gtrless: '\u2277',
	gtrsim: '\u2273',
	gvertneqq: '\u2269\uFE00',
	gvnE: '\u2269\uFE00',
	Hacek: '\u02C7',
	hairsp: '\u200A',
	half: '\u00BD',
	hamilt: '\u210B',
	HARDcy: '\u042A',
	hardcy: '\u044A',
	hArr: '\u21D4',
	harr: '\u2194',
	harrcir: '\u2948',
	harrw: '\u21AD',
	Hat: '\u005E',
	hbar: '\u210F',
	Hcirc: '\u0124',
	hcirc: '\u0125',
	hearts: '\u2665',
	heartsuit: '\u2665',
	hellip: '\u2026',
	hercon: '\u22B9',
	Hfr: '\u210C',
	hfr: '\uD835\uDD25',
	HilbertSpace: '\u210B',
	hksearow: '\u2925',
	hkswarow: '\u2926',
	hoarr: '\u21FF',
	homtht: '\u223B',
	hookleftarrow: '\u21A9',
	hookrightarrow: '\u21AA',
	Hopf: '\u210D',
	hopf: '\uD835\uDD59',
	horbar: '\u2015',
	HorizontalLine: '\u2500',
	Hscr: '\u210B',
	hscr: '\uD835\uDCBD',
	hslash: '\u210F',
	Hstrok: '\u0126',
	hstrok: '\u0127',
	HumpDownHump: '\u224E',
	HumpEqual: '\u224F',
	hybull: '\u2043',
	hyphen: '\u2010',
	Iacute: '\u00CD',
	iacute: '\u00ED',
	ic: '\u2063',
	Icirc: '\u00CE',
	icirc: '\u00EE',
	Icy: '\u0418',
	icy: '\u0438',
	Idot: '\u0130',
	IEcy: '\u0415',
	iecy: '\u0435',
	iexcl: '\u00A1',
	iff: '\u21D4',
	Ifr: '\u2111',
	ifr: '\uD835\uDD26',
	Igrave: '\u00CC',
	igrave: '\u00EC',
	ii: '\u2148',
	iiiint: '\u2A0C',
	iiint: '\u222D',
	iinfin: '\u29DC',
	iiota: '\u2129',
	IJlig: '\u0132',
	ijlig: '\u0133',
	Im: '\u2111',
	Imacr: '\u012A',
	imacr: '\u012B',
	image: '\u2111',
	ImaginaryI: '\u2148',
	imagline: '\u2110',
	imagpart: '\u2111',
	imath: '\u0131',
	imof: '\u22B7',
	imped: '\u01B5',
	Implies: '\u21D2',
	in: '\u2208',
	incare: '\u2105',
	infin: '\u221E',
	infintie: '\u29DD',
	inodot: '\u0131',
	Int: '\u222C',
	int: '\u222B',
	intcal: '\u22BA',
	integers: '\u2124',
	Integral: '\u222B',
	intercal: '\u22BA',
	Intersection: '\u22C2',
	intlarhk: '\u2A17',
	intprod: '\u2A3C',
	InvisibleComma: '\u2063',
	InvisibleTimes: '\u2062',
	IOcy: '\u0401',
	iocy: '\u0451',
	Iogon: '\u012E',
	iogon: '\u012F',
	Iopf: '\uD835\uDD40',
	iopf: '\uD835\uDD5A',
	Iota: '\u0399',
	iota: '\u03B9',
	iprod: '\u2A3C',
	iquest: '\u00BF',
	Iscr: '\u2110',
	iscr: '\uD835\uDCBE',
	isin: '\u2208',
	isindot: '\u22F5',
	isinE: '\u22F9',
	isins: '\u22F4',
	isinsv: '\u22F3',
	isinv: '\u2208',
	it: '\u2062',
	Itilde: '\u0128',
	itilde: '\u0129',
	Iukcy: '\u0406',
	iukcy: '\u0456',
	Iuml: '\u00CF',
	iuml: '\u00EF',
	Jcirc: '\u0134',
	jcirc: '\u0135',
	Jcy: '\u0419',
	jcy: '\u0439',
	Jfr: '\uD835\uDD0D',
	jfr: '\uD835\uDD27',
	jmath: '\u0237',
	Jopf: '\uD835\uDD41',
	jopf: '\uD835\uDD5B',
	Jscr: '\uD835\uDCA5',
	jscr: '\uD835\uDCBF',
	Jsercy: '\u0408',
	jsercy: '\u0458',
	Jukcy: '\u0404',
	jukcy: '\u0454',
	Kappa: '\u039A',
	kappa: '\u03BA',
	kappav: '\u03F0',
	Kcedil: '\u0136',
	kcedil: '\u0137',
	Kcy: '\u041A',
	kcy: '\u043A',
	Kfr: '\uD835\uDD0E',
	kfr: '\uD835\uDD28',
	kgreen: '\u0138',
	KHcy: '\u0425',
	khcy: '\u0445',
	KJcy: '\u040C',
	kjcy: '\u045C',
	Kopf: '\uD835\uDD42',
	kopf: '\uD835\uDD5C',
	Kscr: '\uD835\uDCA6',
	kscr: '\uD835\uDCC0',
	lAarr: '\u21DA',
	Lacute: '\u0139',
	lacute: '\u013A',
	laemptyv: '\u29B4',
	lagran: '\u2112',
	Lambda: '\u039B',
	lambda: '\u03BB',
	Lang: '\u27EA',
	lang: '\u27E8',
	langd: '\u2991',
	langle: '\u27E8',
	lap: '\u2A85',
	Laplacetrf: '\u2112',
	laquo: '\u00AB',
	Larr: '\u219E',
	lArr: '\u21D0',
	larr: '\u2190',
	larrb: '\u21E4',
	larrbfs: '\u291F',
	larrfs: '\u291D',
	larrhk: '\u21A9',
	larrlp: '\u21AB',
	larrpl: '\u2939',
	larrsim: '\u2973',
	larrtl: '\u21A2',
	lat: '\u2AAB',
	lAtail: '\u291B',
	latail: '\u2919',
	late: '\u2AAD',
	lates: '\u2AAD\uFE00',
	lBarr: '\u290E',
	lbarr: '\u290C',
	lbbrk: '\u2772',
	lbrace: '\u007B',
	lbrack: '\u005B',
	lbrke: '\u298B',
	lbrksld: '\u298F',
	lbrkslu: '\u298D',
	Lcaron: '\u013D',
	lcaron: '\u013E',
	Lcedil: '\u013B',
	lcedil: '\u013C',
	lceil: '\u2308',
	lcub: '\u007B',
	Lcy: '\u041B',
	lcy: '\u043B',
	ldca: '\u2936',
	ldquo: '\u201C',
	ldquor: '\u201E',
	ldrdhar: '\u2967',
	ldrushar: '\u294B',
	ldsh: '\u21B2',
	lE: '\u2266',
	le: '\u2264',
	LeftAngleBracket: '\u27E8',
	LeftArrow: '\u2190',
	Leftarrow: '\u21D0',
	leftarrow: '\u2190',
	LeftArrowBar: '\u21E4',
	LeftArrowRightArrow: '\u21C6',
	leftarrowtail: '\u21A2',
	LeftCeiling: '\u2308',
	LeftDoubleBracket: '\u27E6',
	LeftDownTeeVector: '\u2961',
	LeftDownVector: '\u21C3',
	LeftDownVectorBar: '\u2959',
	LeftFloor: '\u230A',
	leftharpoondown: '\u21BD',
	leftharpoonup: '\u21BC',
	leftleftarrows: '\u21C7',
	LeftRightArrow: '\u2194',
	Leftrightarrow: '\u21D4',
	leftrightarrow: '\u2194',
	leftrightarrows: '\u21C6',
	leftrightharpoons: '\u21CB',
	leftrightsquigarrow: '\u21AD',
	LeftRightVector: '\u294E',
	LeftTee: '\u22A3',
	LeftTeeArrow: '\u21A4',
	LeftTeeVector: '\u295A',
	leftthreetimes: '\u22CB',
	LeftTriangle: '\u22B2',
	LeftTriangleBar: '\u29CF',
	LeftTriangleEqual: '\u22B4',
	LeftUpDownVector: '\u2951',
	LeftUpTeeVector: '\u2960',
	LeftUpVector: '\u21BF',
	LeftUpVectorBar: '\u2958',
	LeftVector: '\u21BC',
	LeftVectorBar: '\u2952',
	lEg: '\u2A8B',
	leg: '\u22DA',
	leq: '\u2264',
	leqq: '\u2266',
	leqslant: '\u2A7D',
	les: '\u2A7D',
	lescc: '\u2AA8',
	lesdot: '\u2A7F',
	lesdoto: '\u2A81',
	lesdotor: '\u2A83',
	lesg: '\u22DA\uFE00',
	lesges: '\u2A93',
	lessapprox: '\u2A85',
	lessdot: '\u22D6',
	lesseqgtr: '\u22DA',
	lesseqqgtr: '\u2A8B',
	LessEqualGreater: '\u22DA',
	LessFullEqual: '\u2266',
	LessGreater: '\u2276',
	lessgtr: '\u2276',
	LessLess: '\u2AA1',
	lesssim: '\u2272',
	LessSlantEqual: '\u2A7D',
	LessTilde: '\u2272',
	lfisht: '\u297C',
	lfloor: '\u230A',
	Lfr: '\uD835\uDD0F',
	lfr: '\uD835\uDD29',
	lg: '\u2276',
	lgE: '\u2A91',
	lHar: '\u2962',
	lhard: '\u21BD',
	lharu: '\u21BC',
	lharul: '\u296A',
	lhblk: '\u2584',
	LJcy: '\u0409',
	ljcy: '\u0459',
	Ll: '\u22D8',
	ll: '\u226A',
	llarr: '\u21C7',
	llcorner: '\u231E',
	Lleftarrow: '\u21DA',
	llhard: '\u296B',
	lltri: '\u25FA',
	Lmidot: '\u013F',
	lmidot: '\u0140',
	lmoust: '\u23B0',
	lmoustache: '\u23B0',
	lnap: '\u2A89',
	lnapprox: '\u2A89',
	lnE: '\u2268',
	lne: '\u2A87',
	lneq: '\u2A87',
	lneqq: '\u2268',
	lnsim: '\u22E6',
	loang: '\u27EC',
	loarr: '\u21FD',
	lobrk: '\u27E6',
	LongLeftArrow: '\u27F5',
	Longleftarrow: '\u27F8',
	longleftarrow: '\u27F5',
	LongLeftRightArrow: '\u27F7',
	Longleftrightarrow: '\u27FA',
	longleftrightarrow: '\u27F7',
	longmapsto: '\u27FC',
	LongRightArrow: '\u27F6',
	Longrightarrow: '\u27F9',
	longrightarrow: '\u27F6',
	looparrowleft: '\u21AB',
	looparrowright: '\u21AC',
	lopar: '\u2985',
	Lopf: '\uD835\uDD43',
	lopf: '\uD835\uDD5D',
	loplus: '\u2A2D',
	lotimes: '\u2A34',
	lowast: '\u2217',
	lowbar: '\u005F',
	LowerLeftArrow: '\u2199',
	LowerRightArrow: '\u2198',
	loz: '\u25CA',
	lozenge: '\u25CA',
	lozf: '\u29EB',
	lpar: '\u0028',
	lparlt: '\u2993',
	lrarr: '\u21C6',
	lrcorner: '\u231F',
	lrhar: '\u21CB',
	lrhard: '\u296D',
	lrm: '\u200E',
	lrtri: '\u22BF',
	lsaquo: '\u2039',
	Lscr: '\u2112',
	lscr: '\uD835\uDCC1',
	Lsh: '\u21B0',
	lsh: '\u21B0',
	lsim: '\u2272',
	lsime: '\u2A8D',
	lsimg: '\u2A8F',
	lsqb: '\u005B',
	lsquo: '\u2018',
	lsquor: '\u201A',
	Lstrok: '\u0141',
	lstrok: '\u0142',
	Lt: '\u226A',
	LT: '\u003C',
	lt: '\u003C',
	ltcc: '\u2AA6',
	ltcir: '\u2A79',
	ltdot: '\u22D6',
	lthree: '\u22CB',
	ltimes: '\u22C9',
	ltlarr: '\u2976',
	ltquest: '\u2A7B',
	ltri: '\u25C3',
	ltrie: '\u22B4',
	ltrif: '\u25C2',
	ltrPar: '\u2996',
	lurdshar: '\u294A',
	luruhar: '\u2966',
	lvertneqq: '\u2268\uFE00',
	lvnE: '\u2268\uFE00',
	macr: '\u00AF',
	male: '\u2642',
	malt: '\u2720',
	maltese: '\u2720',
	Map: '\u2905',
	map: '\u21A6',
	mapsto: '\u21A6',
	mapstodown: '\u21A7',
	mapstoleft: '\u21A4',
	mapstoup: '\u21A5',
	marker: '\u25AE',
	mcomma: '\u2A29',
	Mcy: '\u041C',
	mcy: '\u043C',
	mdash: '\u2014',
	mDDot: '\u223A',
	measuredangle: '\u2221',
	MediumSpace: '\u205F',
	Mellintrf: '\u2133',
	Mfr: '\uD835\uDD10',
	mfr: '\uD835\uDD2A',
	mho: '\u2127',
	micro: '\u00B5',
	mid: '\u2223',
	midast: '\u002A',
	midcir: '\u2AF0',
	middot: '\u00B7',
	minus: '\u2212',
	minusb: '\u229F',
	minusd: '\u2238',
	minusdu: '\u2A2A',
	MinusPlus: '\u2213',
	mlcp: '\u2ADB',
	mldr: '\u2026',
	mnplus: '\u2213',
	models: '\u22A7',
	Mopf: '\uD835\uDD44',
	mopf: '\uD835\uDD5E',
	mp: '\u2213',
	Mscr: '\u2133',
	mscr: '\uD835\uDCC2',
	mstpos: '\u223E',
	Mu: '\u039C',
	mu: '\u03BC',
	multimap: '\u22B8',
	mumap: '\u22B8',
	nabla: '\u2207',
	Nacute: '\u0143',
	nacute: '\u0144',
	nang: '\u2220\u20D2',
	nap: '\u2249',
	napE: '\u2A70\u0338',
	napid: '\u224B\u0338',
	napos: '\u0149',
	napprox: '\u2249',
	natur: '\u266E',
	natural: '\u266E',
	naturals: '\u2115',
	nbsp: '\u00A0',
	nbump: '\u224E\u0338',
	nbumpe: '\u224F\u0338',
	ncap: '\u2A43',
	Ncaron: '\u0147',
	ncaron: '\u0148',
	Ncedil: '\u0145',
	ncedil: '\u0146',
	ncong: '\u2247',
	ncongdot: '\u2A6D\u0338',
	ncup: '\u2A42',
	Ncy: '\u041D',
	ncy: '\u043D',
	ndash: '\u2013',
	ne: '\u2260',
	nearhk: '\u2924',
	neArr: '\u21D7',
	nearr: '\u2197',
	nearrow: '\u2197',
	nedot: '\u2250\u0338',
	NegativeMediumSpace: '\u200B',
	NegativeThickSpace: '\u200B',
	NegativeThinSpace: '\u200B',
	NegativeVeryThinSpace: '\u200B',
	nequiv: '\u2262',
	nesear: '\u2928',
	nesim: '\u2242\u0338',
	NestedGreaterGreater: '\u226B',
	NestedLessLess: '\u226A',
	NewLine: '\u000A',
	nexist: '\u2204',
	nexists: '\u2204',
	Nfr: '\uD835\uDD11',
	nfr: '\uD835\uDD2B',
	ngE: '\u2267\u0338',
	nge: '\u2271',
	ngeq: '\u2271',
	ngeqq: '\u2267\u0338',
	ngeqslant: '\u2A7E\u0338',
	nges: '\u2A7E\u0338',
	nGg: '\u22D9\u0338',
	ngsim: '\u2275',
	nGt: '\u226B\u20D2',
	ngt: '\u226F',
	ngtr: '\u226F',
	nGtv: '\u226B\u0338',
	nhArr: '\u21CE',
	nharr: '\u21AE',
	nhpar: '\u2AF2',
	ni: '\u220B',
	nis: '\u22FC',
	nisd: '\u22FA',
	niv: '\u220B',
	NJcy: '\u040A',
	njcy: '\u045A',
	nlArr: '\u21CD',
	nlarr: '\u219A',
	nldr: '\u2025',
	nlE: '\u2266\u0338',
	nle: '\u2270',
	nLeftarrow: '\u21CD',
	nleftarrow: '\u219A',
	nLeftrightarrow: '\u21CE',
	nleftrightarrow: '\u21AE',
	nleq: '\u2270',
	nleqq: '\u2266\u0338',
	nleqslant: '\u2A7D\u0338',
	nles: '\u2A7D\u0338',
	nless: '\u226E',
	nLl: '\u22D8\u0338',
	nlsim: '\u2274',
	nLt: '\u226A\u20D2',
	nlt: '\u226E',
	nltri: '\u22EA',
	nltrie: '\u22EC',
	nLtv: '\u226A\u0338',
	nmid: '\u2224',
	NoBreak: '\u2060',
	NonBreakingSpace: '\u00A0',
	Nopf: '\u2115',
	nopf: '\uD835\uDD5F',
	Not: '\u2AEC',
	not: '\u00AC',
	NotCongruent: '\u2262',
	NotCupCap: '\u226D',
	NotDoubleVerticalBar: '\u2226',
	NotElement: '\u2209',
	NotEqual: '\u2260',
	NotEqualTilde: '\u2242\u0338',
	NotExists: '\u2204',
	NotGreater: '\u226F',
	NotGreaterEqual: '\u2271',
	NotGreaterFullEqual: '\u2267\u0338',
	NotGreaterGreater: '\u226B\u0338',
	NotGreaterLess: '\u2279',
	NotGreaterSlantEqual: '\u2A7E\u0338',
	NotGreaterTilde: '\u2275',
	NotHumpDownHump: '\u224E\u0338',
	NotHumpEqual: '\u224F\u0338',
	notin: '\u2209',
	notindot: '\u22F5\u0338',
	notinE: '\u22F9\u0338',
	notinva: '\u2209',
	notinvb: '\u22F7',
	notinvc: '\u22F6',
	NotLeftTriangle: '\u22EA',
	NotLeftTriangleBar: '\u29CF\u0338',
	NotLeftTriangleEqual: '\u22EC',
	NotLess: '\u226E',
	NotLessEqual: '\u2270',
	NotLessGreater: '\u2278',
	NotLessLess: '\u226A\u0338',
	NotLessSlantEqual: '\u2A7D\u0338',
	NotLessTilde: '\u2274',
	NotNestedGreaterGreater: '\u2AA2\u0338',
	NotNestedLessLess: '\u2AA1\u0338',
	notni: '\u220C',
	notniva: '\u220C',
	notnivb: '\u22FE',
	notnivc: '\u22FD',
	NotPrecedes: '\u2280',
	NotPrecedesEqual: '\u2AAF\u0338',
	NotPrecedesSlantEqual: '\u22E0',
	NotReverseElement: '\u220C',
	NotRightTriangle: '\u22EB',
	NotRightTriangleBar: '\u29D0\u0338',
	NotRightTriangleEqual: '\u22ED',
	NotSquareSubset: '\u228F\u0338',
	NotSquareSubsetEqual: '\u22E2',
	NotSquareSuperset: '\u2290\u0338',
	NotSquareSupersetEqual: '\u22E3',
	NotSubset: '\u2282\u20D2',
	NotSubsetEqual: '\u2288',
	NotSucceeds: '\u2281',
	NotSucceedsEqual: '\u2AB0\u0338',
	NotSucceedsSlantEqual: '\u22E1',
	NotSucceedsTilde: '\u227F\u0338',
	NotSuperset: '\u2283\u20D2',
	NotSupersetEqual: '\u2289',
	NotTilde: '\u2241',
	NotTildeEqual: '\u2244',
	NotTildeFullEqual: '\u2247',
	NotTildeTilde: '\u2249',
	NotVerticalBar: '\u2224',
	npar: '\u2226',
	nparallel: '\u2226',
	nparsl: '\u2AFD\u20E5',
	npart: '\u2202\u0338',
	npolint: '\u2A14',
	npr: '\u2280',
	nprcue: '\u22E0',
	npre: '\u2AAF\u0338',
	nprec: '\u2280',
	npreceq: '\u2AAF\u0338',
	nrArr: '\u21CF',
	nrarr: '\u219B',
	nrarrc: '\u2933\u0338',
	nrarrw: '\u219D\u0338',
	nRightarrow: '\u21CF',
	nrightarrow: '\u219B',
	nrtri: '\u22EB',
	nrtrie: '\u22ED',
	nsc: '\u2281',
	nsccue: '\u22E1',
	nsce: '\u2AB0\u0338',
	Nscr: '\uD835\uDCA9',
	nscr: '\uD835\uDCC3',
	nshortmid: '\u2224',
	nshortparallel: '\u2226',
	nsim: '\u2241',
	nsime: '\u2244',
	nsimeq: '\u2244',
	nsmid: '\u2224',
	nspar: '\u2226',
	nsqsube: '\u22E2',
	nsqsupe: '\u22E3',
	nsub: '\u2284',
	nsubE: '\u2AC5\u0338',
	nsube: '\u2288',
	nsubset: '\u2282\u20D2',
	nsubseteq: '\u2288',
	nsubseteqq: '\u2AC5\u0338',
	nsucc: '\u2281',
	nsucceq: '\u2AB0\u0338',
	nsup: '\u2285',
	nsupE: '\u2AC6\u0338',
	nsupe: '\u2289',
	nsupset: '\u2283\u20D2',
	nsupseteq: '\u2289',
	nsupseteqq: '\u2AC6\u0338',
	ntgl: '\u2279',
	Ntilde: '\u00D1',
	ntilde: '\u00F1',
	ntlg: '\u2278',
	ntriangleleft: '\u22EA',
	ntrianglelefteq: '\u22EC',
	ntriangleright: '\u22EB',
	ntrianglerighteq: '\u22ED',
	Nu: '\u039D',
	nu: '\u03BD',
	num: '\u0023',
	numero: '\u2116',
	numsp: '\u2007',
	nvap: '\u224D\u20D2',
	nVDash: '\u22AF',
	nVdash: '\u22AE',
	nvDash: '\u22AD',
	nvdash: '\u22AC',
	nvge: '\u2265\u20D2',
	nvgt: '\u003E\u20D2',
	nvHarr: '\u2904',
	nvinfin: '\u29DE',
	nvlArr: '\u2902',
	nvle: '\u2264\u20D2',
	nvlt: '\u003C\u20D2',
	nvltrie: '\u22B4\u20D2',
	nvrArr: '\u2903',
	nvrtrie: '\u22B5\u20D2',
	nvsim: '\u223C\u20D2',
	nwarhk: '\u2923',
	nwArr: '\u21D6',
	nwarr: '\u2196',
	nwarrow: '\u2196',
	nwnear: '\u2927',
	Oacute: '\u00D3',
	oacute: '\u00F3',
	oast: '\u229B',
	ocir: '\u229A',
	Ocirc: '\u00D4',
	ocirc: '\u00F4',
	Ocy: '\u041E',
	ocy: '\u043E',
	odash: '\u229D',
	Odblac: '\u0150',
	odblac: '\u0151',
	odiv: '\u2A38',
	odot: '\u2299',
	odsold: '\u29BC',
	OElig: '\u0152',
	oelig: '\u0153',
	ofcir: '\u29BF',
	Ofr: '\uD835\uDD12',
	ofr: '\uD835\uDD2C',
	ogon: '\u02DB',
	Ograve: '\u00D2',
	ograve: '\u00F2',
	ogt: '\u29C1',
	ohbar: '\u29B5',
	ohm: '\u03A9',
	oint: '\u222E',
	olarr: '\u21BA',
	olcir: '\u29BE',
	olcross: '\u29BB',
	oline: '\u203E',
	olt: '\u29C0',
	Omacr: '\u014C',
	omacr: '\u014D',
	Omega: '\u03A9',
	omega: '\u03C9',
	Omicron: '\u039F',
	omicron: '\u03BF',
	omid: '\u29B6',
	ominus: '\u2296',
	Oopf: '\uD835\uDD46',
	oopf: '\uD835\uDD60',
	opar: '\u29B7',
	OpenCurlyDoubleQuote: '\u201C',
	OpenCurlyQuote: '\u2018',
	operp: '\u29B9',
	oplus: '\u2295',
	Or: '\u2A54',
	or: '\u2228',
	orarr: '\u21BB',
	ord: '\u2A5D',
	order: '\u2134',
	orderof: '\u2134',
	ordf: '\u00AA',
	ordm: '\u00BA',
	origof: '\u22B6',
	oror: '\u2A56',
	orslope: '\u2A57',
	orv: '\u2A5B',
	oS: '\u24C8',
	Oscr: '\uD835\uDCAA',
	oscr: '\u2134',
	Oslash: '\u00D8',
	oslash: '\u00F8',
	osol: '\u2298',
	Otilde: '\u00D5',
	otilde: '\u00F5',
	Otimes: '\u2A37',
	otimes: '\u2297',
	otimesas: '\u2A36',
	Ouml: '\u00D6',
	ouml: '\u00F6',
	ovbar: '\u233D',
	OverBar: '\u203E',
	OverBrace: '\u23DE',
	OverBracket: '\u23B4',
	OverParenthesis: '\u23DC',
	par: '\u2225',
	para: '\u00B6',
	parallel: '\u2225',
	parsim: '\u2AF3',
	parsl: '\u2AFD',
	part: '\u2202',
	PartialD: '\u2202',
	Pcy: '\u041F',
	pcy: '\u043F',
	percnt: '\u0025',
	period: '\u002E',
	permil: '\u2030',
	perp: '\u22A5',
	pertenk: '\u2031',
	Pfr: '\uD835\uDD13',
	pfr: '\uD835\uDD2D',
	Phi: '\u03A6',
	phi: '\u03C6',
	phiv: '\u03D5',
	phmmat: '\u2133',
	phone: '\u260E',
	Pi: '\u03A0',
	pi: '\u03C0',
	pitchfork: '\u22D4',
	piv: '\u03D6',
	planck: '\u210F',
	planckh: '\u210E',
	plankv: '\u210F',
	plus: '\u002B',
	plusacir: '\u2A23',
	plusb: '\u229E',
	pluscir: '\u2A22',
	plusdo: '\u2214',
	plusdu: '\u2A25',
	pluse: '\u2A72',
	PlusMinus: '\u00B1',
	plusmn: '\u00B1',
	plussim: '\u2A26',
	plustwo: '\u2A27',
	pm: '\u00B1',
	Poincareplane: '\u210C',
	pointint: '\u2A15',
	Popf: '\u2119',
	popf: '\uD835\uDD61',
	pound: '\u00A3',
	Pr: '\u2ABB',
	pr: '\u227A',
	prap: '\u2AB7',
	prcue: '\u227C',
	prE: '\u2AB3',
	pre: '\u2AAF',
	prec: '\u227A',
	precapprox: '\u2AB7',
	preccurlyeq: '\u227C',
	Precedes: '\u227A',
	PrecedesEqual: '\u2AAF',
	PrecedesSlantEqual: '\u227C',
	PrecedesTilde: '\u227E',
	preceq: '\u2AAF',
	precnapprox: '\u2AB9',
	precneqq: '\u2AB5',
	precnsim: '\u22E8',
	precsim: '\u227E',
	Prime: '\u2033',
	prime: '\u2032',
	primes: '\u2119',
	prnap: '\u2AB9',
	prnE: '\u2AB5',
	prnsim: '\u22E8',
	prod: '\u220F',
	Product: '\u220F',
	profalar: '\u232E',
	profline: '\u2312',
	profsurf: '\u2313',
	prop: '\u221D',
	Proportion: '\u2237',
	Proportional: '\u221D',
	propto: '\u221D',
	prsim: '\u227E',
	prurel: '\u22B0',
	Pscr: '\uD835\uDCAB',
	pscr: '\uD835\uDCC5',
	Psi: '\u03A8',
	psi: '\u03C8',
	puncsp: '\u2008',
	Qfr: '\uD835\uDD14',
	qfr: '\uD835\uDD2E',
	qint: '\u2A0C',
	Qopf: '\u211A',
	qopf: '\uD835\uDD62',
	qprime: '\u2057',
	Qscr: '\uD835\uDCAC',
	qscr: '\uD835\uDCC6',
	quaternions: '\u210D',
	quatint: '\u2A16',
	quest: '\u003F',
	questeq: '\u225F',
	QUOT: '\u0022',
	quot: '\u0022',
	rAarr: '\u21DB',
	race: '\u223D\u0331',
	Racute: '\u0154',
	racute: '\u0155',
	radic: '\u221A',
	raemptyv: '\u29B3',
	Rang: '\u27EB',
	rang: '\u27E9',
	rangd: '\u2992',
	range: '\u29A5',
	rangle: '\u27E9',
	raquo: '\u00BB',
	Rarr: '\u21A0',
	rArr: '\u21D2',
	rarr: '\u2192',
	rarrap: '\u2975',
	rarrb: '\u21E5',
	rarrbfs: '\u2920',
	rarrc: '\u2933',
	rarrfs: '\u291E',
	rarrhk: '\u21AA',
	rarrlp: '\u21AC',
	rarrpl: '\u2945',
	rarrsim: '\u2974',
	Rarrtl: '\u2916',
	rarrtl: '\u21A3',
	rarrw: '\u219D',
	rAtail: '\u291C',
	ratail: '\u291A',
	ratio: '\u2236',
	rationals: '\u211A',
	RBarr: '\u2910',
	rBarr: '\u290F',
	rbarr: '\u290D',
	rbbrk: '\u2773',
	rbrace: '\u007D',
	rbrack: '\u005D',
	rbrke: '\u298C',
	rbrksld: '\u298E',
	rbrkslu: '\u2990',
	Rcaron: '\u0158',
	rcaron: '\u0159',
	Rcedil: '\u0156',
	rcedil: '\u0157',
	rceil: '\u2309',
	rcub: '\u007D',
	Rcy: '\u0420',
	rcy: '\u0440',
	rdca: '\u2937',
	rdldhar: '\u2969',
	rdquo: '\u201D',
	rdquor: '\u201D',
	rdsh: '\u21B3',
	Re: '\u211C',
	real: '\u211C',
	realine: '\u211B',
	realpart: '\u211C',
	reals: '\u211D',
	rect: '\u25AD',
	REG: '\u00AE',
	reg: '\u00AE',
	ReverseElement: '\u220B',
	ReverseEquilibrium: '\u21CB',
	ReverseUpEquilibrium: '\u296F',
	rfisht: '\u297D',
	rfloor: '\u230B',
	Rfr: '\u211C',
	rfr: '\uD835\uDD2F',
	rHar: '\u2964',
	rhard: '\u21C1',
	rharu: '\u21C0',
	rharul: '\u296C',
	Rho: '\u03A1',
	rho: '\u03C1',
	rhov: '\u03F1',
	RightAngleBracket: '\u27E9',
	RightArrow: '\u2192',
	Rightarrow: '\u21D2',
	rightarrow: '\u2192',
	RightArrowBar: '\u21E5',
	RightArrowLeftArrow: '\u21C4',
	rightarrowtail: '\u21A3',
	RightCeiling: '\u2309',
	RightDoubleBracket: '\u27E7',
	RightDownTeeVector: '\u295D',
	RightDownVector: '\u21C2',
	RightDownVectorBar: '\u2955',
	RightFloor: '\u230B',
	rightharpoondown: '\u21C1',
	rightharpoonup: '\u21C0',
	rightleftarrows: '\u21C4',
	rightleftharpoons: '\u21CC',
	rightrightarrows: '\u21C9',
	rightsquigarrow: '\u219D',
	RightTee: '\u22A2',
	RightTeeArrow: '\u21A6',
	RightTeeVector: '\u295B',
	rightthreetimes: '\u22CC',
	RightTriangle: '\u22B3',
	RightTriangleBar: '\u29D0',
	RightTriangleEqual: '\u22B5',
	RightUpDownVector: '\u294F',
	RightUpTeeVector: '\u295C',
	RightUpVector: '\u21BE',
	RightUpVectorBar: '\u2954',
	RightVector: '\u21C0',
	RightVectorBar: '\u2953',
	ring: '\u02DA',
	risingdotseq: '\u2253',
	rlarr: '\u21C4',
	rlhar: '\u21CC',
	rlm: '\u200F',
	rmoust: '\u23B1',
	rmoustache: '\u23B1',
	rnmid: '\u2AEE',
	roang: '\u27ED',
	roarr: '\u21FE',
	robrk: '\u27E7',
	ropar: '\u2986',
	Ropf: '\u211D',
	ropf: '\uD835\uDD63',
	roplus: '\u2A2E',
	rotimes: '\u2A35',
	RoundImplies: '\u2970',
	rpar: '\u0029',
	rpargt: '\u2994',
	rppolint: '\u2A12',
	rrarr: '\u21C9',
	Rrightarrow: '\u21DB',
	rsaquo: '\u203A',
	Rscr: '\u211B',
	rscr: '\uD835\uDCC7',
	Rsh: '\u21B1',
	rsh: '\u21B1',
	rsqb: '\u005D',
	rsquo: '\u2019',
	rsquor: '\u2019',
	rthree: '\u22CC',
	rtimes: '\u22CA',
	rtri: '\u25B9',
	rtrie: '\u22B5',
	rtrif: '\u25B8',
	rtriltri: '\u29CE',
	RuleDelayed: '\u29F4',
	ruluhar: '\u2968',
	rx: '\u211E',
	Sacute: '\u015A',
	sacute: '\u015B',
	sbquo: '\u201A',
	Sc: '\u2ABC',
	sc: '\u227B',
	scap: '\u2AB8',
	Scaron: '\u0160',
	scaron: '\u0161',
	sccue: '\u227D',
	scE: '\u2AB4',
	sce: '\u2AB0',
	Scedil: '\u015E',
	scedil: '\u015F',
	Scirc: '\u015C',
	scirc: '\u015D',
	scnap: '\u2ABA',
	scnE: '\u2AB6',
	scnsim: '\u22E9',
	scpolint: '\u2A13',
	scsim: '\u227F',
	Scy: '\u0421',
	scy: '\u0441',
	sdot: '\u22C5',
	sdotb: '\u22A1',
	sdote: '\u2A66',
	searhk: '\u2925',
	seArr: '\u21D8',
	searr: '\u2198',
	searrow: '\u2198',
	sect: '\u00A7',
	semi: '\u003B',
	seswar: '\u2929',
	setminus: '\u2216',
	setmn: '\u2216',
	sext: '\u2736',
	Sfr: '\uD835\uDD16',
	sfr: '\uD835\uDD30',
	sfrown: '\u2322',
	sharp: '\u266F',
	SHCHcy: '\u0429',
	shchcy: '\u0449',
	SHcy: '\u0428',
	shcy: '\u0448',
	ShortDownArrow: '\u2193',
	ShortLeftArrow: '\u2190',
	shortmid: '\u2223',
	shortparallel: '\u2225',
	ShortRightArrow: '\u2192',
	ShortUpArrow: '\u2191',
	shy: '\u00AD',
	Sigma: '\u03A3',
	sigma: '\u03C3',
	sigmaf: '\u03C2',
	sigmav: '\u03C2',
	sim: '\u223C',
	simdot: '\u2A6A',
	sime: '\u2243',
	simeq: '\u2243',
	simg: '\u2A9E',
	simgE: '\u2AA0',
	siml: '\u2A9D',
	simlE: '\u2A9F',
	simne: '\u2246',
	simplus: '\u2A24',
	simrarr: '\u2972',
	slarr: '\u2190',
	SmallCircle: '\u2218',
	smallsetminus: '\u2216',
	smashp: '\u2A33',
	smeparsl: '\u29E4',
	smid: '\u2223',
	smile: '\u2323',
	smt: '\u2AAA',
	smte: '\u2AAC',
	smtes: '\u2AAC\uFE00',
	SOFTcy: '\u042C',
	softcy: '\u044C',
	sol: '\u002F',
	solb: '\u29C4',
	solbar: '\u233F',
	Sopf: '\uD835\uDD4A',
	sopf: '\uD835\uDD64',
	spades: '\u2660',
	spadesuit: '\u2660',
	spar: '\u2225',
	sqcap: '\u2293',
	sqcaps: '\u2293\uFE00',
	sqcup: '\u2294',
	sqcups: '\u2294\uFE00',
	Sqrt: '\u221A',
	sqsub: '\u228F',
	sqsube: '\u2291',
	sqsubset: '\u228F',
	sqsubseteq: '\u2291',
	sqsup: '\u2290',
	sqsupe: '\u2292',
	sqsupset: '\u2290',
	sqsupseteq: '\u2292',
	squ: '\u25A1',
	Square: '\u25A1',
	square: '\u25A1',
	SquareIntersection: '\u2293',
	SquareSubset: '\u228F',
	SquareSubsetEqual: '\u2291',
	SquareSuperset: '\u2290',
	SquareSupersetEqual: '\u2292',
	SquareUnion: '\u2294',
	squarf: '\u25AA',
	squf: '\u25AA',
	srarr: '\u2192',
	Sscr: '\uD835\uDCAE',
	sscr: '\uD835\uDCC8',
	ssetmn: '\u2216',
	ssmile: '\u2323',
	sstarf: '\u22C6',
	Star: '\u22C6',
	star: '\u2606',
	starf: '\u2605',
	straightepsilon: '\u03F5',
	straightphi: '\u03D5',
	strns: '\u00AF',
	Sub: '\u22D0',
	sub: '\u2282',
	subdot: '\u2ABD',
	subE: '\u2AC5',
	sube: '\u2286',
	subedot: '\u2AC3',
	submult: '\u2AC1',
	subnE: '\u2ACB',
	subne: '\u228A',
	subplus: '\u2ABF',
	subrarr: '\u2979',
	Subset: '\u22D0',
	subset: '\u2282',
	subseteq: '\u2286',
	subseteqq: '\u2AC5',
	SubsetEqual: '\u2286',
	subsetneq: '\u228A',
	subsetneqq: '\u2ACB',
	subsim: '\u2AC7',
	subsub: '\u2AD5',
	subsup: '\u2AD3',
	succ: '\u227B',
	succapprox: '\u2AB8',
	succcurlyeq: '\u227D',
	Succeeds: '\u227B',
	SucceedsEqual: '\u2AB0',
	SucceedsSlantEqual: '\u227D',
	SucceedsTilde: '\u227F',
	succeq: '\u2AB0',
	succnapprox: '\u2ABA',
	succneqq: '\u2AB6',
	succnsim: '\u22E9',
	succsim: '\u227F',
	SuchThat: '\u220B',
	Sum: '\u2211',
	sum: '\u2211',
	sung: '\u266A',
	Sup: '\u22D1',
	sup: '\u2283',
	sup1: '\u00B9',
	sup2: '\u00B2',
	sup3: '\u00B3',
	supdot: '\u2ABE',
	supdsub: '\u2AD8',
	supE: '\u2AC6',
	supe: '\u2287',
	supedot: '\u2AC4',
	Superset: '\u2283',
	SupersetEqual: '\u2287',
	suphsol: '\u27C9',
	suphsub: '\u2AD7',
	suplarr: '\u297B',
	supmult: '\u2AC2',
	supnE: '\u2ACC',
	supne: '\u228B',
	supplus: '\u2AC0',
	Supset: '\u22D1',
	supset: '\u2283',
	supseteq: '\u2287',
	supseteqq: '\u2AC6',
	supsetneq: '\u228B',
	supsetneqq: '\u2ACC',
	supsim: '\u2AC8',
	supsub: '\u2AD4',
	supsup: '\u2AD6',
	swarhk: '\u2926',
	swArr: '\u21D9',
	swarr: '\u2199',
	swarrow: '\u2199',
	swnwar: '\u292A',
	szlig: '\u00DF',
	Tab: '\u0009',
	target: '\u2316',
	Tau: '\u03A4',
	tau: '\u03C4',
	tbrk: '\u23B4',
	Tcaron: '\u0164',
	tcaron: '\u0165',
	Tcedil: '\u0162',
	tcedil: '\u0163',
	Tcy: '\u0422',
	tcy: '\u0442',
	tdot: '\u20DB',
	telrec: '\u2315',
	Tfr: '\uD835\uDD17',
	tfr: '\uD835\uDD31',
	there4: '\u2234',
	Therefore: '\u2234',
	therefore: '\u2234',
	Theta: '\u0398',
	theta: '\u03B8',
	thetasym: '\u03D1',
	thetav: '\u03D1',
	thickapprox: '\u2248',
	thicksim: '\u223C',
	ThickSpace: '\u205F\u200A',
	thinsp: '\u2009',
	ThinSpace: '\u2009',
	thkap: '\u2248',
	thksim: '\u223C',
	THORN: '\u00DE',
	thorn: '\u00FE',
	Tilde: '\u223C',
	tilde: '\u02DC',
	TildeEqual: '\u2243',
	TildeFullEqual: '\u2245',
	TildeTilde: '\u2248',
	times: '\u00D7',
	timesb: '\u22A0',
	timesbar: '\u2A31',
	timesd: '\u2A30',
	tint: '\u222D',
	toea: '\u2928',
	top: '\u22A4',
	topbot: '\u2336',
	topcir: '\u2AF1',
	Topf: '\uD835\uDD4B',
	topf: '\uD835\uDD65',
	topfork: '\u2ADA',
	tosa: '\u2929',
	tprime: '\u2034',
	TRADE: '\u2122',
	trade: '\u2122',
	triangle: '\u25B5',
	triangledown: '\u25BF',
	triangleleft: '\u25C3',
	trianglelefteq: '\u22B4',
	triangleq: '\u225C',
	triangleright: '\u25B9',
	trianglerighteq: '\u22B5',
	tridot: '\u25EC',
	trie: '\u225C',
	triminus: '\u2A3A',
	TripleDot: '\u20DB',
	triplus: '\u2A39',
	trisb: '\u29CD',
	tritime: '\u2A3B',
	trpezium: '\u23E2',
	Tscr: '\uD835\uDCAF',
	tscr: '\uD835\uDCC9',
	TScy: '\u0426',
	tscy: '\u0446',
	TSHcy: '\u040B',
	tshcy: '\u045B',
	Tstrok: '\u0166',
	tstrok: '\u0167',
	twixt: '\u226C',
	twoheadleftarrow: '\u219E',
	twoheadrightarrow: '\u21A0',
	Uacute: '\u00DA',
	uacute: '\u00FA',
	Uarr: '\u219F',
	uArr: '\u21D1',
	uarr: '\u2191',
	Uarrocir: '\u2949',
	Ubrcy: '\u040E',
	ubrcy: '\u045E',
	Ubreve: '\u016C',
	ubreve: '\u016D',
	Ucirc: '\u00DB',
	ucirc: '\u00FB',
	Ucy: '\u0423',
	ucy: '\u0443',
	udarr: '\u21C5',
	Udblac: '\u0170',
	udblac: '\u0171',
	udhar: '\u296E',
	ufisht: '\u297E',
	Ufr: '\uD835\uDD18',
	ufr: '\uD835\uDD32',
	Ugrave: '\u00D9',
	ugrave: '\u00F9',
	uHar: '\u2963',
	uharl: '\u21BF',
	uharr: '\u21BE',
	uhblk: '\u2580',
	ulcorn: '\u231C',
	ulcorner: '\u231C',
	ulcrop: '\u230F',
	ultri: '\u25F8',
	Umacr: '\u016A',
	umacr: '\u016B',
	uml: '\u00A8',
	UnderBar: '\u005F',
	UnderBrace: '\u23DF',
	UnderBracket: '\u23B5',
	UnderParenthesis: '\u23DD',
	Union: '\u22C3',
	UnionPlus: '\u228E',
	Uogon: '\u0172',
	uogon: '\u0173',
	Uopf: '\uD835\uDD4C',
	uopf: '\uD835\uDD66',
	UpArrow: '\u2191',
	Uparrow: '\u21D1',
	uparrow: '\u2191',
	UpArrowBar: '\u2912',
	UpArrowDownArrow: '\u21C5',
	UpDownArrow: '\u2195',
	Updownarrow: '\u21D5',
	updownarrow: '\u2195',
	UpEquilibrium: '\u296E',
	upharpoonleft: '\u21BF',
	upharpoonright: '\u21BE',
	uplus: '\u228E',
	UpperLeftArrow: '\u2196',
	UpperRightArrow: '\u2197',
	Upsi: '\u03D2',
	upsi: '\u03C5',
	upsih: '\u03D2',
	Upsilon: '\u03A5',
	upsilon: '\u03C5',
	UpTee: '\u22A5',
	UpTeeArrow: '\u21A5',
	upuparrows: '\u21C8',
	urcorn: '\u231D',
	urcorner: '\u231D',
	urcrop: '\u230E',
	Uring: '\u016E',
	uring: '\u016F',
	urtri: '\u25F9',
	Uscr: '\uD835\uDCB0',
	uscr: '\uD835\uDCCA',
	utdot: '\u22F0',
	Utilde: '\u0168',
	utilde: '\u0169',
	utri: '\u25B5',
	utrif: '\u25B4',
	uuarr: '\u21C8',
	Uuml: '\u00DC',
	uuml: '\u00FC',
	uwangle: '\u29A7',
	vangrt: '\u299C',
	varepsilon: '\u03F5',
	varkappa: '\u03F0',
	varnothing: '\u2205',
	varphi: '\u03D5',
	varpi: '\u03D6',
	varpropto: '\u221D',
	vArr: '\u21D5',
	varr: '\u2195',
	varrho: '\u03F1',
	varsigma: '\u03C2',
	varsubsetneq: '\u228A\uFE00',
	varsubsetneqq: '\u2ACB\uFE00',
	varsupsetneq: '\u228B\uFE00',
	varsupsetneqq: '\u2ACC\uFE00',
	vartheta: '\u03D1',
	vartriangleleft: '\u22B2',
	vartriangleright: '\u22B3',
	Vbar: '\u2AEB',
	vBar: '\u2AE8',
	vBarv: '\u2AE9',
	Vcy: '\u0412',
	vcy: '\u0432',
	VDash: '\u22AB',
	Vdash: '\u22A9',
	vDash: '\u22A8',
	vdash: '\u22A2',
	Vdashl: '\u2AE6',
	Vee: '\u22C1',
	vee: '\u2228',
	veebar: '\u22BB',
	veeeq: '\u225A',
	vellip: '\u22EE',
	Verbar: '\u2016',
	verbar: '\u007C',
	Vert: '\u2016',
	vert: '\u007C',
	VerticalBar: '\u2223',
	VerticalLine: '\u007C',
	VerticalSeparator: '\u2758',
	VerticalTilde: '\u2240',
	VeryThinSpace: '\u200A',
	Vfr: '\uD835\uDD19',
	vfr: '\uD835\uDD33',
	vltri: '\u22B2',
	vnsub: '\u2282\u20D2',
	vnsup: '\u2283\u20D2',
	Vopf: '\uD835\uDD4D',
	vopf: '\uD835\uDD67',
	vprop: '\u221D',
	vrtri: '\u22B3',
	Vscr: '\uD835\uDCB1',
	vscr: '\uD835\uDCCB',
	vsubnE: '\u2ACB\uFE00',
	vsubne: '\u228A\uFE00',
	vsupnE: '\u2ACC\uFE00',
	vsupne: '\u228B\uFE00',
	Vvdash: '\u22AA',
	vzigzag: '\u299A',
	Wcirc: '\u0174',
	wcirc: '\u0175',
	wedbar: '\u2A5F',
	Wedge: '\u22C0',
	wedge: '\u2227',
	wedgeq: '\u2259',
	weierp: '\u2118',
	Wfr: '\uD835\uDD1A',
	wfr: '\uD835\uDD34',
	Wopf: '\uD835\uDD4E',
	wopf: '\uD835\uDD68',
	wp: '\u2118',
	wr: '\u2240',
	wreath: '\u2240',
	Wscr: '\uD835\uDCB2',
	wscr: '\uD835\uDCCC',
	xcap: '\u22C2',
	xcirc: '\u25EF',
	xcup: '\u22C3',
	xdtri: '\u25BD',
	Xfr: '\uD835\uDD1B',
	xfr: '\uD835\uDD35',
	xhArr: '\u27FA',
	xharr: '\u27F7',
	Xi: '\u039E',
	xi: '\u03BE',
	xlArr: '\u27F8',
	xlarr: '\u27F5',
	xmap: '\u27FC',
	xnis: '\u22FB',
	xodot: '\u2A00',
	Xopf: '\uD835\uDD4F',
	xopf: '\uD835\uDD69',
	xoplus: '\u2A01',
	xotime: '\u2A02',
	xrArr: '\u27F9',
	xrarr: '\u27F6',
	Xscr: '\uD835\uDCB3',
	xscr: '\uD835\uDCCD',
	xsqcup: '\u2A06',
	xuplus: '\u2A04',
	xutri: '\u25B3',
	xvee: '\u22C1',
	xwedge: '\u22C0',
	Yacute: '\u00DD',
	yacute: '\u00FD',
	YAcy: '\u042F',
	yacy: '\u044F',
	Ycirc: '\u0176',
	ycirc: '\u0177',
	Ycy: '\u042B',
	ycy: '\u044B',
	yen: '\u00A5',
	Yfr: '\uD835\uDD1C',
	yfr: '\uD835\uDD36',
	YIcy: '\u0407',
	yicy: '\u0457',
	Yopf: '\uD835\uDD50',
	yopf: '\uD835\uDD6A',
	Yscr: '\uD835\uDCB4',
	yscr: '\uD835\uDCCE',
	YUcy: '\u042E',
	yucy: '\u044E',
	Yuml: '\u0178',
	yuml: '\u00FF',
	Zacute: '\u0179',
	zacute: '\u017A',
	Zcaron: '\u017D',
	zcaron: '\u017E',
	Zcy: '\u0417',
	zcy: '\u0437',
	Zdot: '\u017B',
	zdot: '\u017C',
	zeetrf: '\u2128',
	ZeroWidthSpace: '\u200B',
	Zeta: '\u0396',
	zeta: '\u03B6',
	Zfr: '\u2128',
	zfr: '\uD835\uDD37',
	ZHcy: '\u0416',
	zhcy: '\u0436',
	zigrarr: '\u21DD',
	Zopf: '\u2124',
	zopf: '\uD835\uDD6B',
	Zscr: '\uD835\uDCB5',
	zscr: '\uD835\uDCCF',
	zwj: '\u200D',
	zwnj: '\u200C',
});

/**
 * @deprecated use `HTML_ENTITIES` instead
 * @see HTML_ENTITIES
 */
exports.entityMap = exports.HTML_ENTITIES;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var NAMESPACE = __webpack_require__(56).NAMESPACE;

//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

/**
 * Creates an error that will not be caught by XMLReader aka the SAX parser.
 *
 * @param {string} message
 * @param {any?} locator Optional, can provide details about the location in the source
 * @constructor
 */
function ParseError(message, locator) {
	this.message = message
	this.locator = locator
	if(Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
}
ParseError.prototype = new Error();
ParseError.prototype.name = ParseError.name

function XMLReader(){

}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k];
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;

	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, '');
				var config = parseStack.pop();
				if(end<0){

	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for(var prefix in localNSMap) {
							if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
								domBuilder.endPrefixMapping(prefix);
							}
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName ); // No known test case
					}
		        }else{
		        	parseStack.push(config)
		        }

				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;


				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					domBuilder.locator = locator2
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
				}

				if (NAMESPACE.isHTML(el.uri) && !el.closed) {
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				} else {
					end++;
				}
			}
		}catch(e){
			if (e instanceof ParseError) {
				throw e;
			}
			errorHandler.error('element parse error: '+e)
			end = -1;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){

	/**
	 * @param {string} qname
	 * @param {string} value
	 * @param {number} startIndex
	 */
	function addAttribute(qname, value, startIndex) {
		if (el.attributeNames.hasOwnProperty(qname)) {
			errorHandler.fatalError('Attribute ' + qname + ' redefined')
		}
		el.addValue(qname, value, startIndex)
	}
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName'); // No known test case
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="')
					attrName = source.slice(start,p)
				}
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					addAttribute(attrName, value, start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				addAttribute(attrName, value, start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="'); // No known test case
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
				break;
				case S_ATTR_SPACE:
					el.closed = true;
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')") // No known test case
			}
			break;
		case ''://end document
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!');
					addAttribute(attrName, value.replace(/&#?\w+;/g,entityReplacer), start)
				}else{
					if(!NAMESPACE.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					}
					addAttribute(value, value, start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					addAttribute(attrName, value, start)
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if (!NAMESPACE.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
					}
					addAttribute(attrName, attrName, start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = NAMESPACE.XMLNS
			domBuilder.startPrefixMapping(nsPrefix, value)
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = NAMESPACE.XML;
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || '']

				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for (prefix in localNSMap) {
				if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
					domBuilder.endPrefixMapping(prefix);
				}
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}

		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>')
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName)
		}
		closeMap[tagName] =pos
	}
	return pos<elStartEnd;
	//}
}

function _copy (source, target) {
	for (var n in source) {
		if (Object.prototype.hasOwnProperty.call(source, n)) {
			target[n] = source[n];
		}
	}
}

function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA()
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = false;
			var sysid = false;
			if(len>3){
				if(/^public$/i.test(matchs[2][0])){
					pubid = matchs[3][0];
					sysid = len>4 && matchs[4][0];
				}else if(/^system$/i.test(matchs[2][0])){
					sysid = matchs[3][0];
				}
			}
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name, pubid, sysid);
			domBuilder.endDTD();

			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

function ElementAttributes(){
	this.attributeNames = {}
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	addValue:function(qName, value, offset) {
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this.attributeNames[qName] = this.length;
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}



function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

exports.XMLReader = XMLReader;
exports.ParseError = ParseError;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
             true ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.strophe = {}));
})(this, (function (exports) { 'use strict';

            var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

            /*
             * This module provides uniform
             * Shims APIs and globals that are not present in all JS environments,
             * the most common example for Strophe being browser APIs like WebSocket
             * and DOM that don't exist under nodejs.
             *
             * Usually these will be supplied in nodejs by conditionally requiring a
             * NPM module that provides a compatible implementation.
             */

            /* global global */

            /**
             * WHATWG WebSockets API
             * https://www.w3.org/TR/websockets/
             *
             * Interface to use the web socket protocol
             *
             * Used implementations:
             * - supported browsers: built-in in WebSocket global
             *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility
             * - nodejs: use standard-compliant 'ws' module
             *   https://www.npmjs.com/package/ws
             */
            function getWebSocketImplementation() {
              let WebSocketImplementation = global$1.WebSocket;

              if (typeof WebSocketImplementation === 'undefined') {
                try {
                  WebSocketImplementation = __webpack_require__(210);
                } catch (err) {
                  throw new Error('You must install the "ws" package to use Strophe in nodejs.');
                }
              }

              return WebSocketImplementation;
            }

            const WebSocket = getWebSocketImplementation();
            /**
             * DOMParser
             * https://w3c.github.io/DOM-Parsing/#the-domparser-interface
             *
             * Interface to parse XML strings into Document objects
             *
             * Used implementations:
             * - supported browsers: built-in in DOMParser global
             *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility
             * - nodejs: use 'xmldom' module
             *   https://www.npmjs.com/package/xmldom
             */

            function getDOMParserImplementation() {
              let DOMParserImplementation = global$1.DOMParser;

              if (typeof DOMParserImplementation === 'undefined') {
                try {
                  DOMParserImplementation = __webpack_require__(111).DOMParser;
                } catch (err) {
                  throw new Error('You must install the "xmldom" package to use Strophe in nodejs.');
                }
              }

              return DOMParserImplementation;
            }

            const DOMParser = getDOMParserImplementation();
            /**
             *  Gets IE xml doc object. Used by getDummyXMLDocument shim.
             *
             *  Returns:
             *    A Microsoft XML DOM Object
             *  See Also:
             *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx
             */

            function _getIEXmlDom() {
              const docStrings = ["Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"];

              for (let d = 0; d < docStrings.length; d++) {
                try {
                  // eslint-disable-next-line no-undef
                  const doc = new ActiveXObject(docStrings[d]);
                  return doc;
                } catch (e) {// Try next one
                }
              }
            }
            /**
             * Creates a dummy XML DOM document to serve as an element and text node generator.
             *
             * Used implementations:
             *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific
             *    workaround
             *  - other supported browsers: use document's createDocument
             *  - nodejs: use 'xmldom'
             */


            function getDummyXMLDOMDocument() {
              // nodejs
              if (typeof document === 'undefined') {
                try {
                  const DOMImplementation = __webpack_require__(111).DOMImplementation;

                  return new DOMImplementation().createDocument('jabber:client', 'strophe', null);
                } catch (err) {
                  throw new Error('You must install the "xmldom" package to use Strophe in nodejs.');
                }
              } // IE < 10


              if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {
                const doc = _getIEXmlDom();

                doc.appendChild(doc.createElement('strophe'));
                return doc;
              } // All other supported browsers


              return document.implementation.createDocument('jabber:client', 'strophe', null);
            }

            /*
             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
             * Digest Algorithm, as defined in RFC 1321.
             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             * Distributed under the BSD License
             * See http://pajhome.org.uk/crypt/md5 for more info.
             */

            /*
             * Everything that isn't used by Strophe has been stripped here!
             */

            /*
             * Add integers, wrapping at 2^32. This uses 16-bit operations internally
             * to work around bugs in some JS interpreters.
             */
            const safe_add$1 = function (x, y) {
              const lsw = (x & 0xFFFF) + (y & 0xFFFF);
              const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
              return msw << 16 | lsw & 0xFFFF;
            };
            /*
             * Bitwise rotate a 32-bit number to the left.
             */


            const bit_rol = function (num, cnt) {
              return num << cnt | num >>> 32 - cnt;
            };
            /*
             * Convert a string to an array of little-endian words
             */


            const str2binl = function (str) {
              if (typeof str !== "string") {
                throw new Error("str2binl was passed a non-string");
              }

              const bin = [];

              for (let i = 0; i < str.length * 8; i += 8) {
                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;
              }

              return bin;
            };
            /*
             * Convert an array of little-endian words to a string
             */


            const binl2str = function (bin) {
              let str = "";

              for (let i = 0; i < bin.length * 32; i += 8) {
                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);
              }

              return str;
            };
            /*
             * Convert an array of little-endian words to a hex string.
             */


            const binl2hex = function (binarray) {
              const hex_tab = "0123456789abcdef";
              let str = "";

              for (let i = 0; i < binarray.length * 4; i++) {
                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);
              }

              return str;
            };
            /*
             * These functions implement the four basic operations the algorithm uses.
             */


            const md5_cmn = function (q, a, b, x, s, t) {
              return safe_add$1(bit_rol(safe_add$1(safe_add$1(a, q), safe_add$1(x, t)), s), b);
            };

            const md5_ff = function (a, b, c, d, x, s, t) {
              return md5_cmn(b & c | ~b & d, a, b, x, s, t);
            };

            const md5_gg = function (a, b, c, d, x, s, t) {
              return md5_cmn(b & d | c & ~d, a, b, x, s, t);
            };

            const md5_hh = function (a, b, c, d, x, s, t) {
              return md5_cmn(b ^ c ^ d, a, b, x, s, t);
            };

            const md5_ii = function (a, b, c, d, x, s, t) {
              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
            };
            /*
             * Calculate the MD5 of an array of little-endian words, and a bit length
             */


            const core_md5 = function (x, len) {
              /* append padding */
              x[len >> 5] |= 0x80 << len % 32;
              x[(len + 64 >>> 9 << 4) + 14] = len;
              let a = 1732584193;
              let b = -271733879;
              let c = -1732584194;
              let d = 271733878;
              let olda, oldb, oldc, oldd;

              for (let i = 0; i < x.length; i += 16) {
                olda = a;
                oldb = b;
                oldc = c;
                oldd = d;
                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
                a = safe_add$1(a, olda);
                b = safe_add$1(b, oldb);
                c = safe_add$1(c, oldc);
                d = safe_add$1(d, oldd);
              }

              return [a, b, c, d];
            };
            /*
             * These are the functions you'll usually want to call.
             * They take string arguments and return either hex or base-64 encoded
             * strings.
             */


            const MD5 = {
              hexdigest: function (s) {
                return binl2hex(core_md5(str2binl(s), s.length * 8));
              },
              hash: function (s) {
                return binl2str(core_md5(str2binl(s), s.length * 8));
              }
            };

            /** Class: Strophe.SASLMechanism
             *
             *  Encapsulates an SASL authentication mechanism.
             *
             *  User code may override the priority for each mechanism or disable it completely.
             *  See <priority> for information about changing priority and <test> for informatian on
             *  how to disable a mechanism.
             *
             *  By default, all mechanisms are enabled and the priorities are
             *
             *      SCRAM-SHA-1 - 60
             *      PLAIN       - 50
             *      OAUTHBEARER - 40
             *      X-OAUTH2    - 30
             *      ANONYMOUS   - 20
             *      EXTERNAL    - 10
             *
             *  See: Strophe.Connection.addSupportedSASLMechanisms
             */
            class SASLMechanism {
              /**
               * PrivateConstructor: Strophe.SASLMechanism
               * SASL auth mechanism abstraction.
               *
               *  Parameters:
               *    (String) name - SASL Mechanism name.
               *    (Boolean) isClientFirst - If client should send response first without challenge.
               *    (Number) priority - Priority.
               *
               *  Returns:
               *    A new Strophe.SASLMechanism object.
               */
              constructor(name, isClientFirst, priority) {
                /** PrivateVariable: mechname
                 *  Mechanism name.
                 */
                this.mechname = name;
                /** PrivateVariable: isClientFirst
                 *  If client sends response without initial server challenge.
                 */

                this.isClientFirst = isClientFirst;
                /** Variable: priority
                 *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).
                 *  Users may override this to prioritize mechanisms differently.
                 *
                 *  Example: (This will cause Strophe to choose the mechanism that the server sent first)
                 *
                 *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;
                 *
                 *  See <SASL mechanisms> for a list of available mechanisms.
                 *
                 */

                this.priority = priority;
              }
              /**
               *  Function: test
               *  Checks if mechanism able to run.
               *  To disable a mechanism, make this return false;
               *
               *  To disable plain authentication run
               *  > Strophe.SASLPlain.test = function() {
               *  >   return false;
               *  > }
               *
               *  See <SASL mechanisms> for a list of available mechanisms.
               *
               *  Parameters:
               *    (Strophe.Connection) connection - Target Connection.
               *
               *  Returns:
               *    (Boolean) If mechanism was able to run.
               */


              test() {
                // eslint-disable-line class-methods-use-this
                return true;
              }
              /** PrivateFunction: onStart
               *  Called before starting mechanism on some connection.
               *
               *  Parameters:
               *    (Strophe.Connection) connection - Target Connection.
               */


              onStart(connection) {
                this._connection = connection;
              }
              /** PrivateFunction: onChallenge
               *  Called by protocol implementation on incoming challenge.
               *
               *  By deafult, if the client is expected to send data first (isClientFirst === true),
               *  this method is called with `challenge` as null on the first call,
               *  unless `clientChallenge` is overridden in the relevant subclass.
               *
               *  Parameters:
               *    (Strophe.Connection) connection - Target Connection.
               *    (String) challenge - current challenge to handle.
               *
               *  Returns:
               *    (String) Mechanism response.
               */


              onChallenge(connection, challenge) {
                // eslint-disable-line
                throw new Error("You should implement challenge handling!");
              }
              /** PrivateFunction: clientChallenge
               *  Called by the protocol implementation if the client is expected to send
               *  data first in the authentication exchange (i.e. isClientFirst === true).
               *
               *  Parameters:
               *    (Strophe.Connection) connection - Target Connection.
               *
               *  Returns:
               *    (String) Mechanism response.
               */


              clientChallenge(connection) {
                if (!this.isClientFirst) {
                  throw new Error("clientChallenge should not be called if isClientFirst is false!");
                }

                return this.onChallenge(connection);
              }
              /** PrivateFunction: onFailure
               *  Protocol informs mechanism implementation about SASL failure.
               */


              onFailure() {
                this._connection = null;
              }
              /** PrivateFunction: onSuccess
               *  Protocol informs mechanism implementation about SASL success.
               */


              onSuccess() {
                this._connection = null;
              }

            }

            class SASLAnonymous extends SASLMechanism {
              /** PrivateConstructor: SASLAnonymous
               *  SASL ANONYMOUS authentication.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;
                super(mechname, isClientFirst, priority);
              }

              test(connection) {
                // eslint-disable-line class-methods-use-this
                return connection.authcid === null;
              }

            }

            class SASLExternal extends SASLMechanism {
              /** PrivateConstructor: SASLExternal
               *  SASL EXTERNAL authentication.
               *
               *  The EXTERNAL mechanism allows a client to request the server to use
               *  credentials established by means external to the mechanism to
               *  authenticate the client. The external means may be, for instance,
               *  TLS services.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
                super(mechname, isClientFirst, priority);
              }

              onChallenge(connection) {
                // eslint-disable-line class-methods-use-this

                /** According to XEP-178, an authzid SHOULD NOT be presented when the
                 * authcid contained or implied in the client certificate is the JID (i.e.
                 * authzid) with which the user wants to log in as.
                 *
                 * To NOT send the authzid, the user should therefore set the authcid equal
                 * to the JID when instantiating a new Strophe.Connection object.
                 */
                return connection.authcid === connection.authzid ? '' : connection.authzid;
              }

            }

            const utils = {
              utf16to8: function (str) {
                var i, c;
                var out = "";
                var len = str.length;

                for (i = 0; i < len; i++) {
                  c = str.charCodeAt(i);

                  if (c >= 0x0000 && c <= 0x007F) {
                    out += str.charAt(i);
                  } else if (c > 0x07FF) {
                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);
                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);
                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
                  } else {
                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);
                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
                  }
                }

                return out;
              },
              addCookies: function (cookies) {
                /* Parameters:
                 *  (Object) cookies - either a map of cookie names
                 *    to string values or to maps of cookie values.
                 *
                 * For example:
                 * { "myCookie": "1234" }
                 *
                 * or:
                 * { "myCookie": {
                 *      "value": "1234",
                 *      "domain": ".example.org",
                 *      "path": "/",
                 *      "expires": expirationDate
                 *      }
                 *  }
                 *
                 *  These values get passed to Strophe.Connection via
                 *   options.cookies
                 */
                cookies = cookies || {};

                for (const cookieName in cookies) {
                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {
                    let expires = '';
                    let domain = '';
                    let path = '';
                    const cookieObj = cookies[cookieName];
                    const isObj = typeof cookieObj === "object";
                    const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));

                    if (isObj) {
                      expires = cookieObj.expires ? ";expires=" + cookieObj.expires : '';
                      domain = cookieObj.domain ? ";domain=" + cookieObj.domain : '';
                      path = cookieObj.path ? ";path=" + cookieObj.path : '';
                    }

                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;
                  }
                }
              }
            };

            class SASLOAuthBearer extends SASLMechanism {
              /** PrivateConstructor: SASLOAuthBearer
               *  SASL OAuth Bearer authentication.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;
                super(mechname, isClientFirst, priority);
              }

              test(connection) {
                // eslint-disable-line class-methods-use-this
                return connection.pass !== null;
              }

              onChallenge(connection) {
                // eslint-disable-line class-methods-use-this
                let auth_str = 'n,';

                if (connection.authcid !== null) {
                  auth_str = auth_str + 'a=' + connection.authzid;
                }

                auth_str = auth_str + ',';
                auth_str = auth_str + "\u0001";
                auth_str = auth_str + 'auth=Bearer ';
                auth_str = auth_str + connection.pass;
                auth_str = auth_str + "\u0001";
                auth_str = auth_str + "\u0001";
                return utils.utf16to8(auth_str);
              }

            }

            class SASLPlain extends SASLMechanism {
              /** PrivateConstructor: SASLPlain
               *  SASL PLAIN authentication.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
                super(mechname, isClientFirst, priority);
              }

              test(connection) {
                // eslint-disable-line class-methods-use-this
                return connection.authcid !== null;
              }

              onChallenge(connection) {
                // eslint-disable-line class-methods-use-this
                const {
                  authcid,
                  authzid,
                  domain,
                  pass
                } = connection;

                if (!domain) {
                  throw new Error("SASLPlain onChallenge: domain is not defined!");
                } // Only include authzid if it differs from authcid.
                // See: https://tools.ietf.org/html/rfc6120#section-6.3.8


                let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';
                auth_str = auth_str + "\u0000";
                auth_str = auth_str + authcid;
                auth_str = auth_str + "\u0000";
                auth_str = auth_str + pass;
                return utils.utf16to8(auth_str);
              }

            }

            /*
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
             * in FIPS PUB 180-1
             * Version 2.1a Copyright Paul Johnston 2000 - 2002.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             * Distributed under the BSD License
             * See http://pajhome.org.uk/crypt/md5 for details.
             */

            /* global define */

            /* Some functions and variables have been stripped for use with Strophe */

            /*
             * Calculate the SHA-1 of an array of big-endian words, and a bit length
             */
            function core_sha1(x, len) {
              /* append padding */
              x[len >> 5] |= 0x80 << 24 - len % 32;
              x[(len + 64 >> 9 << 4) + 15] = len;
              var w = new Array(80);
              var a = 1732584193;
              var b = -271733879;
              var c = -1732584194;
              var d = 271733878;
              var e = -1009589776;
              var i, j, t, olda, oldb, oldc, oldd, olde;

              for (i = 0; i < x.length; i += 16) {
                olda = a;
                oldb = b;
                oldc = c;
                oldd = d;
                olde = e;

                for (j = 0; j < 80; j++) {
                  if (j < 16) {
                    w[j] = x[i + j];
                  } else {
                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                  }

                  t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
                  e = d;
                  d = c;
                  c = rol(b, 30);
                  b = a;
                  a = t;
                }

                a = safe_add(a, olda);
                b = safe_add(b, oldb);
                c = safe_add(c, oldc);
                d = safe_add(d, oldd);
                e = safe_add(e, olde);
              }

              return [a, b, c, d, e];
            }
            /*
             * Perform the appropriate triplet combination function for the current
             * iteration
             */


            function sha1_ft(t, b, c, d) {
              if (t < 20) {
                return b & c | ~b & d;
              }

              if (t < 40) {
                return b ^ c ^ d;
              }

              if (t < 60) {
                return b & c | b & d | c & d;
              }

              return b ^ c ^ d;
            }
            /*
             * Determine the appropriate additive constant for the current iteration
             */


            function sha1_kt(t) {
              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
            }
            /*
             * Calculate the HMAC-SHA1 of a key and some data
             */


            function core_hmac_sha1(key, data) {
              var bkey = str2binb(key);

              if (bkey.length > 16) {
                bkey = core_sha1(bkey, key.length * 8);
              }

              var ipad = new Array(16),
                  opad = new Array(16);

              for (var i = 0; i < 16; i++) {
                ipad[i] = bkey[i] ^ 0x36363636;
                opad[i] = bkey[i] ^ 0x5C5C5C5C;
              }

              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);
              return core_sha1(opad.concat(hash), 512 + 160);
            }
            /*
             * Add integers, wrapping at 2^32. This uses 16-bit operations internally
             * to work around bugs in some JS interpreters.
             */


            function safe_add(x, y) {
              var lsw = (x & 0xFFFF) + (y & 0xFFFF);
              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
              return msw << 16 | lsw & 0xFFFF;
            }
            /*
             * Bitwise rotate a 32-bit number to the left.
             */


            function rol(num, cnt) {
              return num << cnt | num >>> 32 - cnt;
            }
            /*
             * Convert an 8-bit or 16-bit string to an array of big-endian words
             * In 8-bit function, characters >255 have their hi-byte silently ignored.
             */


            function str2binb(str) {
              var bin = [];
              var mask = 255;

              for (var i = 0; i < str.length * 8; i += 8) {
                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;
              }

              return bin;
            }
            /*
             * Convert an array of big-endian words to a base-64 string
             */


            function binb2b64(binarray) {
              var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              var str = "";
              var triplet, j;

              for (var i = 0; i < binarray.length * 4; i += 3) {
                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;

                for (j = 0; j < 4; j++) {
                  if (i * 8 + j * 6 > binarray.length * 32) {
                    str += "=";
                  } else {
                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);
                  }
                }
              }

              return str;
            }
            /*
             * Convert an array of big-endian words to a string
             */


            function binb2str(bin) {
              var str = "";
              var mask = 255;

              for (var i = 0; i < bin.length * 32; i += 8) {
                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);
              }

              return str;
            }
            /*
             * These are the functions you'll usually want to call
             * They take string arguments and return either hex or base-64 encoded strings
             */


            const SHA1 = {
              b64_hmac_sha1: function (key, data) {
                return binb2b64(core_hmac_sha1(key, data));
              },
              b64_sha1: function (s) {
                return binb2b64(core_sha1(str2binb(s), s.length * 8));
              },
              binb2str: binb2str,
              core_hmac_sha1: core_hmac_sha1,
              str_hmac_sha1: function (key, data) {
                return binb2str(core_hmac_sha1(key, data));
              },
              str_sha1: function (s) {
                return binb2str(core_sha1(str2binb(s), s.length * 8));
              }
            };

            class SASLSHA1 extends SASLMechanism {
              /** PrivateConstructor: SASLSHA1
               *  SASL SCRAM SHA 1 authentication.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
                super(mechname, isClientFirst, priority);
              }

              test(connection) {
                // eslint-disable-line class-methods-use-this
                return connection.authcid !== null;
              }

              onChallenge(connection, challenge) {
                // eslint-disable-line class-methods-use-this
                let nonce, salt, iter, Hi, U, U_old, i, k;
                let responseText = "c=biws,";
                let authMessage = `${connection._sasl_data["client-first-message-bare"]},${challenge},`;
                const cnonce = connection._sasl_data.cnonce;
                const attribMatch = /([a-z]+)=([^,]+)(,|$)/;

                while (challenge.match(attribMatch)) {
                  const matches = challenge.match(attribMatch);
                  challenge = challenge.replace(matches[0], "");

                  switch (matches[1]) {
                    case "r":
                      nonce = matches[2];
                      break;

                    case "s":
                      salt = matches[2];
                      break;

                    case "i":
                      iter = matches[2];
                      break;
                  }
                }

                if (nonce.substr(0, cnonce.length) !== cnonce) {
                  connection._sasl_data = {};
                  return connection._sasl_failure_cb();
                }

                responseText += "r=" + nonce;
                authMessage += responseText;
                salt = atob(salt);
                salt += "\x00\x00\x00\x01";
                const pass = utils.utf16to8(connection.pass);
                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);

                for (i = 1; i < iter; i++) {
                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));

                  for (k = 0; k < 5; k++) {
                    Hi[k] ^= U[k];
                  }

                  U_old = U;
                }

                Hi = SHA1.binb2str(Hi);
                const clientKey = SHA1.core_hmac_sha1(Hi, "Client Key");
                const serverKey = SHA1.str_hmac_sha1(Hi, "Server Key");
                const clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);
                connection._sasl_data["server-signature"] = SHA1.b64_hmac_sha1(serverKey, authMessage);

                for (k = 0; k < 5; k++) {
                  clientKey[k] ^= clientSignature[k];
                }

                responseText += ",p=" + btoa(SHA1.binb2str(clientKey));
                return responseText;
              }

              clientChallenge(connection, test_cnonce) {
                // eslint-disable-line class-methods-use-this
                const cnonce = test_cnonce || MD5.hexdigest("" + Math.random() * 1234567890);
                let auth_str = "n=" + utils.utf16to8(connection.authcid);
                auth_str += ",r=";
                auth_str += cnonce;
                connection._sasl_data.cnonce = cnonce;
                connection._sasl_data["client-first-message-bare"] = auth_str;
                auth_str = "n,," + auth_str;
                return auth_str;
              }

            }

            class SASLXOAuth2 extends SASLMechanism {
              /** PrivateConstructor: SASLXOAuth2
               *  SASL X-OAuth2 authentication.
               */
              constructor() {
                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';
                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
                super(mechname, isClientFirst, priority);
              }

              test(connection) {
                // eslint-disable-line class-methods-use-this
                return connection.pass !== null;
              }

              onChallenge(connection) {
                // eslint-disable-line class-methods-use-this
                let auth_str = '\u0000';

                if (connection.authcid !== null) {
                  auth_str = auth_str + connection.authzid;
                }

                auth_str = auth_str + "\u0000";
                auth_str = auth_str + connection.pass;
                return utils.utf16to8(auth_str);
              }

            }

            /**
             * Implementation of atob() according to the HTML and Infra specs, except that
             * instead of throwing INVALID_CHARACTER_ERR we return null.
             */

            function atob$1(data) {
              // Web IDL requires DOMStrings to just be converted using ECMAScript
              // ToString, which in our case amounts to using a template literal.
              data = `${data}`; // "Remove all ASCII whitespace from data."

              data = data.replace(/[ \t\n\f\r]/g, ""); // "If data's length divides by 4 leaving no remainder, then: if data ends
              // with one or two U+003D (=) code points, then remove them from data."

              if (data.length % 4 === 0) {
                data = data.replace(/==?$/, "");
              } // "If data's length divides by 4 leaving a remainder of 1, then return
              // failure."
              //
              // "If data contains a code point that is not one of
              //
              // U+002B (+)
              // U+002F (/)
              // ASCII alphanumeric
              //
              // then return failure."


              if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {
                return null;
              } // "Let output be an empty byte sequence."


              let output = ""; // "Let buffer be an empty buffer that can have bits appended to it."
              //
              // We append bits via left-shift and or.  accumulatedBits is used to track
              // when we've gotten to 24 bits.

              let buffer = 0;
              let accumulatedBits = 0; // "Let position be a position variable for data, initially pointing at the
              // start of data."
              //
              // "While position does not point past the end of data:"

              for (let i = 0; i < data.length; i++) {
                // "Find the code point pointed to by position in the second column of
                // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in
                // the first cell of the same row.
                //
                // "Append to buffer the six bits corresponding to n, most significant bit
                // first."
                //
                // atobLookup() implements the table from RFC 4648.
                buffer <<= 6;
                buffer |= atobLookup(data[i]);
                accumulatedBits += 6; // "If buffer has accumulated 24 bits, interpret them as three 8-bit
                // big-endian numbers. Append three bytes with values equal to those
                // numbers to output, in the same order, and then empty buffer."

                if (accumulatedBits === 24) {
                  output += String.fromCharCode((buffer & 0xff0000) >> 16);
                  output += String.fromCharCode((buffer & 0xff00) >> 8);
                  output += String.fromCharCode(buffer & 0xff);
                  buffer = accumulatedBits = 0;
                } // "Advance position by 1."

              } // "If buffer is not empty, it contains either 12 or 18 bits. If it contains
              // 12 bits, then discard the last four and interpret the remaining eight as
              // an 8-bit big-endian number. If it contains 18 bits, then discard the last
              // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append
              // the one or two bytes with values equal to those one or two numbers to
              // output, in the same order."


              if (accumulatedBits === 12) {
                buffer >>= 4;
                output += String.fromCharCode(buffer);
              } else if (accumulatedBits === 18) {
                buffer >>= 2;
                output += String.fromCharCode((buffer & 0xff00) >> 8);
                output += String.fromCharCode(buffer & 0xff);
              } // "Return output."


              return output;
            }
            /**
             * A lookup table for atob(), which converts an ASCII character to the
             * corresponding six-bit number.
             */


            const keystr$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

            function atobLookup(chr) {
              const index = keystr$1.indexOf(chr); // Throw exception if character is not in the lookup string; should not be hit in tests

              return index < 0 ? undefined : index;
            }

            var atob_1 = atob$1;

            /**
             * btoa() as defined by the HTML and Infra specs, which mostly just references
             * RFC 4648.
             */

            function btoa$1(s) {
              let i; // String conversion as required by Web IDL.

              s = `${s}`; // "The btoa() method must throw an "InvalidCharacterError" DOMException if
              // data contains any character whose code point is greater than U+00FF."

              for (i = 0; i < s.length; i++) {
                if (s.charCodeAt(i) > 255) {
                  return null;
                }
              }

              let out = "";

              for (i = 0; i < s.length; i += 3) {
                const groupsOfSix = [undefined, undefined, undefined, undefined];
                groupsOfSix[0] = s.charCodeAt(i) >> 2;
                groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;

                if (s.length > i + 1) {
                  groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;
                  groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;
                }

                if (s.length > i + 2) {
                  groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;
                  groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;
                }

                for (let j = 0; j < groupsOfSix.length; j++) {
                  if (typeof groupsOfSix[j] === "undefined") {
                    out += "=";
                  } else {
                    out += btoaLookup(groupsOfSix[j]);
                  }
                }
              }

              return out;
            }
            /**
             * Lookup table for btoa(), which converts a six-bit number into the
             * corresponding ASCII character.
             */


            const keystr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

            function btoaLookup(index) {
              if (index >= 0 && index < 64) {
                return keystr[index];
              } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.


              return undefined;
            }

            var btoa_1 = btoa$1;

            var abab = {
              atob: atob_1,
              btoa: btoa_1
            };

            /*
                This program is distributed under the terms of the MIT license.
                Please see the LICENSE file for details.

                Copyright 2006-2018, OGG, LLC
            */
            /** Function: $build
             *  Create a Strophe.Builder.
             *  This is an alias for 'new Strophe.Builder(name, attrs)'.
             *
             *  Parameters:
             *    (String) name - The root element name.
             *    (Object) attrs - The attributes for the root element in object notation.
             *
             *  Returns:
             *    A new Strophe.Builder object.
             */

            function $build(name, attrs) {
              return new Strophe.Builder(name, attrs);
            }
            /** Function: $msg
             *  Create a Strophe.Builder with a <message/> element as the root.
             *
             *  Parameters:
             *    (Object) attrs - The <message/> element attributes in object notation.
             *
             *  Returns:
             *    A new Strophe.Builder object.
             */

            function $msg(attrs) {
              return new Strophe.Builder("message", attrs);
            }
            /** Function: $iq
             *  Create a Strophe.Builder with an <iq/> element as the root.
             *
             *  Parameters:
             *    (Object) attrs - The <iq/> element attributes in object notation.
             *
             *  Returns:
             *    A new Strophe.Builder object.
             */

            function $iq(attrs) {
              return new Strophe.Builder("iq", attrs);
            }
            /** Function: $pres
             *  Create a Strophe.Builder with a <presence/> element as the root.
             *
             *  Parameters:
             *    (Object) attrs - The <presence/> element attributes in object notation.
             *
             *  Returns:
             *    A new Strophe.Builder object.
             */

            function $pres(attrs) {
              return new Strophe.Builder("presence", attrs);
            }
            /** Class: Strophe
             *  An object container for all Strophe library functions.
             *
             *  This class is just a container for all the objects and constants
             *  used in the library.  It is not meant to be instantiated, but to
             *  provide a namespace for library objects, constants, and functions.
             */

            const Strophe = {
              /** Constant: VERSION */
              VERSION: "1.4.3",

              /** Constants: XMPP Namespace Constants
               *  Common namespace constants from the XMPP RFCs and XEPs.
               *
               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.
               *  NS.BOSH - BOSH namespace from XEP 206.
               *  NS.CLIENT - Main XMPP client namespace.
               *  NS.AUTH - Legacy authentication namespace.
               *  NS.ROSTER - Roster operations namespace.
               *  NS.PROFILE - Profile namespace.
               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.
               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.
               *  NS.MUC - Multi-User Chat namespace from XEP 45.
               *  NS.SASL - XMPP SASL namespace from RFC 3920.
               *  NS.STREAM - XMPP Streams namespace from RFC 3920.
               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.
               *  NS.SESSION - XMPP Session namespace from RFC 3920.
               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.
               *  NS.XHTML - XHTML body namespace from XEP 71.
               */
              NS: {
                HTTPBIND: "http://jabber.org/protocol/httpbind",
                BOSH: "urn:xmpp:xbosh",
                CLIENT: "jabber:client",
                AUTH: "jabber:iq:auth",
                ROSTER: "jabber:iq:roster",
                PROFILE: "jabber:iq:profile",
                DISCO_INFO: "http://jabber.org/protocol/disco#info",
                DISCO_ITEMS: "http://jabber.org/protocol/disco#items",
                MUC: "http://jabber.org/protocol/muc",
                SASL: "urn:ietf:params:xml:ns:xmpp-sasl",
                STREAM: "http://etherx.jabber.org/streams",
                FRAMING: "urn:ietf:params:xml:ns:xmpp-framing",
                BIND: "urn:ietf:params:xml:ns:xmpp-bind",
                SESSION: "urn:ietf:params:xml:ns:xmpp-session",
                VERSION: "jabber:iq:version",
                STANZAS: "urn:ietf:params:xml:ns:xmpp-stanzas",
                XHTML_IM: "http://jabber.org/protocol/xhtml-im",
                XHTML: "http://www.w3.org/1999/xhtml"
              },

              /** Constants: XHTML_IM Namespace
               *  contains allowed tags, tag attributes, and css properties.
               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.
               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended
               *  allowed tags and their attributes.
               */
              XHTML: {
                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],
                attributes: {
                  'a': ['href'],
                  'blockquote': ['style'],
                  'br': [],
                  'cite': ['style'],
                  'em': [],
                  'img': ['src', 'alt', 'style', 'height', 'width'],
                  'li': ['style'],
                  'ol': ['style'],
                  'p': ['style'],
                  'span': ['style'],
                  'strong': [],
                  'ul': ['style'],
                  'body': []
                },
                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],

                /** Function: XHTML.validTag
                 *
                 * Utility method to determine whether a tag is allowed
                 * in the XHTML_IM namespace.
                 *
                 * XHTML tag names are case sensitive and must be lower case.
                 */
                validTag(tag) {
                  for (let i = 0; i < Strophe.XHTML.tags.length; i++) {
                    if (tag === Strophe.XHTML.tags[i]) {
                      return true;
                    }
                  }

                  return false;
                },

                /** Function: XHTML.validAttribute
                 *
                 * Utility method to determine whether an attribute is allowed
                 * as recommended per XEP-0071
                 *
                 * XHTML attribute names are case sensitive and must be lower case.
                 */
                validAttribute(tag, attribute) {
                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {
                    for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
                      if (attribute === Strophe.XHTML.attributes[tag][i]) {
                        return true;
                      }
                    }
                  }

                  return false;
                },

                validCSS(style) {
                  for (let i = 0; i < Strophe.XHTML.css.length; i++) {
                    if (style === Strophe.XHTML.css[i]) {
                      return true;
                    }
                  }

                  return false;
                }

              },

              /** Constants: Connection Status Constants
               *  Connection status constants for use by the connection handler
               *  callback.
               *
               *  Status.ERROR - An error has occurred
               *  Status.CONNECTING - The connection is currently being made
               *  Status.CONNFAIL - The connection attempt failed
               *  Status.AUTHENTICATING - The connection is authenticating
               *  Status.AUTHFAIL - The authentication attempt failed
               *  Status.CONNECTED - The connection has succeeded
               *  Status.DISCONNECTED - The connection has been terminated
               *  Status.DISCONNECTING - The connection is currently being terminated
               *  Status.ATTACHED - The connection has been attached
               *  Status.REDIRECT - The connection has been redirected
               *  Status.CONNTIMEOUT - The connection has timed out
               */
              Status: {
                ERROR: 0,
                CONNECTING: 1,
                CONNFAIL: 2,
                AUTHENTICATING: 3,
                AUTHFAIL: 4,
                CONNECTED: 5,
                DISCONNECTED: 6,
                DISCONNECTING: 7,
                ATTACHED: 8,
                REDIRECT: 9,
                CONNTIMEOUT: 10,
                BINDREQUIRED: 11,
                ATTACHFAIL: 12
              },
              ErrorCondition: {
                BAD_FORMAT: "bad-format",
                CONFLICT: "conflict",
                MISSING_JID_NODE: "x-strophe-bad-non-anon-jid",
                NO_AUTH_MECH: "no-auth-mech",
                UNKNOWN_REASON: "unknown"
              },

              /** Constants: Log Level Constants
               *  Logging level indicators.
               *
               *  LogLevel.DEBUG - Debug output
               *  LogLevel.INFO - Informational output
               *  LogLevel.WARN - Warnings
               *  LogLevel.ERROR - Errors
               *  LogLevel.FATAL - Fatal errors
               */
              LogLevel: {
                DEBUG: 0,
                INFO: 1,
                WARN: 2,
                ERROR: 3,
                FATAL: 4
              },

              /** PrivateConstants: DOM Element Type Constants
               *  DOM element types.
               *
               *  ElementType.NORMAL - Normal element.
               *  ElementType.TEXT - Text data element.
               *  ElementType.FRAGMENT - XHTML fragment element.
               */
              ElementType: {
                NORMAL: 1,
                TEXT: 3,
                CDATA: 4,
                FRAGMENT: 11
              },

              /** PrivateConstants: Timeout Values
               *  Timeout values for error states.  These values are in seconds.
               *  These should not be changed unless you know exactly what you are
               *  doing.
               *
               *  TIMEOUT - Timeout multiplier. A waiting request will be considered
               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.
               *      This defaults to 1.1, and with default wait, 66 seconds.
               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where
               *      Strophe can detect early failure, it will consider the request
               *      failed if it doesn't return after
               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.
               *      This defaults to 0.1, and with default wait, 6 seconds.
               */
              TIMEOUT: 1.1,
              SECONDARY_TIMEOUT: 0.1,

              /** Function: addNamespace
               *  This function is used to extend the current namespaces in
               *  Strophe.NS.  It takes a key and a value with the key being the
               *  name of the new namespace, with its actual value.
               *  For example:
               *  Strophe.addNamespace('PUBSUB', "http://jabber.org/protocol/pubsub");
               *
               *  Parameters:
               *    (String) name - The name under which the namespace will be
               *      referenced under Strophe.NS
               *    (String) value - The actual namespace.
               */
              addNamespace(name, value) {
                Strophe.NS[name] = value;
              },

              /** Function: forEachChild
               *  Map a function over some or all child elements of a given element.
               *
               *  This is a small convenience function for mapping a function over
               *  some or all of the children of an element.  If elemName is null, all
               *  children will be passed to the function, otherwise only children
               *  whose tag names match elemName will be passed.
               *
               *  Parameters:
               *    (XMLElement) elem - The element to operate on.
               *    (String) elemName - The child element tag name filter.
               *    (Function) func - The function to apply to each child.  This
               *      function should take a single argument, a DOM element.
               */
              forEachChild(elem, elemName, func) {
                for (let i = 0; i < elem.childNodes.length; i++) {
                  const childNode = elem.childNodes[i];

                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {
                    func(childNode);
                  }
                }
              },

              /** Function: isTagEqual
               *  Compare an element's tag name with a string.
               *
               *  This function is case sensitive.
               *
               *  Parameters:
               *    (XMLElement) el - A DOM element.
               *    (String) name - The element name.
               *
               *  Returns:
               *    true if the element's tag name matches _el_, and false
               *    otherwise.
               */
              isTagEqual(el, name) {
                return el.tagName === name;
              },

              /** PrivateVariable: _xmlGenerator
               *  _Private_ variable that caches a DOM document to
               *  generate elements.
               */
              _xmlGenerator: null,

              /** Function: xmlGenerator
               *  Get the DOM document to generate elements.
               *
               *  Returns:
               *    The currently used DOM document.
               */
              xmlGenerator() {
                if (!Strophe._xmlGenerator) {
                  Strophe._xmlGenerator = getDummyXMLDOMDocument();
                }

                return Strophe._xmlGenerator;
              },

              /** Function: xmlElement
               *  Create an XML DOM element.
               *
               *  This function creates an XML DOM element correctly across all
               *  implementations. Note that these are not HTML DOM elements, which
               *  aren't appropriate for XMPP stanzas.
               *
               *  Parameters:
               *    (String) name - The name for the element.
               *    (Array|Object) attrs - An optional array or object containing
               *      key/value pairs to use as element attributes. The object should
               *      be in the format {'key': 'value'} or {key: 'value'}. The array
               *      should have the format [['key1', 'value1'], ['key2', 'value2']].
               *    (String) text - The text child data for the element.
               *
               *  Returns:
               *    A new XML DOM element.
               */
              xmlElement(name) {
                if (!name) {
                  return null;
                }

                const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or
                // there are more than two optional args

                for (let a = 1; a < arguments.length; a++) {
                  const arg = arguments[a];

                  if (!arg) {
                    continue;
                  }

                  if (typeof arg === "string" || typeof arg === "number") {
                    node.appendChild(Strophe.xmlTextNode(arg));
                  } else if (typeof arg === "object" && typeof arg.sort === "function") {
                    for (let i = 0; i < arg.length; i++) {
                      const attr = arg[i];

                      if (typeof attr === "object" && typeof attr.sort === "function" && attr[1] !== undefined && attr[1] !== null) {
                        node.setAttribute(attr[0], attr[1]);
                      }
                    }
                  } else if (typeof arg === "object") {
                    for (const k in arg) {
                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {
                        node.setAttribute(k, arg[k]);
                      }
                    }
                  }
                }

                return node;
              },

              /*  Function: xmlescape
               *  Excapes invalid xml characters.
               *
               *  Parameters:
               *     (String) text - text to escape.
               *
               *  Returns:
               *      Escaped text.
               */
              xmlescape(text) {
                text = text.replace(/\&/g, "&amp;");
                text = text.replace(/</g, "&lt;");
                text = text.replace(/>/g, "&gt;");
                text = text.replace(/'/g, "&apos;");
                text = text.replace(/"/g, "&quot;");
                return text;
              },

              /*  Function: xmlunescape
              *  Unexcapes invalid xml characters.
              *
              *  Parameters:
              *     (String) text - text to unescape.
              *
              *  Returns:
              *      Unescaped text.
              */
              xmlunescape(text) {
                text = text.replace(/\&amp;/g, "&");
                text = text.replace(/&lt;/g, "<");
                text = text.replace(/&gt;/g, ">");
                text = text.replace(/&apos;/g, "'");
                text = text.replace(/&quot;/g, "\"");
                return text;
              },

              /** Function: xmlTextNode
               *  Creates an XML DOM text node.
               *
               *  Provides a cross implementation version of document.createTextNode.
               *
               *  Parameters:
               *    (String) text - The content of the text node.
               *
               *  Returns:
               *    A new XML DOM text node.
               */
              xmlTextNode(text) {
                return Strophe.xmlGenerator().createTextNode(text);
              },

              /** Function: xmlHtmlNode
               *  Creates an XML DOM html node.
               *
               *  Parameters:
               *    (String) html - The content of the html node.
               *
               *  Returns:
               *    A new XML DOM text node.
               */
              xmlHtmlNode(html) {
                let node; //ensure text is escaped

                if (DOMParser) {
                  const parser = new DOMParser();
                  node = parser.parseFromString(html, "text/xml");
                } else {
                  node = new ActiveXObject("Microsoft.XMLDOM");
                  node.async = "false";
                  node.loadXML(html);
                }

                return node;
              },

              /** Function: getText
               *  Get the concatenation of all text children of an element.
               *
               *  Parameters:
               *    (XMLElement) elem - A DOM element.
               *
               *  Returns:
               *    A String with the concatenated text of all text element children.
               */
              getText(elem) {
                if (!elem) {
                  return null;
                }

                let str = "";

                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {
                  str += elem.nodeValue;
                }

                for (let i = 0; i < elem.childNodes.length; i++) {
                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {
                    str += elem.childNodes[i].nodeValue;
                  }
                }

                return Strophe.xmlescape(str);
              },

              /** Function: copyElement
               *  Copy an XML DOM element.
               *
               *  This function copies a DOM element and all its descendants and returns
               *  the new copy.
               *
               *  Parameters:
               *    (XMLElement) elem - A DOM element.
               *
               *  Returns:
               *    A new, copied DOM element tree.
               */
              copyElement(elem) {
                let el;

                if (elem.nodeType === Strophe.ElementType.NORMAL) {
                  el = Strophe.xmlElement(elem.tagName);

                  for (let i = 0; i < elem.attributes.length; i++) {
                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);
                  }

                  for (let i = 0; i < elem.childNodes.length; i++) {
                    el.appendChild(Strophe.copyElement(elem.childNodes[i]));
                  }
                } else if (elem.nodeType === Strophe.ElementType.TEXT) {
                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);
                }

                return el;
              },

              /** Function: createHtml
               *  Copy an HTML DOM element into an XML DOM.
               *
               *  This function copies a DOM element and all its descendants and returns
               *  the new copy.
               *
               *  Parameters:
               *    (HTMLElement) elem - A DOM element.
               *
               *  Returns:
               *    A new, copied DOM element tree.
               */
              createHtml(elem) {
                let el;

                if (elem.nodeType === Strophe.ElementType.NORMAL) {
                  const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.

                  if (Strophe.XHTML.validTag(tag)) {
                    try {
                      el = Strophe.xmlElement(tag);

                      for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
                        const attribute = Strophe.XHTML.attributes[tag][i];
                        let value = elem.getAttribute(attribute);

                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {
                          continue;
                        }

                        if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {
                          value = value.cssText; // we're dealing with IE, need to get CSS out
                        } // filter out invalid css styles


                        if (attribute === 'style') {
                          const css = [];
                          const cssAttrs = value.split(';');

                          for (let j = 0; j < cssAttrs.length; j++) {
                            const attr = cssAttrs[j].split(':');
                            const cssName = attr[0].replace(/^\s*/, "").replace(/\s*$/, "").toLowerCase();

                            if (Strophe.XHTML.validCSS(cssName)) {
                              const cssValue = attr[1].replace(/^\s*/, "").replace(/\s*$/, "");
                              css.push(cssName + ': ' + cssValue);
                            }
                          }

                          if (css.length > 0) {
                            value = css.join('; ');
                            el.setAttribute(attribute, value);
                          }
                        } else {
                          el.setAttribute(attribute, value);
                        }
                      }

                      for (let i = 0; i < elem.childNodes.length; i++) {
                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));
                      }
                    } catch (e) {
                      // invalid elements
                      el = Strophe.xmlTextNode('');
                    }
                  } else {
                    el = Strophe.xmlGenerator().createDocumentFragment();

                    for (let i = 0; i < elem.childNodes.length; i++) {
                      el.appendChild(Strophe.createHtml(elem.childNodes[i]));
                    }
                  }
                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {
                  el = Strophe.xmlGenerator().createDocumentFragment();

                  for (let i = 0; i < elem.childNodes.length; i++) {
                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));
                  }
                } else if (elem.nodeType === Strophe.ElementType.TEXT) {
                  el = Strophe.xmlTextNode(elem.nodeValue);
                }

                return el;
              },

              /** Function: escapeNode
               *  Escape the node part (also called local part) of a JID.
               *
               *  Parameters:
               *    (String) node - A node (or local part).
               *
               *  Returns:
               *    An escaped node (or local part).
               */
              escapeNode(node) {
                if (typeof node !== "string") {
                  return node;
                }

                return node.replace(/^\s+|\s+$/g, '').replace(/\\/g, "\\5c").replace(/ /g, "\\20").replace(/\"/g, "\\22").replace(/\&/g, "\\26").replace(/\'/g, "\\27").replace(/\//g, "\\2f").replace(/:/g, "\\3a").replace(/</g, "\\3c").replace(/>/g, "\\3e").replace(/@/g, "\\40");
              },

              /** Function: unescapeNode
               *  Unescape a node part (also called local part) of a JID.
               *
               *  Parameters:
               *    (String) node - A node (or local part).
               *
               *  Returns:
               *    An unescaped node (or local part).
               */
              unescapeNode(node) {
                if (typeof node !== "string") {
                  return node;
                }

                return node.replace(/\\20/g, " ").replace(/\\22/g, '"').replace(/\\26/g, "&").replace(/\\27/g, "'").replace(/\\2f/g, "/").replace(/\\3a/g, ":").replace(/\\3c/g, "<").replace(/\\3e/g, ">").replace(/\\40/g, "@").replace(/\\5c/g, "\\");
              },

              /** Function: getNodeFromJid
               *  Get the node portion of a JID String.
               *
               *  Parameters:
               *    (String) jid - A JID.
               *
               *  Returns:
               *    A String containing the node.
               */
              getNodeFromJid(jid) {
                if (jid.indexOf("@") < 0) {
                  return null;
                }

                return jid.split("@")[0];
              },

              /** Function: getDomainFromJid
               *  Get the domain portion of a JID String.
               *
               *  Parameters:
               *    (String) jid - A JID.
               *
               *  Returns:
               *    A String containing the domain.
               */
              getDomainFromJid(jid) {
                const bare = Strophe.getBareJidFromJid(jid);

                if (bare.indexOf("@") < 0) {
                  return bare;
                } else {
                  const parts = bare.split("@");
                  parts.splice(0, 1);
                  return parts.join('@');
                }
              },

              /** Function: getResourceFromJid
               *  Get the resource portion of a JID String.
               *
               *  Parameters:
               *    (String) jid - A JID.
               *
               *  Returns:
               *    A String containing the resource.
               */
              getResourceFromJid(jid) {
                if (!jid) {
                  return null;
                }

                const s = jid.split("/");

                if (s.length < 2) {
                  return null;
                }

                s.splice(0, 1);
                return s.join('/');
              },

              /** Function: getBareJidFromJid
               *  Get the bare JID from a JID String.
               *
               *  Parameters:
               *    (String) jid - A JID.
               *
               *  Returns:
               *    A String containing the bare JID.
               */
              getBareJidFromJid(jid) {
                return jid ? jid.split("/")[0] : null;
              },

              /** PrivateFunction: _handleError
               *  _Private_ function that properly logs an error to the console
               */
              _handleError(e) {
                if (typeof e.stack !== "undefined") {
                  Strophe.fatal(e.stack);
                }

                if (e.sourceURL) {
                  Strophe.fatal("error: " + this.handler + " " + e.sourceURL + ":" + e.line + " - " + e.name + ": " + e.message);
                } else if (e.fileName) {
                  Strophe.fatal("error: " + this.handler + " " + e.fileName + ":" + e.lineNumber + " - " + e.name + ": " + e.message);
                } else {
                  Strophe.fatal("error: " + e.message);
                }
              },

              /** Function: log
               *  User overrideable logging function.
               *
               *  This function is called whenever the Strophe library calls any
               *  of the logging functions.  The default implementation of this
               *  function logs only fatal errors.  If client code wishes to handle the logging
               *  messages, it should override this with
               *  > Strophe.log = function (level, msg) {
               *  >   (user code here)
               *  > };
               *
               *  Please note that data sent and received over the wire is logged
               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().
               *
               *  The different levels and their meanings are
               *
               *    DEBUG - Messages useful for debugging purposes.
               *    INFO - Informational messages.  This is mostly information like
               *      'disconnect was called' or 'SASL auth succeeded'.
               *    WARN - Warnings about potential problems.  This is mostly used
               *      to report transient connection errors like request timeouts.
               *    ERROR - Some error occurred.
               *    FATAL - A non-recoverable fatal error occurred.
               *
               *  Parameters:
               *    (Integer) level - The log level of the log message.  This will
               *      be one of the values in Strophe.LogLevel.
               *    (String) msg - The log message.
               */
              log(level, msg) {
                if (level === this.LogLevel.FATAL) {
                  var _console;

                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);
                }
              },

              /** Function: debug
               *  Log a message at the Strophe.LogLevel.DEBUG level.
               *
               *  Parameters:
               *    (String) msg - The log message.
               */
              debug(msg) {
                this.log(this.LogLevel.DEBUG, msg);
              },

              /** Function: info
               *  Log a message at the Strophe.LogLevel.INFO level.
               *
               *  Parameters:
               *    (String) msg - The log message.
               */
              info(msg) {
                this.log(this.LogLevel.INFO, msg);
              },

              /** Function: warn
               *  Log a message at the Strophe.LogLevel.WARN level.
               *
               *  Parameters:
               *    (String) msg - The log message.
               */
              warn(msg) {
                this.log(this.LogLevel.WARN, msg);
              },

              /** Function: error
               *  Log a message at the Strophe.LogLevel.ERROR level.
               *
               *  Parameters:
               *    (String) msg - The log message.
               */
              error(msg) {
                this.log(this.LogLevel.ERROR, msg);
              },

              /** Function: fatal
               *  Log a message at the Strophe.LogLevel.FATAL level.
               *
               *  Parameters:
               *    (String) msg - The log message.
               */
              fatal(msg) {
                this.log(this.LogLevel.FATAL, msg);
              },

              /** Function: serialize
               *  Render a DOM element and all descendants to a String.
               *
               *  Parameters:
               *    (XMLElement) elem - A DOM element.
               *
               *  Returns:
               *    The serialized element tree as a String.
               */
              serialize(elem) {
                if (!elem) {
                  return null;
                }

                if (typeof elem.tree === "function") {
                  elem = elem.tree();
                }

                const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);
                names.sort();
                let result = names.reduce((a, n) => `${a} ${n}="${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}"`, `<${elem.nodeName}`);

                if (elem.childNodes.length > 0) {
                  result += ">";

                  for (let i = 0; i < elem.childNodes.length; i++) {
                    const child = elem.childNodes[i];

                    switch (child.nodeType) {
                      case Strophe.ElementType.NORMAL:
                        // normal element, so recurse
                        result += Strophe.serialize(child);
                        break;

                      case Strophe.ElementType.TEXT:
                        // text element to escape values
                        result += Strophe.xmlescape(child.nodeValue);
                        break;

                      case Strophe.ElementType.CDATA:
                        // cdata section so don't escape values
                        result += "<![CDATA[" + child.nodeValue + "]]>";
                    }
                  }

                  result += "</" + elem.nodeName + ">";
                } else {
                  result += "/>";
                }

                return result;
              },

              /** PrivateVariable: _requestId
               *  _Private_ variable that keeps track of the request ids for
               *  connections.
               */
              _requestId: 0,

              /** PrivateVariable: Strophe.connectionPlugins
               *  _Private_ variable Used to store plugin names that need
               *  initialization on Strophe.Connection construction.
               */
              _connectionPlugins: {},

              /** Function: addConnectionPlugin
               *  Extends the Strophe.Connection object with the given plugin.
               *
               *  Parameters:
               *    (String) name - The name of the extension.
               *    (Object) ptype - The plugin's prototype.
               */
              addConnectionPlugin(name, ptype) {
                Strophe._connectionPlugins[name] = ptype;
              }

            };
            /** Class: Strophe.Builder
             *  XML DOM builder.
             *
             *  This object provides an interface similar to JQuery but for building
             *  DOM elements easily and rapidly.  All the functions except for toString()
             *  and tree() return the object, so calls can be chained.  Here's an
             *  example using the $iq() builder helper.
             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})
             *  >     .c('query', {xmlns: 'strophe:example'})
             *  >     .c('example')
             *  >     .toString()
             *
             *  The above generates this XML fragment
             *  > <iq to='you' from='me' type='get' id='1'>
             *  >   <query xmlns='strophe:example'>
             *  >     <example/>
             *  >   </query>
             *  > </iq>
             *  The corresponding DOM manipulations to get a similar fragment would be
             *  a lot more tedious and probably involve several helper variables.
             *
             *  Since adding children makes new operations operate on the child, up()
             *  is provided to traverse up the tree.  To add two children, do
             *  > builder.c('child1', ...).up().c('child2', ...)
             *  The next operation on the Builder will be relative to the second child.
             */

            /** Constructor: Strophe.Builder
             *  Create a Strophe.Builder object.
             *
             *  The attributes should be passed in object notation.  For example
             *  > let b = new Builder('message', {to: 'you', from: 'me'});
             *  or
             *  > let b = new Builder('messsage', {'xml:lang': 'en'});
             *
             *  Parameters:
             *    (String) name - The name of the root element.
             *    (Object) attrs - The attributes for the root element in object notation.
             *
             *  Returns:
             *    A new Strophe.Builder.
             */

            Strophe.Builder = class Builder {
              constructor(name, attrs) {
                // Set correct namespace for jabber:client elements
                if (name === "presence" || name === "message" || name === "iq") {
                  if (attrs && !attrs.xmlns) {
                    attrs.xmlns = Strophe.NS.CLIENT;
                  } else if (!attrs) {
                    attrs = {
                      xmlns: Strophe.NS.CLIENT
                    };
                  }
                } // Holds the tree being built.


                this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.

                this.node = this.nodeTree;
              }
              /** Function: tree
               *  Return the DOM tree.
               *
               *  This function returns the current DOM tree as an element object.  This
               *  is suitable for passing to functions like Strophe.Connection.send().
               *
               *  Returns:
               *    The DOM tree as a element object.
               */


              tree() {
                return this.nodeTree;
              }
              /** Function: toString
               *  Serialize the DOM tree to a String.
               *
               *  This function returns a string serialization of the current DOM
               *  tree.  It is often used internally to pass data to a
               *  Strophe.Request object.
               *
               *  Returns:
               *    The serialized DOM tree in a String.
               */


              toString() {
                return Strophe.serialize(this.nodeTree);
              }
              /** Function: up
               *  Make the current parent element the new current element.
               *
               *  This function is often used after c() to traverse back up the tree.
               *  For example, to add two children to the same element
               *  > builder.c('child1', {}).up().c('child2', {});
               *
               *  Returns:
               *    The Stophe.Builder object.
               */


              up() {
                this.node = this.node.parentNode;
                return this;
              }
              /** Function: root
               *  Make the root element the new current element.
               *
               *  When at a deeply nested element in the tree, this function can be used
               *  to jump back to the root of the tree, instead of having to repeatedly
               *  call up().
               *
               *  Returns:
               *    The Stophe.Builder object.
               */


              root() {
                this.node = this.nodeTree;
                return this;
              }
              /** Function: attrs
               *  Add or modify attributes of the current element.
               *
               *  The attributes should be passed in object notation.  This function
               *  does not move the current element pointer.
               *
               *  Parameters:
               *    (Object) moreattrs - The attributes to add/modify in object notation.
               *
               *  Returns:
               *    The Strophe.Builder object.
               */


              attrs(moreattrs) {
                for (const k in moreattrs) {
                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {
                    if (moreattrs[k] === undefined) {
                      this.node.removeAttribute(k);
                    } else {
                      this.node.setAttribute(k, moreattrs[k]);
                    }
                  }
                }

                return this;
              }
              /** Function: c
               *  Add a child to the current element and make it the new current
               *  element.
               *
               *  This function moves the current element pointer to the child,
               *  unless text is provided.  If you need to add another child, it
               *  is necessary to use up() to go back to the parent in the tree.
               *
               *  Parameters:
               *    (String) name - The name of the child.
               *    (Object) attrs - The attributes of the child in object notation.
               *    (String) text - The text to add to the child.
               *
               *  Returns:
               *    The Strophe.Builder object.
               */


              c(name, attrs, text) {
                const child = Strophe.xmlElement(name, attrs, text);
                this.node.appendChild(child);

                if (typeof text !== "string" && typeof text !== "number") {
                  this.node = child;
                }

                return this;
              }
              /** Function: cnode
               *  Add a child to the current element and make it the new current
               *  element.
               *
               *  This function is the same as c() except that instead of using a
               *  name and an attributes object to create the child it uses an
               *  existing DOM element object.
               *
               *  Parameters:
               *    (XMLElement) elem - A DOM element.
               *
               *  Returns:
               *    The Strophe.Builder object.
               */


              cnode(elem) {
                let impNode;
                const xmlGen = Strophe.xmlGenerator();

                try {
                  impNode = xmlGen.importNode !== undefined;
                } catch (e) {
                  impNode = false;
                }

                const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);
                this.node.appendChild(newElem);
                this.node = newElem;
                return this;
              }
              /** Function: t
               *  Add a child text element.
               *
               *  This *does not* make the child the new current element since there
               *  are no children of text elements.
               *
               *  Parameters:
               *    (String) text - The text data to append to the current element.
               *
               *  Returns:
               *    The Strophe.Builder object.
               */


              t(text) {
                const child = Strophe.xmlTextNode(text);
                this.node.appendChild(child);
                return this;
              }
              /** Function: h
               *  Replace current element contents with the HTML passed in.
               *
               *  This *does not* make the child the new current element
               *
               *  Parameters:
               *    (String) html - The html to insert as contents of current element.
               *
               *  Returns:
               *    The Strophe.Builder object.
               */


              h(html) {
                const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags

                fragment.innerHTML = html; // copy cleaned html into an xml dom

                const xhtml = Strophe.createHtml(fragment);

                while (xhtml.childNodes.length > 0) {
                  this.node.appendChild(xhtml.childNodes[0]);
                }

                return this;
              }

            };
            /** PrivateClass: Strophe.Handler
             *  _Private_ helper class for managing stanza handlers.
             *
             *  A Strophe.Handler encapsulates a user provided callback function to be
             *  executed when matching stanzas are received by the connection.
             *  Handlers can be either one-off or persistant depending on their
             *  return value. Returning true will cause a Handler to remain active, and
             *  returning false will remove the Handler.
             *
             *  Users will not use Strophe.Handler objects directly, but instead they
             *  will use Strophe.Connection.addHandler() and
             *  Strophe.Connection.deleteHandler().
             */

            /** PrivateConstructor: Strophe.Handler
             *  Create and initialize a new Strophe.Handler.
             *
             *  Parameters:
             *    (Function) handler - A function to be executed when the handler is run.
             *    (String) ns - The namespace to match.
             *    (String) name - The element name to match.
             *    (String) type - The element type to match.
             *    (String) id - The element id attribute to match.
             *    (String) from - The element from attribute to match.
             *    (Object) options - Handler options
             *
             *  Returns:
             *    A new Strophe.Handler object.
             */

            Strophe.Handler = function (handler, ns, name, type, id, from, options) {
              this.handler = handler;
              this.ns = ns;
              this.name = name;
              this.type = type;
              this.id = id;
              this.options = options || {
                'matchBareFromJid': false,
                'ignoreNamespaceFragment': false
              }; // BBB: Maintain backward compatibility with old `matchBare` option

              if (this.options.matchBare) {
                Strophe.warn('The "matchBare" option is deprecated, use "matchBareFromJid" instead.');
                this.options.matchBareFromJid = this.options.matchBare;
                delete this.options.matchBare;
              }

              if (this.options.matchBareFromJid) {
                this.from = from ? Strophe.getBareJidFromJid(from) : null;
              } else {
                this.from = from;
              } // whether the handler is a user handler or a system handler


              this.user = true;
            };

            Strophe.Handler.prototype = {
              /** PrivateFunction: getNamespace
               *  Returns the XML namespace attribute on an element.
               *  If `ignoreNamespaceFragment` was passed in for this handler, then the
               *  URL fragment will be stripped.
               *
               *  Parameters:
               *    (XMLElement) elem - The XML element with the namespace.
               *
               *  Returns:
               *    The namespace, with optionally the fragment stripped.
               */
              getNamespace(elem) {
                let elNamespace = elem.getAttribute("xmlns");

                if (elNamespace && this.options.ignoreNamespaceFragment) {
                  elNamespace = elNamespace.split('#')[0];
                }

                return elNamespace;
              },

              /** PrivateFunction: namespaceMatch
               *  Tests if a stanza matches the namespace set for this Strophe.Handler.
               *
               *  Parameters:
               *    (XMLElement) elem - The XML element to test.
               *
               *  Returns:
               *    true if the stanza matches and false otherwise.
               */
              namespaceMatch(elem) {
                let nsMatch = false;

                if (!this.ns) {
                  return true;
                } else {
                  Strophe.forEachChild(elem, null, elem => {
                    if (this.getNamespace(elem) === this.ns) {
                      nsMatch = true;
                    }
                  });
                  return nsMatch || this.getNamespace(elem) === this.ns;
                }
              },

              /** PrivateFunction: isMatch
               *  Tests if a stanza matches the Strophe.Handler.
               *
               *  Parameters:
               *    (XMLElement) elem - The XML element to test.
               *
               *  Returns:
               *    true if the stanza matches and false otherwise.
               */
              isMatch(elem) {
                let from = elem.getAttribute('from');

                if (this.options.matchBareFromJid) {
                  from = Strophe.getBareJidFromJid(from);
                }

                const elem_type = elem.getAttribute("type");

                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute("id") === this.id) && (!this.from || from === this.from)) {
                  return true;
                }

                return false;
              },

              /** PrivateFunction: run
               *  Run the callback on a matching stanza.
               *
               *  Parameters:
               *    (XMLElement) elem - The DOM element that triggered the
               *      Strophe.Handler.
               *
               *  Returns:
               *    A boolean indicating if the handler should remain active.
               */
              run(elem) {
                let result = null;

                try {
                  result = this.handler(elem);
                } catch (e) {
                  Strophe._handleError(e);

                  throw e;
                }

                return result;
              },

              /** PrivateFunction: toString
               *  Get a String representation of the Strophe.Handler object.
               *
               *  Returns:
               *    A String.
               */
              toString() {
                return "{Handler: " + this.handler + "(" + this.name + "," + this.id + "," + this.ns + ")}";
              }

            };
            /** PrivateClass: Strophe.TimedHandler
             *  _Private_ helper class for managing timed handlers.
             *
             *  A Strophe.TimedHandler encapsulates a user provided callback that
             *  should be called after a certain period of time or at regular
             *  intervals.  The return value of the callback determines whether the
             *  Strophe.TimedHandler will continue to fire.
             *
             *  Users will not use Strophe.TimedHandler objects directly, but instead
             *  they will use Strophe.Connection.addTimedHandler() and
             *  Strophe.Connection.deleteTimedHandler().
             */

            Strophe.TimedHandler = class TimedHandler {
              /** PrivateConstructor: Strophe.TimedHandler
               *  Create and initialize a new Strophe.TimedHandler object.
               *
               *  Parameters:
               *    (Integer) period - The number of milliseconds to wait before the
               *      handler is called.
               *    (Function) handler - The callback to run when the handler fires.  This
               *      function should take no arguments.
               *
               *  Returns:
               *    A new Strophe.TimedHandler object.
               */
              constructor(period, handler) {
                this.period = period;
                this.handler = handler;
                this.lastCalled = new Date().getTime();
                this.user = true;
              }
              /** PrivateFunction: run
               *  Run the callback for the Strophe.TimedHandler.
               *
               *  Returns:
               *    true if the Strophe.TimedHandler should be called again, and false
               *      otherwise.
               */


              run() {
                this.lastCalled = new Date().getTime();
                return this.handler();
              }
              /** PrivateFunction: reset
               *  Reset the last called time for the Strophe.TimedHandler.
               */


              reset() {
                this.lastCalled = new Date().getTime();
              }
              /** PrivateFunction: toString
               *  Get a string representation of the Strophe.TimedHandler object.
               *
               *  Returns:
               *    The string representation.
               */


              toString() {
                return "{TimedHandler: " + this.handler + "(" + this.period + ")}";
              }

            };
            /** Class: Strophe.Connection
             *  XMPP Connection manager.
             *
             *  This class is the main part of Strophe.  It manages a BOSH or websocket
             *  connection to an XMPP server and dispatches events to the user callbacks
             *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1
             *  and legacy authentication.
             *
             *  After creating a Strophe.Connection object, the user will typically
             *  call connect() with a user supplied callback to handle connection level
             *  events like authentication failure, disconnection, or connection
             *  complete.
             *
             *  The user will also have several event handlers defined by using
             *  addHandler() and addTimedHandler().  These will allow the user code to
             *  respond to interesting stanzas or do something periodically with the
             *  connection. These handlers will be active once authentication is
             *  finished.
             *
             *  To send data to the connection, use send().
             */

            /** Constructor: Strophe.Connection
             *  Create and initialize a Strophe.Connection object.
             *
             *  The transport-protocol for this connection will be chosen automatically
             *  based on the given service parameter. URLs starting with "ws://" or
             *  "wss://" will use WebSockets, URLs starting with "http://", "https://"
             *  or without a protocol will use BOSH.
             *
             *  To make Strophe connect to the current host you can leave out the protocol
             *  and host part and just pass the path, e.g.
             *
             *  > let conn = new Strophe.Connection("/http-bind/");
             *
             *  Options common to both Websocket and BOSH:
             *  ------------------------------------------
             *
             *  cookies:
             *
             *  The *cookies* option allows you to pass in cookies to be added to the
             *  document. These cookies will then be included in the BOSH XMLHttpRequest
             *  or in the websocket connection.
             *
             *  The passed in value must be a map of cookie names and string values.
             *
             *  > { "myCookie": {
             *  >     "value": "1234",
             *  >     "domain": ".example.org",
             *  >     "path": "/",
             *  >     "expires": expirationDate
             *  >     }
             *  > }
             *
             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).
             *  Those cookies need to be set under those domains, for example they can be
             *  set server-side by making a XHR call to that domain to ask it to set any
             *  necessary cookies.
             *
             *  mechanisms:
             *
             *  The *mechanisms* option allows you to specify the SASL mechanisms that this
             *  instance of Strophe.Connection (and therefore your XMPP client) will
             *  support.
             *
             *  The value must be an array of objects with Strophe.SASLMechanism
             *  prototypes.
             *
             *  If nothing is specified, then the following mechanisms (and their
             *  priorities) are registered:
             *
             *      SCRAM-SHA-1 - 60
             *      PLAIN       - 50
             *      OAUTHBEARER - 40
             *      X-OAUTH2    - 30
             *      ANONYMOUS   - 20
             *      EXTERNAL    - 10
             *
             *  explicitResourceBinding:
             *
             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client
             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP
             *  server has advertised the "urn:ietf:params:xml:ns:xmpp-bind" feature.
             *
             *  Making this step explicit allows client authors to first finish other
             *  stream related tasks, such as setting up an XEP-0198 Stream Management
             *  session, before binding the JID resource for this session.
             *
             *  WebSocket options:
             *  ------------------
             *
             *  protocol:
             *
             *  If you want to connect to the current host with a WebSocket connection you
             *  can tell Strophe to use WebSockets through a "protocol" attribute in the
             *  optional options parameter. Valid values are "ws" for WebSocket and "wss"
             *  for Secure WebSocket.
             *  So to connect to "wss://CURRENT_HOSTNAME/xmpp-websocket" you would call
             *
             *  > let conn = new Strophe.Connection("/xmpp-websocket/", {protocol: "wss"});
             *
             *  Note that relative URLs _NOT_ starting with a "/" will also include the path
             *  of the current site.
             *
             *  Also because downgrading security is not permitted by browsers, when using
             *  relative URLs both BOSH and WebSocket connections will use their secure
             *  variants if the current connection to the site is also secure (https).
             *
             *  worker:
             *
             *  Set this option to URL from where the shared worker script should be loaded.
             *
             *  To run the websocket connection inside a shared worker.
             *  This allows you to share a single websocket-based connection between
             *  multiple Strophe.Connection instances, for example one per browser tab.
             *
             *  The script to use is the one in `src/shared-connection-worker.js`.
             *
             *  BOSH options:
             *  -------------
             *
             *  By adding "sync" to the options, you can control if requests will
             *  be made synchronously or not. The default behaviour is asynchronous.
             *  If you want to make requests synchronous, make "sync" evaluate to true.
             *  > let conn = new Strophe.Connection("/http-bind/", {sync: true});
             *
             *  You can also toggle this on an already established connection.
             *  > conn.options.sync = true;
             *
             *  The *customHeaders* option can be used to provide custom HTTP headers to be
             *  included in the XMLHttpRequests made.
             *
             *  The *keepalive* option can be used to instruct Strophe to maintain the
             *  current BOSH session across interruptions such as webpage reloads.
             *
             *  It will do this by caching the sessions tokens in sessionStorage, and when
             *  "restore" is called it will check whether there are cached tokens with
             *  which it can resume an existing session.
             *
             *  The *withCredentials* option should receive a Boolean value and is used to
             *  indicate wether cookies should be included in ajax requests (by default
             *  they're not).
             *  Set this value to true if you are connecting to a BOSH service
             *  and for some reason need to send cookies to it.
             *  In order for this to work cross-domain, the server must also enable
             *  credentials by setting the Access-Control-Allow-Credentials response header
             *  to "true". For most usecases however this setting should be false (which
             *  is the default).
             *  Additionally, when using Access-Control-Allow-Credentials, the
             *  Access-Control-Allow-Origin header can't be set to the wildcard "*", but
             *  instead must be restricted to actual domains.
             *
             *  The *contentType* option can be set to change the default Content-Type
             *  of "text/xml; charset=utf-8", which can be useful to reduce the amount of
             *  CORS preflight requests that are sent to the server.
             *
             *  Parameters:
             *    (String) service - The BOSH or WebSocket service URL.
             *    (Object) options - A hash of configuration options
             *
             *  Returns:
             *    A new Strophe.Connection object.
             */

            Strophe.Connection = class Connection {
              constructor(service, options) {
                // The service URL
                this.service = service; // Configuration options

                this.options = options || {};
                this.setProtocol();
                /* The connected JID. */

                this.jid = "";
                /* the JIDs domain */

                this.domain = null;
                /* stream:features */

                this.features = null; // SASL

                this._sasl_data = {};
                this.do_bind = false;
                this.do_session = false;
                this.mechanisms = {}; // handler lists

                this.timedHandlers = [];
                this.handlers = [];
                this.removeTimeds = [];
                this.removeHandlers = [];
                this.addTimeds = [];
                this.addHandlers = [];
                this.protocolErrorHandlers = {
                  'HTTP': {},
                  'websocket': {}
                };
                this._idleTimeout = null;
                this._disconnectTimeout = null;
                this.authenticated = false;
                this.connected = false;
                this.disconnecting = false;
                this.do_authentication = true;
                this.paused = false;
                this.restored = false;
                this._data = [];
                this._uniqueId = 0;
                this._sasl_success_handler = null;
                this._sasl_failure_handler = null;
                this._sasl_challenge_handler = null; // Max retries before disconnecting

                this.maxRetries = 5; // Call onIdle callback every 1/10th of a second

                this._idleTimeout = setTimeout(() => this._onIdle(), 100);
                utils.addCookies(this.options.cookies);
                this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins

                for (const k in Strophe._connectionPlugins) {
                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {
                    const F = function () {};

                    F.prototype = Strophe._connectionPlugins[k];
                    this[k] = new F();
                    this[k].init(this);
                  }
                }
              }
              /** Function: setProtocol
               *  Select protocal based on this.options or this.service
               */


              setProtocol() {
                const proto = this.options.protocol || "";

                if (this.options.worker) {
                  this._proto = new Strophe.WorkerWebsocket(this);
                } else if (this.service.indexOf("ws:") === 0 || this.service.indexOf("wss:") === 0 || proto.indexOf("ws") === 0) {
                  this._proto = new Strophe.Websocket(this);
                } else {
                  this._proto = new Strophe.Bosh(this);
                }
              }
              /** Function: reset
               *  Reset the connection.
               *
               *  This function should be called after a connection is disconnected
               *  before that connection is reused.
               */


              reset() {
                this._proto._reset(); // SASL


                this.do_session = false;
                this.do_bind = false; // handler lists

                this.timedHandlers = [];
                this.handlers = [];
                this.removeTimeds = [];
                this.removeHandlers = [];
                this.addTimeds = [];
                this.addHandlers = [];
                this.authenticated = false;
                this.connected = false;
                this.disconnecting = false;
                this.restored = false;
                this._data = [];
                this._requests = [];
                this._uniqueId = 0;
              }
              /** Function: pause
               *  Pause the request manager.
               *
               *  This will prevent Strophe from sending any more requests to the
               *  server.  This is very useful for temporarily pausing
               *  BOSH-Connections while a lot of send() calls are happening quickly.
               *  This causes Strophe to send the data in a single request, saving
               *  many request trips.
               */


              pause() {
                this.paused = true;
              }
              /** Function: resume
               *  Resume the request manager.
               *
               *  This resumes after pause() has been called.
               */


              resume() {
                this.paused = false;
              }
              /** Function: getUniqueId
               *  Generate a unique ID for use in <iq/> elements.
               *
               *  All <iq/> stanzas are required to have unique id attributes.  This
               *  function makes creating these easy.  Each connection instance has
               *  a counter which starts from zero, and the value of this counter
               *  plus a colon followed by the suffix becomes the unique id. If no
               *  suffix is supplied, the counter is used as the unique id.
               *
               *  Suffixes are used to make debugging easier when reading the stream
               *  data, and their use is recommended.  The counter resets to 0 for
               *  every new connection for the same reason.  For connections to the
               *  same server that authenticate the same way, all the ids should be
               *  the same, which makes it easy to see changes.  This is useful for
               *  automated testing as well.
               *
               *  Parameters:
               *    (String) suffix - A optional suffix to append to the id.
               *
               *  Returns:
               *    A unique string to be used for the id attribute.
               */


              getUniqueId(suffix) {
                // eslint-disable-line class-methods-use-this
                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                  const r = Math.random() * 16 | 0,
                        v = c === 'x' ? r : r & 0x3 | 0x8;
                  return v.toString(16);
                });

                if (typeof suffix === "string" || typeof suffix === "number") {
                  return uuid + ":" + suffix;
                } else {
                  return uuid + "";
                }
              }
              /** Function: addProtocolErrorHandler
               *  Register a handler function for when a protocol (websocker or HTTP)
               *  error occurs.
               *
               *  NOTE: Currently only HTTP errors for BOSH requests are handled.
               *  Patches that handle websocket errors would be very welcome.
               *
               *  Parameters:
               *    (String) protocol - 'HTTP' or 'websocket'
               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)
               *    (Function) callback - Function that will fire on Http error
               *
               *  Example:
               *  function onError(err_code){
               *    //do stuff
               *  }
               *
               *  let conn = Strophe.connect('http://example.com/http-bind');
               *  conn.addProtocolErrorHandler('HTTP', 500, onError);
               *  // Triggers HTTP 500 error and onError handler will be called
               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);
               */


              addProtocolErrorHandler(protocol, status_code, callback) {
                this.protocolErrorHandlers[protocol][status_code] = callback;
              }
              /** Function: connect
               *  Starts the connection process.
               *
               *  As the connection process proceeds, the user supplied callback will
               *  be triggered multiple times with status updates.  The callback
               *  should take two arguments - the status code and the error condition.
               *
               *  The status code will be one of the values in the Strophe.Status
               *  constants.  The error condition will be one of the conditions
               *  defined in RFC 3920 or the condition 'strophe-parsererror'.
               *
               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant
               *  for BOSH connections. Please see XEP 124 for a more detailed explanation
               *  of the optional parameters.
               *
               *  Parameters:
               *    (String) jid - The user's JID.  This may be a bare JID,
               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or
               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will
               *      process the provided password value as an access token).
               *    (String) pass - The user's password.
               *    (Function) callback - The connect callback function.
               *    (Integer) wait - The optional HTTPBIND wait value.  This is the
               *      time the server will wait before returning an empty result for
               *      a request.  The default setting of 60 seconds is recommended.
               *    (Integer) hold - The optional HTTPBIND hold value.  This is the
               *      number of connections the server will hold at one time.  This
               *      should almost always be set to 1 (the default).
               *    (String) route - The optional route value.
               *    (String) authcid - The optional alternative authentication identity
               *      (username) if intending to impersonate another user.
               *      When using the SASL-EXTERNAL authentication mechanism, for example
               *      with client certificates, then the authcid value is used to
               *      determine whether an authorization JID (authzid) should be sent to
               *      the server. The authzid should NOT be sent to the server if the
               *      authzid and authcid are the same. So to prevent it from being sent
               *      (for example when the JID is already contained in the client
               *      certificate), set authcid to that same JID. See XEP-178 for more
               *      details.
               *     (Integer) disconnection_timeout - The optional disconnection timeout
               *      in milliseconds before _doDisconnect will be called.
               */


              connect(jid, pass, callback, wait, hold, route, authcid) {
                let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;
                this.jid = jid;
                /** Variable: authzid
                 *  Authorization identity.
                 */

                this.authzid = Strophe.getBareJidFromJid(this.jid);
                /** Variable: authcid
                 *  Authentication identity (User name).
                 */

                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);
                /** Variable: pass
                 *  Authentication identity (User password).
                 */

                this.pass = pass;
                this.connect_callback = callback;
                this.disconnecting = false;
                this.connected = false;
                this.authenticated = false;
                this.restored = false;
                this.disconnection_timeout = disconnection_timeout; // parse jid for domain

                this.domain = Strophe.getDomainFromJid(this.jid);

                this._changeConnectStatus(Strophe.Status.CONNECTING, null);

                this._proto._connect(wait, hold, route);
              }
              /** Function: attach
               *  Attach to an already created and authenticated BOSH session.
               *
               *  This function is provided to allow Strophe to attach to BOSH
               *  sessions which have been created externally, perhaps by a Web
               *  application.  This is often used to support auto-login type features
               *  without putting user credentials into the page.
               *
               *  Parameters:
               *    (String) jid - The full JID that is bound by the session.
               *    (String) sid - The SID of the BOSH session.
               *    (String) rid - The current RID of the BOSH session.  This RID
               *      will be used by the next request.
               *    (Function) callback The connect callback function.
               *    (Integer) wait - The optional HTTPBIND wait value.  This is the
               *      time the server will wait before returning an empty result for
               *      a request.  The default setting of 60 seconds is recommended.
               *      Other settings will require tweaks to the Strophe.TIMEOUT value.
               *    (Integer) hold - The optional HTTPBIND hold value.  This is the
               *      number of connections the server will hold at one time.  This
               *      should almost always be set to 1 (the default).
               *    (Integer) wind - The optional HTTBIND window value.  This is the
               *      allowed range of request ids that are valid.  The default is 5.
               */


              attach(jid, sid, rid, callback, wait, hold, wind) {
                if (this._proto._attach) {
                  return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);
                } else {
                  const error = new Error('The "attach" method is not available for your connection protocol');
                  error.name = 'StropheSessionError';
                  throw error;
                }
              }
              /** Function: restore
               *  Attempt to restore a cached BOSH session.
               *
               *  This function is only useful in conjunction with providing the
               *  "keepalive":true option when instantiating a new Strophe.Connection.
               *
               *  When "keepalive" is set to true, Strophe will cache the BOSH tokens
               *  RID (Request ID) and SID (Session ID) and then when this function is
               *  called, it will attempt to restore the session from those cached
               *  tokens.
               *
               *  This function must therefore be called instead of connect or attach.
               *
               *  For an example on how to use it, please see examples/restore.js
               *
               *  Parameters:
               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.
               *    (Function) callback - The connect callback function.
               *    (Integer) wait - The optional HTTPBIND wait value.  This is the
               *      time the server will wait before returning an empty result for
               *      a request.  The default setting of 60 seconds is recommended.
               *    (Integer) hold - The optional HTTPBIND hold value.  This is the
               *      number of connections the server will hold at one time.  This
               *      should almost always be set to 1 (the default).
               *    (Integer) wind - The optional HTTBIND window value.  This is the
               *      allowed range of request ids that are valid.  The default is 5.
               */


              restore(jid, callback, wait, hold, wind) {
                if (this._sessionCachingSupported()) {
                  this._proto._restore(jid, callback, wait, hold, wind);
                } else {
                  const error = new Error('The "restore" method can only be used with a BOSH connection.');
                  error.name = 'StropheSessionError';
                  throw error;
                }
              }
              /** PrivateFunction: _sessionCachingSupported
               * Checks whether sessionStorage and JSON are supported and whether we're
               * using BOSH.
               */


              _sessionCachingSupported() {
                if (this._proto instanceof Strophe.Bosh) {
                  if (!JSON) {
                    return false;
                  }

                  try {
                    sessionStorage.setItem('_strophe_', '_strophe_');
                    sessionStorage.removeItem('_strophe_');
                  } catch (e) {
                    return false;
                  }

                  return true;
                }

                return false;
              }
              /** Function: xmlInput
               *  User overrideable function that receives XML data coming into the
               *  connection.
               *
               *  The default function does nothing.  User code can override this with
               *  > Strophe.Connection.xmlInput = function (elem) {
               *  >   (user code)
               *  > };
               *
               *  Due to limitations of current Browsers' XML-Parsers the opening and closing
               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
               *
               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
               *  <Strophe.Bosh.strip> if you want to strip this tag.
               *
               *  Parameters:
               *    (XMLElement) elem - The XML data received by the connection.
               */


              xmlInput(elem) {
                // eslint-disable-line
                return;
              }
              /** Function: xmlOutput
               *  User overrideable function that receives XML data sent to the
               *  connection.
               *
               *  The default function does nothing.  User code can override this with
               *  > Strophe.Connection.xmlOutput = function (elem) {
               *  >   (user code)
               *  > };
               *
               *  Due to limitations of current Browsers' XML-Parsers the opening and closing
               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
               *
               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
               *  <Strophe.Bosh.strip> if you want to strip this tag.
               *
               *  Parameters:
               *    (XMLElement) elem - The XMLdata sent by the connection.
               */


              xmlOutput(elem) {
                // eslint-disable-line
                return;
              }
              /** Function: rawInput
               *  User overrideable function that receives raw data coming into the
               *  connection.
               *
               *  The default function does nothing.  User code can override this with
               *  > Strophe.Connection.rawInput = function (data) {
               *  >   (user code)
               *  > };
               *
               *  Parameters:
               *    (String) data - The data received by the connection.
               */


              rawInput(data) {
                // eslint-disable-line
                return;
              }
              /** Function: rawOutput
               *  User overrideable function that receives raw data sent to the
               *  connection.
               *
               *  The default function does nothing.  User code can override this with
               *  > Strophe.Connection.rawOutput = function (data) {
               *  >   (user code)
               *  > };
               *
               *  Parameters:
               *    (String) data - The data sent by the connection.
               */


              rawOutput(data) {
                // eslint-disable-line
                return;
              }
              /** Function: nextValidRid
               *  User overrideable function that receives the new valid rid.
               *
               *  The default function does nothing. User code can override this with
               *  > Strophe.Connection.nextValidRid = function (rid) {
               *  >    (user code)
               *  > };
               *
               *  Parameters:
               *    (Number) rid - The next valid rid
               */


              nextValidRid(rid) {
                // eslint-disable-line
                return;
              }
              /** Function: send
               *  Send a stanza.
               *
               *  This function is called to push data onto the send queue to
               *  go out over the wire.  Whenever a request is sent to the BOSH
               *  server, all pending data is sent and the queue is flushed.
               *
               *  Parameters:
               *    (XMLElement |
               *     [XMLElement] |
               *     Strophe.Builder) elem - The stanza to send.
               */


              send(elem) {
                if (elem === null) {
                  return;
                }

                if (typeof elem.sort === "function") {
                  for (let i = 0; i < elem.length; i++) {
                    this._queueData(elem[i]);
                  }
                } else if (typeof elem.tree === "function") {
                  this._queueData(elem.tree());
                } else {
                  this._queueData(elem);
                }

                this._proto._send();
              }
              /** Function: flush
               *  Immediately send any pending outgoing data.
               *
               *  Normally send() queues outgoing data until the next idle period
               *  (100ms), which optimizes network use in the common cases when
               *  several send()s are called in succession. flush() can be used to
               *  immediately send all pending data.
               */


              flush() {
                // cancel the pending idle period and run the idle function
                // immediately
                clearTimeout(this._idleTimeout);

                this._onIdle();
              }
              /** Function: sendPresence
               *  Helper function to send presence stanzas. The main benefit is for
               *  sending presence stanzas for which you expect a responding presence
               *  stanza with the same id (for example when leaving a chat room).
               *
               *  Parameters:
               *    (XMLElement) elem - The stanza to send.
               *    (Function) callback - The callback function for a successful request.
               *    (Function) errback - The callback function for a failed or timed
               *      out request.  On timeout, the stanza will be null.
               *    (Integer) timeout - The time specified in milliseconds for a
               *      timeout to occur.
               *
               *  Returns:
               *    The id used to send the presence.
               */


              sendPresence(elem, callback, errback, timeout) {
                let timeoutHandler = null;

                if (typeof elem.tree === "function") {
                  elem = elem.tree();
                }

                let id = elem.getAttribute('id');

                if (!id) {
                  // inject id if not found
                  id = this.getUniqueId("sendPresence");
                  elem.setAttribute("id", id);
                }

                if (typeof callback === "function" || typeof errback === "function") {
                  const handler = this.addHandler(stanza => {
                    // remove timeout handler if there is one
                    if (timeoutHandler) {
                      this.deleteTimedHandler(timeoutHandler);
                    }

                    if (stanza.getAttribute('type') === 'error') {
                      if (errback) {
                        errback(stanza);
                      }
                    } else if (callback) {
                      callback(stanza);
                    }
                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.

                  if (timeout) {
                    timeoutHandler = this.addTimedHandler(timeout, () => {
                      // get rid of normal handler
                      this.deleteHandler(handler); // call errback on timeout with null stanza

                      if (errback) {
                        errback(null);
                      }

                      return false;
                    });
                  }
                }

                this.send(elem);
                return id;
              }
              /** Function: sendIQ
               *  Helper function to send IQ stanzas.
               *
               *  Parameters:
               *    (XMLElement) elem - The stanza to send.
               *    (Function) callback - The callback function for a successful request.
               *    (Function) errback - The callback function for a failed or timed
               *      out request.  On timeout, the stanza will be null.
               *    (Integer) timeout - The time specified in milliseconds for a
               *      timeout to occur.
               *
               *  Returns:
               *    The id used to send the IQ.
              */


              sendIQ(elem, callback, errback, timeout) {
                let timeoutHandler = null;

                if (typeof elem.tree === "function") {
                  elem = elem.tree();
                }

                let id = elem.getAttribute('id');

                if (!id) {
                  // inject id if not found
                  id = this.getUniqueId("sendIQ");
                  elem.setAttribute("id", id);
                }

                if (typeof callback === "function" || typeof errback === "function") {
                  const handler = this.addHandler(stanza => {
                    // remove timeout handler if there is one
                    if (timeoutHandler) {
                      this.deleteTimedHandler(timeoutHandler);
                    }

                    const iqtype = stanza.getAttribute('type');

                    if (iqtype === 'result') {
                      if (callback) {
                        callback(stanza);
                      }
                    } else if (iqtype === 'error') {
                      if (errback) {
                        errback(stanza);
                      }
                    } else {
                      const error = new Error(`Got bad IQ type of ${iqtype}`);
                      error.name = "StropheError";
                      throw error;
                    }
                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.

                  if (timeout) {
                    timeoutHandler = this.addTimedHandler(timeout, () => {
                      // get rid of normal handler
                      this.deleteHandler(handler); // call errback on timeout with null stanza

                      if (errback) {
                        errback(null);
                      }

                      return false;
                    });
                  }
                }

                this.send(elem);
                return id;
              }
              /** PrivateFunction: _queueData
               *  Queue outgoing data for later sending.  Also ensures that the data
               *  is a DOMElement.
               */


              _queueData(element) {
                if (element === null || !element.tagName || !element.childNodes) {
                  const error = new Error("Cannot queue non-DOMElement.");
                  error.name = "StropheError";
                  throw error;
                }

                this._data.push(element);
              }
              /** PrivateFunction: _sendRestart
               *  Send an xmpp:restart stanza.
               */


              _sendRestart() {
                this._data.push("restart");

                this._proto._sendRestart();

                this._idleTimeout = setTimeout(() => this._onIdle(), 100);
              }
              /** Function: addTimedHandler
               *  Add a timed handler to the connection.
               *
               *  This function adds a timed handler.  The provided handler will
               *  be called every period milliseconds until it returns false,
               *  the connection is terminated, or the handler is removed.  Handlers
               *  that wish to continue being invoked should return true.
               *
               *  Because of method binding it is necessary to save the result of
               *  this function if you wish to remove a handler with
               *  deleteTimedHandler().
               *
               *  Note that user handlers are not active until authentication is
               *  successful.
               *
               *  Parameters:
               *    (Integer) period - The period of the handler.
               *    (Function) handler - The callback function.
               *
               *  Returns:
               *    A reference to the handler that can be used to remove it.
               */


              addTimedHandler(period, handler) {
                const thand = new Strophe.TimedHandler(period, handler);
                this.addTimeds.push(thand);
                return thand;
              }
              /** Function: deleteTimedHandler
               *  Delete a timed handler for a connection.
               *
               *  This function removes a timed handler from the connection.  The
               *  handRef parameter is *not* the function passed to addTimedHandler(),
               *  but is the reference returned from addTimedHandler().
               *
               *  Parameters:
               *    (Strophe.TimedHandler) handRef - The handler reference.
               */


              deleteTimedHandler(handRef) {
                // this must be done in the Idle loop so that we don't change
                // the handlers during iteration
                this.removeTimeds.push(handRef);
              }
              /** Function: addHandler
               *  Add a stanza handler for the connection.
               *
               *  This function adds a stanza handler to the connection.  The
               *  handler callback will be called for any stanza that matches
               *  the parameters.  Note that if multiple parameters are supplied,
               *  they must all match for the handler to be invoked.
               *
               *  The handler will receive the stanza that triggered it as its argument.
               *  *The handler should return true if it is to be invoked again;
               *  returning false will remove the handler after it returns.*
               *
               *  As a convenience, the ns parameters applies to the top level element
               *  and also any of its immediate children.  This is primarily to make
               *  matching /iq/query elements easy.
               *
               *  Options
               *  ~~~~~~~
               *  With the options argument, you can specify boolean flags that affect how
               *  matches are being done.
               *
               *  Currently two flags exist:
               *
               *  - matchBareFromJid:
               *      When set to true, the from parameter and the
               *      from attribute on the stanza will be matched as bare JIDs instead
               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the
               *      value of options. The default value for matchBareFromJid is false.
               *
               *  - ignoreNamespaceFragment:
               *      When set to true, a fragment specified on the stanza's namespace
               *      URL will be ignored when it's matched with the one configured for
               *      the handler.
               *
               *      This means that if you register like this:
               *      >   connection.addHandler(
               *      >       handler,
               *      >       'http://jabber.org/protocol/muc',
               *      >       null, null, null, null,
               *      >       {'ignoreNamespaceFragment': true}
               *      >   );
               *
               *      Then a stanza with XML namespace of
               *      'http://jabber.org/protocol/muc#user' will also be matched. If
               *      'ignoreNamespaceFragment' is false, then only stanzas with
               *      'http://jabber.org/protocol/muc' will be matched.
               *
               *  Deleting the handler
               *  ~~~~~~~~~~~~~~~~~~~~
               *  The return value should be saved if you wish to remove the handler
               *  with deleteHandler().
               *
               *  Parameters:
               *    (Function) handler - The user callback.
               *    (String) ns - The namespace to match.
               *    (String) name - The stanza name to match.
               *    (String|Array) type - The stanza type (or types if an array) to match.
               *    (String) id - The stanza id attribute to match.
               *    (String) from - The stanza from attribute to match.
               *    (String) options - The handler options
               *
               *  Returns:
               *    A reference to the handler that can be used to remove it.
               */


              addHandler(handler, ns, name, type, id, from, options) {
                const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);
                this.addHandlers.push(hand);
                return hand;
              }
              /** Function: deleteHandler
               *  Delete a stanza handler for a connection.
               *
               *  This function removes a stanza handler from the connection.  The
               *  handRef parameter is *not* the function passed to addHandler(),
               *  but is the reference returned from addHandler().
               *
               *  Parameters:
               *    (Strophe.Handler) handRef - The handler reference.
               */


              deleteHandler(handRef) {
                // this must be done in the Idle loop so that we don't change
                // the handlers during iteration
                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,
                // prevent it from getting added

                const i = this.addHandlers.indexOf(handRef);

                if (i >= 0) {
                  this.addHandlers.splice(i, 1);
                }
              }
              /** Function: registerSASLMechanisms
               *
               * Register the SASL mechanisms which will be supported by this instance of
               * Strophe.Connection (i.e. which this XMPP client will support).
               *
               *  Parameters:
               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes
               *
               */


              registerSASLMechanisms(mechanisms) {
                this.mechanisms = {};
                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];
                mechanisms.forEach(m => this.registerSASLMechanism(m));
              }
              /** Function: registerSASLMechanism
               *
               * Register a single SASL mechanism, to be supported by this client.
               *
               *  Parameters:
               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype
               *
               */


              registerSASLMechanism(Mechanism) {
                const mechanism = new Mechanism();
                this.mechanisms[mechanism.mechname] = mechanism;
              }
              /** Function: disconnect
               *  Start the graceful disconnection process.
               *
               *  This function starts the disconnection process.  This process starts
               *  by sending unavailable presence and sending BOSH body of type
               *  terminate.  A timeout handler makes sure that disconnection happens
               *  even if the BOSH server does not respond.
               *  If the Connection object isn't connected, at least tries to abort all pending requests
               *  so the connection object won't generate successful requests (which were already opened).
               *
               *  The user supplied connection callback will be notified of the
               *  progress as this process happens.
               *
               *  Parameters:
               *    (String) reason - The reason the disconnect is occuring.
               */


              disconnect(reason) {
                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);

                if (reason) {
                  Strophe.warn("Disconnect was called because: " + reason);
                } else {
                  Strophe.info("Disconnect was called");
                }

                if (this.connected) {
                  let pres = false;
                  this.disconnecting = true;

                  if (this.authenticated) {
                    pres = $pres({
                      'xmlns': Strophe.NS.CLIENT,
                      'type': 'unavailable'
                    });
                  } // setup timeout handler


                  this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));

                  this._proto._disconnect(pres);
                } else {
                  Strophe.warn("Disconnect was called before Strophe connected to the server");

                  this._proto._abortAllRequests();

                  this._doDisconnect();
                }
              }
              /** PrivateFunction: _changeConnectStatus
               *  _Private_ helper function that makes sure plugins and the user's
               *  callback are notified of connection status changes.
               *
               *  Parameters:
               *    (Integer) status - the new connection status, one of the values
               *      in Strophe.Status
               *    (String) condition - the error condition or null
               *    (XMLElement) elem - The triggering stanza.
               */


              _changeConnectStatus(status, condition, elem) {
                // notify all plugins listening for status changes
                for (const k in Strophe._connectionPlugins) {
                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {
                    const plugin = this[k];

                    if (plugin.statusChanged) {
                      try {
                        plugin.statusChanged(status, condition);
                      } catch (err) {
                        Strophe.error(`${k} plugin caused an exception changing status: ${err}`);
                      }
                    }
                  }
                } // notify the user's callback


                if (this.connect_callback) {
                  try {
                    this.connect_callback(status, condition, elem);
                  } catch (e) {
                    Strophe._handleError(e);

                    Strophe.error(`User connection callback caused an exception: ${e}`);
                  }
                }
              }
              /** PrivateFunction: _doDisconnect
               *  _Private_ function to disconnect.
               *
               *  This is the last piece of the disconnection logic.  This resets the
               *  connection and alerts the user's connection callback.
               */


              _doDisconnect(condition) {
                if (typeof this._idleTimeout === "number") {
                  clearTimeout(this._idleTimeout);
                } // Cancel Disconnect Timeout


                if (this._disconnectTimeout !== null) {
                  this.deleteTimedHandler(this._disconnectTimeout);
                  this._disconnectTimeout = null;
                }

                Strophe.debug("_doDisconnect was called");

                this._proto._doDisconnect();

                this.authenticated = false;
                this.disconnecting = false;
                this.restored = false; // delete handlers

                this.handlers = [];
                this.timedHandlers = [];
                this.removeTimeds = [];
                this.removeHandlers = [];
                this.addTimeds = [];
                this.addHandlers = []; // tell the parent we disconnected

                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);

                this.connected = false;
              }
              /** PrivateFunction: _dataRecv
               *  _Private_ handler to processes incoming data from the the connection.
               *
               *  Except for _connect_cb handling the initial connection request,
               *  this function handles the incoming data for all requests.  This
               *  function also fires stanza handlers that match each incoming
               *  stanza.
               *
               *  Parameters:
               *    (Strophe.Request) req - The request that has data ready.
               *    (string) req - The stanza a raw string (optiona).
               */


              _dataRecv(req, raw) {
                const elem = this._proto._reqToData(req);

                if (elem === null) {
                  return;
                }

                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {
                    this.xmlInput(elem.childNodes[0]);
                  } else {
                    this.xmlInput(elem);
                  }
                }

                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
                  if (raw) {
                    this.rawInput(raw);
                  } else {
                    this.rawInput(Strophe.serialize(elem));
                  }
                } // remove handlers scheduled for deletion


                while (this.removeHandlers.length > 0) {
                  const hand = this.removeHandlers.pop();
                  const i = this.handlers.indexOf(hand);

                  if (i >= 0) {
                    this.handlers.splice(i, 1);
                  }
                } // add handlers scheduled for addition


                while (this.addHandlers.length > 0) {
                  this.handlers.push(this.addHandlers.pop());
                } // handle graceful disconnect


                if (this.disconnecting && this._proto._emptyQueue()) {
                  this._doDisconnect();

                  return;
                }

                const type = elem.getAttribute("type");

                if (type !== null && type === "terminate") {
                  // Don't process stanzas that come in after disconnect
                  if (this.disconnecting) {
                    return;
                  } // an error occurred


                  let cond = elem.getAttribute("condition");
                  const conflict = elem.getElementsByTagName("conflict");

                  if (cond !== null) {
                    if (cond === "remote-stream-error" && conflict.length > 0) {
                      cond = "conflict";
                    }

                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);
                  } else {
                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);
                  }

                  this._doDisconnect(cond);

                  return;
                } // send each incoming stanza through the handler chain


                Strophe.forEachChild(elem, null, child => {
                  // process handlers
                  const newList = this.handlers;
                  this.handlers = [];

                  for (let i = 0; i < newList.length; i++) {
                    const hand = newList[i]; // encapsulate 'handler.run' not to lose the whole handler list if
                    // one of the handlers throws an exception

                    try {
                      if (hand.isMatch(child) && (this.authenticated || !hand.user)) {
                        if (hand.run(child)) {
                          this.handlers.push(hand);
                        }
                      } else {
                        this.handlers.push(hand);
                      }
                    } catch (e) {
                      // if the handler throws an exception, we consider it as false
                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);
                    }
                  }
                });
              }
              /** PrivateFunction: _connect_cb
               *  _Private_ handler for initial connection request.
               *
               *  This handler is used to process the initial connection request
               *  response from the BOSH server. It is used to set up authentication
               *  handlers and start the authentication process.
               *
               *  SASL authentication will be attempted if available, otherwise
               *  the code will fall back to legacy authentication.
               *
               *  Parameters:
               *    (Strophe.Request) req - The current request.
               *    (Function) _callback - low level (xmpp) connect callback function.
               *      Useful for plugins with their own xmpp connect callback (when they
               *      want to do something special).
               */


              _connect_cb(req, _callback, raw) {
                Strophe.debug("_connect_cb was called");
                this.connected = true;
                let bodyWrap;

                try {
                  bodyWrap = this._proto._reqToData(req);
                } catch (e) {
                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {
                    throw e;
                  }

                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);

                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);
                }

                if (!bodyWrap) {
                  return;
                }

                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {
                    this.xmlInput(bodyWrap.childNodes[0]);
                  } else {
                    this.xmlInput(bodyWrap);
                  }
                }

                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
                  if (raw) {
                    this.rawInput(raw);
                  } else {
                    this.rawInput(Strophe.serialize(bodyWrap));
                  }
                }

                const conncheck = this._proto._connect_cb(bodyWrap);

                if (conncheck === Strophe.Status.CONNFAIL) {
                  return;
                } // Check for the stream:features tag


                let hasFeatures;

                if (bodyWrap.getElementsByTagNameNS) {
                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, "features").length > 0;
                } else {
                  hasFeatures = bodyWrap.getElementsByTagName("stream:features").length > 0 || bodyWrap.getElementsByTagName("features").length > 0;
                }

                if (!hasFeatures) {
                  this._proto._no_auth_received(_callback);

                  return;
                }

                const matched = Array.from(bodyWrap.getElementsByTagName("mechanism")).map(m => this.mechanisms[m.textContent]).filter(m => m);

                if (matched.length === 0) {
                  if (bodyWrap.getElementsByTagName("auth").length === 0) {
                    // There are no matching SASL mechanisms and also no legacy
                    // auth available.
                    this._proto._no_auth_received(_callback);

                    return;
                  }
                }

                if (this.do_authentication !== false) {
                  this.authenticate(matched);
                }
              }
              /** Function: sortMechanismsByPriority
               *
               *  Sorts an array of objects with prototype SASLMechanism according to
               *  their priorities.
               *
               *  Parameters:
               *    (Array) mechanisms - Array of SASL mechanisms.
               *
               */


              sortMechanismsByPriority(mechanisms) {
                // eslint-disable-line class-methods-use-this
                // Sorting mechanisms according to priority.
                for (let i = 0; i < mechanisms.length - 1; ++i) {
                  let higher = i;

                  for (let j = i + 1; j < mechanisms.length; ++j) {
                    if (mechanisms[j].priority > mechanisms[higher].priority) {
                      higher = j;
                    }
                  }

                  if (higher !== i) {
                    const swap = mechanisms[i];
                    mechanisms[i] = mechanisms[higher];
                    mechanisms[higher] = swap;
                  }
                }

                return mechanisms;
              }
              /** Function: authenticate
               * Set up authentication
               *
               *  Continues the initial connection request by setting up authentication
               *  handlers and starting the authentication process.
               *
               *  SASL authentication will be attempted if available, otherwise
               *  the code will fall back to legacy authentication.
               *
               *  Parameters:
               *    (Array) matched - Array of SASL mechanisms supported.
               *
               */


              authenticate(matched) {
                if (!this._attemptSASLAuth(matched)) {
                  this._attemptLegacyAuth();
                }
              }
              /** PrivateFunction: _attemptSASLAuth
               *
               *  Iterate through an array of SASL mechanisms and attempt authentication
               *  with the highest priority (enabled) mechanism.
               *
               *  Parameters:
               *    (Array) mechanisms - Array of SASL mechanisms.
               *
               *  Returns:
               *    (Boolean) mechanism_found - true or false, depending on whether a
               *          valid SASL mechanism was found with which authentication could be
               *          started.
               */


              _attemptSASLAuth(mechanisms) {
                mechanisms = this.sortMechanismsByPriority(mechanisms || []);
                let mechanism_found = false;

                for (let i = 0; i < mechanisms.length; ++i) {
                  if (!mechanisms[i].test(this)) {
                    continue;
                  }

                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, "success", null, null);
                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, "failure", null, null);
                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, "challenge", null, null);
                  this._sasl_mechanism = mechanisms[i];

                  this._sasl_mechanism.onStart(this);

                  const request_auth_exchange = $build("auth", {
                    'xmlns': Strophe.NS.SASL,
                    'mechanism': this._sasl_mechanism.mechname
                  });

                  if (this._sasl_mechanism.isClientFirst) {
                    const response = this._sasl_mechanism.clientChallenge(this);

                    request_auth_exchange.t(abab.btoa(response));
                  }

                  this.send(request_auth_exchange.tree());
                  mechanism_found = true;
                  break;
                }

                return mechanism_found;
              }
              /** PrivateFunction: _sasl_challenge_cb
               *  _Private_ handler for the SASL challenge
               *
               */


              _sasl_challenge_cb(elem) {
                const challenge = abab.atob(Strophe.getText(elem));

                const response = this._sasl_mechanism.onChallenge(this, challenge);

                const stanza = $build('response', {
                  'xmlns': Strophe.NS.SASL
                });

                if (response !== "") {
                  stanza.t(abab.btoa(response));
                }

                this.send(stanza.tree());
                return true;
              }
              /** PrivateFunction: _attemptLegacyAuth
               *
               *  Attempt legacy (i.e. non-SASL) authentication.
               */


              _attemptLegacyAuth() {
                if (Strophe.getNodeFromJid(this.jid) === null) {
                  // we don't have a node, which is required for non-anonymous
                  // client connections
                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);

                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);
                } else {
                  // Fall back to legacy authentication
                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);

                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, "_auth_1");

                  this.send($iq({
                    'type': "get",
                    'to': this.domain,
                    'id': "_auth_1"
                  }).c("query", {
                    xmlns: Strophe.NS.AUTH
                  }).c("username", {}).t(Strophe.getNodeFromJid(this.jid)).tree());
                }
              }
              /** PrivateFunction: _onLegacyAuthIQResult
               *  _Private_ handler for legacy authentication.
               *
               *  This handler is called in response to the initial <iq type='get'/>
               *  for legacy authentication.  It builds an authentication <iq/> and
               *  sends it, creating a handler (calling back to _auth2_cb()) to
               *  handle the result
               *
               *  Parameters:
               *    (XMLElement) elem - The stanza that triggered the callback.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _onLegacyAuthIQResult(elem) {
                // eslint-disable-line no-unused-vars
                // build plaintext auth iq
                const iq = $iq({
                  type: "set",
                  id: "_auth_2"
                }).c('query', {
                  xmlns: Strophe.NS.AUTH
                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);

                if (!Strophe.getResourceFromJid(this.jid)) {
                  // since the user has not supplied a resource, we pick
                  // a default one here.  unlike other auth methods, the server
                  // cannot do this for us.
                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';
                }

                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));

                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, "_auth_2");

                this.send(iq.tree());
                return false;
              }
              /** PrivateFunction: _sasl_success_cb
               *  _Private_ handler for succesful SASL authentication.
               *
               *  Parameters:
               *    (XMLElement) elem - The matching stanza.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _sasl_success_cb(elem) {
                if (this._sasl_data["server-signature"]) {
                  let serverSignature;
                  const success = abab.atob(Strophe.getText(elem));
                  const attribMatch = /([a-z]+)=([^,]+)(,|$)/;
                  const matches = success.match(attribMatch);

                  if (matches[1] === "v") {
                    serverSignature = matches[2];
                  }

                  if (serverSignature !== this._sasl_data["server-signature"]) {
                    // remove old handlers
                    this.deleteHandler(this._sasl_failure_handler);
                    this._sasl_failure_handler = null;

                    if (this._sasl_challenge_handler) {
                      this.deleteHandler(this._sasl_challenge_handler);
                      this._sasl_challenge_handler = null;
                    }

                    this._sasl_data = {};
                    return this._sasl_failure_cb(null);
                  }
                }

                Strophe.info("SASL authentication succeeded.");

                if (this._sasl_mechanism) {
                  this._sasl_mechanism.onSuccess();
                } // remove old handlers


                this.deleteHandler(this._sasl_failure_handler);
                this._sasl_failure_handler = null;

                if (this._sasl_challenge_handler) {
                  this.deleteHandler(this._sasl_challenge_handler);
                  this._sasl_challenge_handler = null;
                }

                const streamfeature_handlers = [];

                const wrapper = (handlers, elem) => {
                  while (handlers.length) {
                    this.deleteHandler(handlers.pop());
                  }

                  this._onStreamFeaturesAfterSASL(elem);

                  return false;
                };

                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, "stream:features", null, null));
                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, "features", null, null)); // we must send an xmpp:restart now

                this._sendRestart();

                return false;
              }
              /** PrivateFunction: _onStreamFeaturesAfterSASL
               *  Parameters:
               *    (XMLElement) elem - The matching stanza.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _onStreamFeaturesAfterSASL(elem) {
                // save stream:features for future usage
                this.features = elem;

                for (let i = 0; i < elem.childNodes.length; i++) {
                  const child = elem.childNodes[i];

                  if (child.nodeName === 'bind') {
                    this.do_bind = true;
                  }

                  if (child.nodeName === 'session') {
                    this.do_session = true;
                  }
                }

                if (!this.do_bind) {
                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);

                  return false;
                } else if (!this.options.explicitResourceBinding) {
                  this.bind();
                } else {
                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);
                }

                return false;
              }
              /** Function: bind
               *
               *  Sends an IQ to the XMPP server to bind a JID resource for this session.
               *
               *  https://tools.ietf.org/html/rfc6120#section-7.5
               *
               *  If `explicitResourceBinding` was set to a truthy value in the options
               *  passed to the Strophe.Connection constructor, then this function needs
               *  to be called explicitly by the client author.
               *
               *  Otherwise it'll be called automatically as soon as the XMPP server
               *  advertises the "urn:ietf:params:xml:ns:xmpp-bind" stream feature.
               */


              bind() {
                if (!this.do_bind) {
                  Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but "do_bind" is false`);
                  return;
                }

                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, "_bind_auth_2");

                const resource = Strophe.getResourceFromJid(this.jid);

                if (resource) {
                  this.send($iq({
                    type: "set",
                    id: "_bind_auth_2"
                  }).c('bind', {
                    xmlns: Strophe.NS.BIND
                  }).c('resource', {}).t(resource).tree());
                } else {
                  this.send($iq({
                    type: "set",
                    id: "_bind_auth_2"
                  }).c('bind', {
                    xmlns: Strophe.NS.BIND
                  }).tree());
                }
              }
              /** PrivateFunction: _onResourceBindIQ
               *  _Private_ handler for binding result and session start.
               *
               *  Parameters:
               *    (XMLElement) elem - The matching stanza.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _onResourceBindResultIQ(elem) {
                if (elem.getAttribute("type") === "error") {
                  Strophe.warn("Resource binding failed.");
                  const conflict = elem.getElementsByTagName("conflict");
                  let condition;

                  if (conflict.length > 0) {
                    condition = Strophe.ErrorCondition.CONFLICT;
                  }

                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);

                  return false;
                } // TODO - need to grab errors


                const bind = elem.getElementsByTagName("bind");

                if (bind.length > 0) {
                  const jidNode = bind[0].getElementsByTagName("jid");

                  if (jidNode.length > 0) {
                    this.authenticated = true;
                    this.jid = Strophe.getText(jidNode[0]);

                    if (this.do_session) {
                      this._establishSession();
                    } else {
                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);
                    }
                  }
                } else {
                  Strophe.warn("Resource binding failed.");

                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

                  return false;
                }
              }
              /** PrivateFunction: _establishSession
               *  Send IQ request to establish a session with the XMPP server.
               *
               *  See https://xmpp.org/rfcs/rfc3921.html#session
               *
               *  Note: The protocol for session establishment has been determined as
               *  unnecessary and removed in RFC-6121.
               */


              _establishSession() {
                if (!this.do_session) {
                  throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);
                }

                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, "_session_auth_2");

                this.send($iq({
                  type: "set",
                  id: "_session_auth_2"
                }).c('session', {
                  xmlns: Strophe.NS.SESSION
                }).tree());
              }
              /** PrivateFunction: _onSessionResultIQ
               *  _Private_ handler for the server's IQ response to a client's session
               *  request.
               *
               *  This sets Connection.authenticated to true on success, which
               *  starts the processing of user handlers.
               *
               *  See https://xmpp.org/rfcs/rfc3921.html#session
               *
               *  Note: The protocol for session establishment has been determined as
               *  unnecessary and removed in RFC-6121.
               *
               *  Parameters:
               *    (XMLElement) elem - The matching stanza.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _onSessionResultIQ(elem) {
                if (elem.getAttribute("type") === "result") {
                  this.authenticated = true;

                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);
                } else if (elem.getAttribute("type") === "error") {
                  this.authenticated = false;
                  Strophe.warn("Session creation failed.");

                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

                  return false;
                }

                return false;
              }
              /** PrivateFunction: _sasl_failure_cb
               *  _Private_ handler for SASL authentication failure.
               *
               *  Parameters:
               *    (XMLElement) elem - The matching stanza.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _sasl_failure_cb(elem) {
                // delete unneeded handlers
                if (this._sasl_success_handler) {
                  this.deleteHandler(this._sasl_success_handler);
                  this._sasl_success_handler = null;
                }

                if (this._sasl_challenge_handler) {
                  this.deleteHandler(this._sasl_challenge_handler);
                  this._sasl_challenge_handler = null;
                }

                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();

                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

                return false;
              }
              /** PrivateFunction: _auth2_cb
               *  _Private_ handler to finish legacy authentication.
               *
               *  This handler is called when the result from the jabber:iq:auth
               *  <iq/> stanza is returned.
               *
               *  Parameters:
               *    (XMLElement) elem - The stanza that triggered the callback.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _auth2_cb(elem) {
                if (elem.getAttribute("type") === "result") {
                  this.authenticated = true;

                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);
                } else if (elem.getAttribute("type") === "error") {
                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);

                  this.disconnect('authentication failed');
                }

                return false;
              }
              /** PrivateFunction: _addSysTimedHandler
               *  _Private_ function to add a system level timed handler.
               *
               *  This function is used to add a Strophe.TimedHandler for the
               *  library code.  System timed handlers are allowed to run before
               *  authentication is complete.
               *
               *  Parameters:
               *    (Integer) period - The period of the handler.
               *    (Function) handler - The callback function.
               */


              _addSysTimedHandler(period, handler) {
                const thand = new Strophe.TimedHandler(period, handler);
                thand.user = false;
                this.addTimeds.push(thand);
                return thand;
              }
              /** PrivateFunction: _addSysHandler
               *  _Private_ function to add a system level stanza handler.
               *
               *  This function is used to add a Strophe.Handler for the
               *  library code.  System stanza handlers are allowed to run before
               *  authentication is complete.
               *
               *  Parameters:
               *    (Function) handler - The callback function.
               *    (String) ns - The namespace to match.
               *    (String) name - The stanza name to match.
               *    (String) type - The stanza type attribute to match.
               *    (String) id - The stanza id attribute to match.
               */


              _addSysHandler(handler, ns, name, type, id) {
                const hand = new Strophe.Handler(handler, ns, name, type, id);
                hand.user = false;
                this.addHandlers.push(hand);
                return hand;
              }
              /** PrivateFunction: _onDisconnectTimeout
               *  _Private_ timeout handler for handling non-graceful disconnection.
               *
               *  If the graceful disconnect process does not complete within the
               *  time allotted, this handler finishes the disconnect anyway.
               *
               *  Returns:
               *    false to remove the handler.
               */


              _onDisconnectTimeout() {
                Strophe.debug("_onDisconnectTimeout was called");

                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);

                this._proto._onDisconnectTimeout(); // actually disconnect


                this._doDisconnect();

                return false;
              }
              /** PrivateFunction: _onIdle
               *  _Private_ handler to process events during idle cycle.
               *
               *  This handler is called every 100ms to fire timed handlers that
               *  are ready and keep poll requests going.
               */


              _onIdle() {
                // add timed handlers scheduled for addition
                // NOTE: we add before remove in the case a timed handler is
                // added and then deleted before the next _onIdle() call.
                while (this.addTimeds.length > 0) {
                  this.timedHandlers.push(this.addTimeds.pop());
                } // remove timed handlers that have been scheduled for deletion


                while (this.removeTimeds.length > 0) {
                  const thand = this.removeTimeds.pop();
                  const i = this.timedHandlers.indexOf(thand);

                  if (i >= 0) {
                    this.timedHandlers.splice(i, 1);
                  }
                } // call ready timed handlers


                const now = new Date().getTime();
                const newList = [];

                for (let i = 0; i < this.timedHandlers.length; i++) {
                  const thand = this.timedHandlers[i];

                  if (this.authenticated || !thand.user) {
                    const since = thand.lastCalled + thand.period;

                    if (since - now <= 0) {
                      if (thand.run()) {
                        newList.push(thand);
                      }
                    } else {
                      newList.push(thand);
                    }
                  }
                }

                this.timedHandlers = newList;
                clearTimeout(this._idleTimeout);

                this._proto._onIdle(); // reactivate the timer only if connected


                if (this.connected) {
                  this._idleTimeout = setTimeout(() => this._onIdle(), 100);
                }
              }

            };
            Strophe.SASLMechanism = SASLMechanism;
            /** Constants: SASL mechanisms
             *  Available authentication mechanisms
             *
             *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.
             *  Strophe.SASLPlain       - SASL PLAIN authentication.
             *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication
             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication
             *  Strophe.SASLExternal    - SASL EXTERNAL authentication
             *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication
             */

            Strophe.SASLAnonymous = SASLAnonymous;
            Strophe.SASLPlain = SASLPlain;
            Strophe.SASLSHA1 = SASLSHA1;
            Strophe.SASLOAuthBearer = SASLOAuthBearer;
            Strophe.SASLExternal = SASLExternal;
            Strophe.SASLXOAuth2 = SASLXOAuth2;
            var core = {
              'Strophe': Strophe,
              '$build': $build,
              '$iq': $iq,
              '$msg': $msg,
              '$pres': $pres,
              'SHA1': SHA1,
              'MD5': MD5,
              'b64_hmac_sha1': SHA1.b64_hmac_sha1,
              'b64_sha1': SHA1.b64_sha1,
              'str_hmac_sha1': SHA1.str_hmac_sha1,
              'str_sha1': SHA1.str_sha1
            };

            /*
                This program is distributed under the terms of the MIT license.
                Please see the LICENSE file for details.

                Copyright 2006-2008, OGG, LLC
            */
            /** PrivateClass: Strophe.Request
             *  _Private_ helper class that provides a cross implementation abstraction
             *  for a BOSH related XMLHttpRequest.
             *
             *  The Strophe.Request class is used internally to encapsulate BOSH request
             *  information.  It is not meant to be used from user's code.
             */

            Strophe.Request = class Request {
              /** PrivateConstructor: Strophe.Request
               *  Create and initialize a new Strophe.Request object.
               *
               *  Parameters:
               *    (XMLElement) elem - The XML data to be sent in the request.
               *    (Function) func - The function that will be called when the
               *      XMLHttpRequest readyState changes.
               *    (Integer) rid - The BOSH rid attribute associated with this request.
               *    (Integer) sends - The number of times this same request has been sent.
               */
              constructor(elem, func, rid, sends) {
                this.id = ++Strophe._requestId;
                this.xmlData = elem;
                this.data = Strophe.serialize(elem); // save original function in case we need to make a new request
                // from this one.

                this.origFunc = func;
                this.func = func;
                this.rid = rid;
                this.date = NaN;
                this.sends = sends || 0;
                this.abort = false;
                this.dead = null;

                this.age = function () {
                  if (!this.date) {
                    return 0;
                  }

                  const now = new Date();
                  return (now - this.date) / 1000;
                };

                this.timeDead = function () {
                  if (!this.dead) {
                    return 0;
                  }

                  const now = new Date();
                  return (now - this.dead) / 1000;
                };

                this.xhr = this._newXHR();
              }
              /** PrivateFunction: getResponse
               *  Get a response from the underlying XMLHttpRequest.
               *
               *  This function attempts to get a response from the request and checks
               *  for errors.
               *
               *  Throws:
               *    "parsererror" - A parser error occured.
               *    "bad-format" - The entity has sent XML that cannot be processed.
               *
               *  Returns:
               *    The DOM element tree of the response.
               */


              getResponse() {
                let node = null;

                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {
                  node = this.xhr.responseXML.documentElement;

                  if (node.tagName === "parsererror") {
                    Strophe.error("invalid response received");
                    Strophe.error("responseText: " + this.xhr.responseText);
                    Strophe.error("responseXML: " + Strophe.serialize(this.xhr.responseXML));
                    throw new Error("parsererror");
                  }
                } else if (this.xhr.responseText) {
                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.
                  Strophe.debug("Got responseText but no responseXML; attempting to parse it with DOMParser...");
                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;

                  if (!node) {
                    throw new Error('Parsing produced null node');
                  } else if (node.querySelector('parsererror')) {
                    Strophe.error("invalid response received: " + node.querySelector('parsererror').textContent);
                    Strophe.error("responseText: " + this.xhr.responseText);
                    const error = new Error();
                    error.name = Strophe.ErrorCondition.BAD_FORMAT;
                    throw error;
                  }
                }

                return node;
              }
              /** PrivateFunction: _newXHR
               *  _Private_ helper function to create XMLHttpRequests.
               *
               *  This function creates XMLHttpRequests across all implementations.
               *
               *  Returns:
               *    A new XMLHttpRequest.
               */


              _newXHR() {
                let xhr = null;

                if (window.XMLHttpRequest) {
                  xhr = new XMLHttpRequest();

                  if (xhr.overrideMimeType) {
                    xhr.overrideMimeType("text/xml; charset=utf-8");
                  }
                } else if (window.ActiveXObject) {
                  xhr = new ActiveXObject("Microsoft.XMLHTTP");
                } // use Function.bind() to prepend ourselves as an argument


                xhr.onreadystatechange = this.func.bind(null, this);
                return xhr;
              }

            };
            /** Class: Strophe.Bosh
             *  _Private_ helper class that handles BOSH Connections
             *
             *  The Strophe.Bosh class is used internally by Strophe.Connection
             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.
             */

            /** File: bosh.js
             *  A JavaScript library to enable BOSH in Strophejs.
             *
             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)
             *  to emulate a persistent, stateful, two-way connection to an XMPP server.
             *  More information on BOSH can be found in XEP 124.
             */

            /** PrivateConstructor: Strophe.Bosh
             *  Create and initialize a Strophe.Bosh object.
             *
             *  Parameters:
             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.
             *
             *  Returns:
             *    A new Strophe.Bosh object.
             */

            Strophe.Bosh = class Bosh {
              constructor(connection) {
                this._conn = connection;
                /* request id for body tags */

                this.rid = Math.floor(Math.random() * 4294967295);
                /* The current session ID. */

                this.sid = null; // default BOSH values

                this.hold = 1;
                this.wait = 60;
                this.window = 5;
                this.errors = 0;
                this.inactivity = null;
                this.lastResponseHeaders = null;
                this._requests = [];
              }
              /** PrivateFunction: _buildBody
               *  _Private_ helper function to generate the <body/> wrapper for BOSH.
               *
               *  Returns:
               *    A Strophe.Builder with a <body/> element.
               */


              _buildBody() {
                const bodyWrap = $build('body', {
                  'rid': this.rid++,
                  'xmlns': Strophe.NS.HTTPBIND
                });

                if (this.sid !== null) {
                  bodyWrap.attrs({
                    'sid': this.sid
                  });
                }

                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {
                  this._cacheSession();
                }

                return bodyWrap;
              }
              /** PrivateFunction: _reset
               *  Reset the connection.
               *
               *  This function is called by the reset function of the Strophe Connection
               */


              _reset() {
                this.rid = Math.floor(Math.random() * 4294967295);
                this.sid = null;
                this.errors = 0;

                if (this._conn._sessionCachingSupported()) {
                  window.sessionStorage.removeItem('strophe-bosh-session');
                }

                this._conn.nextValidRid(this.rid);
              }
              /** PrivateFunction: _connect
               *  _Private_ function that initializes the BOSH connection.
               *
               *  Creates and sends the Request that initializes the BOSH connection.
               */


              _connect(wait, hold, route) {
                this.wait = wait || this.wait;
                this.hold = hold || this.hold;
                this.errors = 0;

                const body = this._buildBody().attrs({
                  "to": this._conn.domain,
                  "xml:lang": "en",
                  "wait": this.wait,
                  "hold": this.hold,
                  "content": "text/xml; charset=utf-8",
                  "ver": "1.6",
                  "xmpp:version": "1.0",
                  "xmlns:xmpp": Strophe.NS.BOSH
                });

                if (route) {
                  body.attrs({
                    'route': route
                  });
                }

                const _connect_cb = this._conn._connect_cb;

                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute("rid")));

                this._throttledRequestHandler();
              }
              /** PrivateFunction: _attach
               *  Attach to an already created and authenticated BOSH session.
               *
               *  This function is provided to allow Strophe to attach to BOSH
               *  sessions which have been created externally, perhaps by a Web
               *  application.  This is often used to support auto-login type features
               *  without putting user credentials into the page.
               *
               *  Parameters:
               *    (String) jid - The full JID that is bound by the session.
               *    (String) sid - The SID of the BOSH session.
               *    (String) rid - The current RID of the BOSH session.  This RID
               *      will be used by the next request.
               *    (Function) callback The connect callback function.
               *    (Integer) wait - The optional HTTPBIND wait value.  This is the
               *      time the server will wait before returning an empty result for
               *      a request.  The default setting of 60 seconds is recommended.
               *      Other settings will require tweaks to the Strophe.TIMEOUT value.
               *    (Integer) hold - The optional HTTPBIND hold value.  This is the
               *      number of connections the server will hold at one time.  This
               *      should almost always be set to 1 (the default).
               *    (Integer) wind - The optional HTTBIND window value.  This is the
               *      allowed range of request ids that are valid.  The default is 5.
               */


              _attach(jid, sid, rid, callback, wait, hold, wind) {
                this._conn.jid = jid;
                this.sid = sid;
                this.rid = rid;
                this._conn.connect_callback = callback;
                this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);
                this._conn.authenticated = true;
                this._conn.connected = true;
                this.wait = wait || this.wait;
                this.hold = hold || this.hold;
                this.window = wind || this.window;

                this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);
              }
              /** PrivateFunction: _restore
               *  Attempt to restore a cached BOSH session
               *
               *  Parameters:
               *    (String) jid - The full JID that is bound by the session.
               *      This parameter is optional but recommended, specifically in cases
               *      where prebinded BOSH sessions are used where it's important to know
               *      that the right session is being restored.
               *    (Function) callback The connect callback function.
               *    (Integer) wait - The optional HTTPBIND wait value.  This is the
               *      time the server will wait before returning an empty result for
               *      a request.  The default setting of 60 seconds is recommended.
               *      Other settings will require tweaks to the Strophe.TIMEOUT value.
               *    (Integer) hold - The optional HTTPBIND hold value.  This is the
               *      number of connections the server will hold at one time.  This
               *      should almost always be set to 1 (the default).
               *    (Integer) wind - The optional HTTBIND window value.  This is the
               *      allowed range of request ids that are valid.  The default is 5.
               */


              _restore(jid, callback, wait, hold, wind) {
                const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));

                if (typeof session !== "undefined" && session !== null && session.rid && session.sid && session.jid && (typeof jid === "undefined" || jid === null || Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so
                // we compare only the domains:
                Strophe.getNodeFromJid(jid) === null && Strophe.getDomainFromJid(session.jid) === jid)) {
                  this._conn.restored = true;

                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);
                } else {
                  const error = new Error("_restore: no restoreable session.");
                  error.name = "StropheSessionError";
                  throw error;
                }
              }
              /** PrivateFunction: _cacheSession
               *  _Private_ handler for the beforeunload event.
               *
               *  This handler is used to process the Bosh-part of the initial request.
               *  Parameters:
               *    (Strophe.Request) bodyWrap - The received stanza.
               */


              _cacheSession() {
                if (this._conn.authenticated) {
                  if (this._conn.jid && this.rid && this.sid) {
                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({
                      'jid': this._conn.jid,
                      'rid': this.rid,
                      'sid': this.sid
                    }));
                  }
                } else {
                  window.sessionStorage.removeItem('strophe-bosh-session');
                }
              }
              /** PrivateFunction: _connect_cb
               *  _Private_ handler for initial connection request.
               *
               *  This handler is used to process the Bosh-part of the initial request.
               *  Parameters:
               *    (Strophe.Request) bodyWrap - The received stanza.
               */


              _connect_cb(bodyWrap) {
                const typ = bodyWrap.getAttribute("type");

                if (typ !== null && typ === "terminate") {
                  // an error occurred
                  let cond = bodyWrap.getAttribute("condition");
                  Strophe.error("BOSH-Connection failed: " + cond);
                  const conflict = bodyWrap.getElementsByTagName("conflict");

                  if (cond !== null) {
                    if (cond === "remote-stream-error" && conflict.length > 0) {
                      cond = "conflict";
                    }

                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);
                  } else {
                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "unknown");
                  }

                  this._conn._doDisconnect(cond);

                  return Strophe.Status.CONNFAIL;
                } // check to make sure we don't overwrite these if _connect_cb is
                // called multiple times in the case of missing stream:features


                if (!this.sid) {
                  this.sid = bodyWrap.getAttribute("sid");
                }

                const wind = bodyWrap.getAttribute('requests');

                if (wind) {
                  this.window = parseInt(wind, 10);
                }

                const hold = bodyWrap.getAttribute('hold');

                if (hold) {
                  this.hold = parseInt(hold, 10);
                }

                const wait = bodyWrap.getAttribute('wait');

                if (wait) {
                  this.wait = parseInt(wait, 10);
                }

                const inactivity = bodyWrap.getAttribute('inactivity');

                if (inactivity) {
                  this.inactivity = parseInt(inactivity, 10);
                }
              }
              /** PrivateFunction: _disconnect
               *  _Private_ part of Connection.disconnect for Bosh
               *
               *  Parameters:
               *    (Request) pres - This stanza will be sent before disconnecting.
               */


              _disconnect(pres) {
                this._sendTerminate(pres);
              }
              /** PrivateFunction: _doDisconnect
               *  _Private_ function to disconnect.
               *
               *  Resets the SID and RID.
               */


              _doDisconnect() {
                this.sid = null;
                this.rid = Math.floor(Math.random() * 4294967295);

                if (this._conn._sessionCachingSupported()) {
                  window.sessionStorage.removeItem('strophe-bosh-session');
                }

                this._conn.nextValidRid(this.rid);
              }
              /** PrivateFunction: _emptyQueue
               * _Private_ function to check if the Request queue is empty.
               *
               *  Returns:
               *    True, if there are no Requests queued, False otherwise.
               */


              _emptyQueue() {
                return this._requests.length === 0;
              }
              /** PrivateFunction: _callProtocolErrorHandlers
               *  _Private_ function to call error handlers registered for HTTP errors.
               *
               *  Parameters:
               *    (Strophe.Request) req - The request that is changing readyState.
               */


              _callProtocolErrorHandlers(req) {
                const reqStatus = Bosh._getRequestStatus(req);

                const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];

                if (err_callback) {
                  err_callback.call(this, reqStatus);
                }
              }
              /** PrivateFunction: _hitError
               *  _Private_ function to handle the error count.
               *
               *  Requests are resent automatically until their error count reaches
               *  5.  Each time an error is encountered, this function is called to
               *  increment the count and disconnect if the count is too high.
               *
               *  Parameters:
               *    (Integer) reqStatus - The request status.
               */


              _hitError(reqStatus) {
                this.errors++;
                Strophe.warn("request errored, status: " + reqStatus + ", number of errors: " + this.errors);

                if (this.errors > 4) {
                  this._conn._onDisconnectTimeout();
                }
              }
              /** PrivateFunction: _no_auth_received
               *
               * Called on stream start/restart when no stream:features
               * has been received and sends a blank poll request.
               */


              _no_auth_received(callback) {
                Strophe.warn("Server did not yet offer a supported authentication " + "mechanism. Sending a blank poll request.");

                if (callback) {
                  callback = callback.bind(this._conn);
                } else {
                  callback = this._conn._connect_cb.bind(this._conn);
                }

                const body = this._buildBody();

                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute("rid")));

                this._throttledRequestHandler();
              }
              /** PrivateFunction: _onDisconnectTimeout
               *  _Private_ timeout handler for handling non-graceful disconnection.
               *
               *  Cancels all remaining Requests and clears the queue.
               */


              _onDisconnectTimeout() {
                this._abortAllRequests();
              }
              /** PrivateFunction: _abortAllRequests
               *  _Private_ helper function that makes sure all pending requests are aborted.
               */


              _abortAllRequests() {
                while (this._requests.length > 0) {
                  const req = this._requests.pop();

                  req.abort = true;
                  req.xhr.abort();

                  req.xhr.onreadystatechange = function () {};
                }
              }
              /** PrivateFunction: _onIdle
               *  _Private_ handler called by Strophe.Connection._onIdle
               *
               *  Sends all queued Requests or polls with empty Request if there are none.
               */


              _onIdle() {
                const data = this._conn._data; // if no requests are in progress, poll

                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {
                  Strophe.debug("no requests during idle cycle, sending blank request");
                  data.push(null);
                }

                if (this._conn.paused) {
                  return;
                }

                if (this._requests.length < 2 && data.length > 0) {
                  const body = this._buildBody();

                  for (let i = 0; i < data.length; i++) {
                    if (data[i] !== null) {
                      if (data[i] === "restart") {
                        body.attrs({
                          "to": this._conn.domain,
                          "xml:lang": "en",
                          "xmpp:restart": "true",
                          "xmlns:xmpp": Strophe.NS.BOSH
                        });
                      } else {
                        body.cnode(data[i]).up();
                      }
                    }
                  }

                  delete this._conn._data;
                  this._conn._data = [];

                  this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute("rid")));

                  this._throttledRequestHandler();
                }

                if (this._requests.length > 0) {
                  const time_elapsed = this._requests[0].age();

                  if (this._requests[0].dead !== null) {
                    if (this._requests[0].timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {
                      this._throttledRequestHandler();
                    }
                  }

                  if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {
                    Strophe.warn("Request " + this._requests[0].id + " timed out, over " + Math.floor(Strophe.TIMEOUT * this.wait) + " seconds since last activity");

                    this._throttledRequestHandler();
                  }
                }
              }
              /** PrivateFunction: _getRequestStatus
               *
               *  Returns the HTTP status code from a Strophe.Request
               *
               *  Parameters:
               *    (Strophe.Request) req - The Strophe.Request instance.
               *    (Integer) def - The default value that should be returned if no
               *          status value was found.
               */


              static _getRequestStatus(req, def) {
                let reqStatus;

                if (req.xhr.readyState === 4) {
                  try {
                    reqStatus = req.xhr.status;
                  } catch (e) {
                    // ignore errors from undefined status attribute. Works
                    // around a browser bug
                    Strophe.error("Caught an error while retrieving a request's status, " + "reqStatus: " + reqStatus);
                  }
                }

                if (typeof reqStatus === "undefined") {
                  reqStatus = typeof def === 'number' ? def : 0;
                }

                return reqStatus;
              }
              /** PrivateFunction: _onRequestStateChange
               *  _Private_ handler for Strophe.Request state changes.
               *
               *  This function is called when the XMLHttpRequest readyState changes.
               *  It contains a lot of error handling logic for the many ways that
               *  requests can fail, and calls the request callback when requests
               *  succeed.
               *
               *  Parameters:
               *    (Function) func - The handler for the request.
               *    (Strophe.Request) req - The request that is changing readyState.
               */


              _onRequestStateChange(func, req) {
                Strophe.debug("request id " + req.id + "." + req.sends + " state changed to " + req.xhr.readyState);

                if (req.abort) {
                  req.abort = false;
                  return;
                }

                if (req.xhr.readyState !== 4) {
                  // The request is not yet complete
                  return;
                }

                const reqStatus = Bosh._getRequestStatus(req);

                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();

                if (this._conn.disconnecting && reqStatus >= 400) {
                  this._hitError(reqStatus);

                  this._callProtocolErrorHandlers(req);

                  return;
                }

                const valid_request = reqStatus > 0 && reqStatus < 500;
                const too_many_retries = req.sends > this._conn.maxRetries;

                if (valid_request || too_many_retries) {
                  // remove from internal queue
                  this._removeRequest(req);

                  Strophe.debug("request id " + req.id + " should now be removed");
                }

                if (reqStatus === 200) {
                  // request succeeded
                  const reqIs0 = this._requests[0] === req;
                  const reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request
                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to
                  // restart the other - both will be in the first spot, as the
                  // completed request has been removed from the queue already

                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {
                    this._restartRequest(0);
                  }

                  this._conn.nextValidRid(Number(req.rid) + 1);

                  Strophe.debug("request id " + req.id + "." + req.sends + " got 200");
                  func(req); // call handler

                  this.errors = 0;
                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {
                  // request failed
                  Strophe.error("request id " + req.id + "." + req.sends + " error " + reqStatus + " happened");

                  this._hitError(reqStatus);

                  this._callProtocolErrorHandlers(req);

                  if (reqStatus >= 400 && reqStatus < 500) {
                    this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);

                    this._conn._doDisconnect();
                  }
                } else {
                  Strophe.error("request id " + req.id + "." + req.sends + " error " + reqStatus + " happened");
                }

                if (!valid_request && !too_many_retries) {
                  this._throttledRequestHandler();
                } else if (too_many_retries && !this._conn.connected) {
                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "giving-up");
                }
              }
              /** PrivateFunction: _processRequest
               *  _Private_ function to process a request in the queue.
               *
               *  This function takes requests off the queue and sends them and
               *  restarts dead requests.
               *
               *  Parameters:
               *    (Integer) i - The index of the request in the queue.
               */


              _processRequest(i) {
                let req = this._requests[i];

                const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries


                if (req.sends > this._conn.maxRetries) {
                  this._conn._onDisconnectTimeout();

                  return;
                }

                const time_elapsed = req.age();
                const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);
                const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);
                const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);

                if (primary_timeout || secondary_timeout || server_error) {
                  if (secondary_timeout) {
                    Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);
                  }

                  req.abort = true;
                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function

                  req.xhr.onreadystatechange = function () {};

                  this._requests[i] = new Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);
                  req = this._requests[i];
                }

                if (req.xhr.readyState === 0) {
                  Strophe.debug("request id " + req.id + "." + req.sends + " posting");

                  try {
                    const content_type = this._conn.options.contentType || "text/xml; charset=utf-8";
                    req.xhr.open("POST", this._conn.service, this._conn.options.sync ? false : true);

                    if (typeof req.xhr.setRequestHeader !== 'undefined') {
                      // IE9 doesn't have setRequestHeader
                      req.xhr.setRequestHeader("Content-Type", content_type);
                    }

                    if (this._conn.options.withCredentials) {
                      req.xhr.withCredentials = true;
                    }
                  } catch (e2) {
                    Strophe.error("XHR open failed: " + e2.toString());

                    if (!this._conn.connected) {
                      this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "bad-service");
                    }

                    this._conn.disconnect();

                    return;
                  } // Fires the XHR request -- may be invoked immediately
                  // or on a gradually expanding retry window for reconnects


                  const sendFunc = () => {
                    req.date = new Date();

                    if (this._conn.options.customHeaders) {
                      const headers = this._conn.options.customHeaders;

                      for (const header in headers) {
                        if (Object.prototype.hasOwnProperty.call(headers, header)) {
                          req.xhr.setRequestHeader(header, headers[header]);
                        }
                      }
                    }

                    req.xhr.send(req.data);
                  }; // Implement progressive backoff for reconnects --
                  // First retry (send === 1) should also be instantaneous


                  if (req.sends > 1) {
                    // Using a cube of the retry number creates a nicely
                    // expanding retry window
                    const backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;
                    setTimeout(function () {
                      // XXX: setTimeout should be called only with function expressions (23974bc1)
                      sendFunc();
                    }, backoff);
                  } else {
                    sendFunc();
                  }

                  req.sends++;

                  if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {
                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {
                      this._conn.xmlOutput(req.xmlData.childNodes[0]);
                    } else {
                      this._conn.xmlOutput(req.xmlData);
                    }
                  }

                  if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {
                    this._conn.rawOutput(req.data);
                  }
                } else {
                  Strophe.debug("_processRequest: " + (i === 0 ? "first" : "second") + " request has readyState of " + req.xhr.readyState);
                }
              }
              /** PrivateFunction: _removeRequest
               *  _Private_ function to remove a request from the queue.
               *
               *  Parameters:
               *    (Strophe.Request) req - The request to remove.
               */


              _removeRequest(req) {
                Strophe.debug("removing request");

                for (let i = this._requests.length - 1; i >= 0; i--) {
                  if (req === this._requests[i]) {
                    this._requests.splice(i, 1);
                  }
                } // IE6 fails on setting to null, so set to empty function


                req.xhr.onreadystatechange = function () {};

                this._throttledRequestHandler();
              }
              /** PrivateFunction: _restartRequest
               *  _Private_ function to restart a request that is presumed dead.
               *
               *  Parameters:
               *    (Integer) i - The index of the request in the queue.
               */


              _restartRequest(i) {
                const req = this._requests[i];

                if (req.dead === null) {
                  req.dead = new Date();
                }

                this._processRequest(i);
              }
              /** PrivateFunction: _reqToData
               * _Private_ function to get a stanza out of a request.
               *
               * Tries to extract a stanza out of a Request Object.
               * When this fails the current connection will be disconnected.
               *
               *  Parameters:
               *    (Object) req - The Request.
               *
               *  Returns:
               *    The stanza that was passed.
               */


              _reqToData(req) {
                try {
                  return req.getResponse();
                } catch (e) {
                  if (e.message !== "parsererror") {
                    throw e;
                  }

                  this._conn.disconnect("strophe-parsererror");
                }
              }
              /** PrivateFunction: _sendTerminate
               *  _Private_ function to send initial disconnect sequence.
               *
               *  This is the first step in a graceful disconnect.  It sends
               *  the BOSH server a terminate body and includes an unavailable
               *  presence if authentication has completed.
               */


              _sendTerminate(pres) {
                Strophe.debug("_sendTerminate was called");

                const body = this._buildBody().attrs({
                  type: "terminate"
                });

                if (pres) {
                  body.cnode(pres.tree());
                }

                const req = new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute("rid"));

                this._requests.push(req);

                this._throttledRequestHandler();
              }
              /** PrivateFunction: _send
               *  _Private_ part of the Connection.send function for BOSH
               *
               * Just triggers the RequestHandler to send the messages that are in the queue
               */


              _send() {
                clearTimeout(this._conn._idleTimeout);

                this._throttledRequestHandler();

                this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);
              }
              /** PrivateFunction: _sendRestart
               *
               *  Send an xmpp:restart stanza.
               */


              _sendRestart() {
                this._throttledRequestHandler();

                clearTimeout(this._conn._idleTimeout);
              }
              /** PrivateFunction: _throttledRequestHandler
               *  _Private_ function to throttle requests to the connection window.
               *
               *  This function makes sure we don't send requests so fast that the
               *  request ids overflow the connection window in the case that one
               *  request died.
               */


              _throttledRequestHandler() {
                if (!this._requests) {
                  Strophe.debug("_throttledRequestHandler called with " + "undefined requests");
                } else {
                  Strophe.debug("_throttledRequestHandler called with " + this._requests.length + " requests");
                }

                if (!this._requests || this._requests.length === 0) {
                  return;
                }

                if (this._requests.length > 0) {
                  this._processRequest(0);
                }

                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {
                  this._processRequest(1);
                }
              }

            };
            /** Variable: strip
             *
             *  BOSH-Connections will have all stanzas wrapped in a <body> tag when
             *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.
             *  To strip this tag, User code can set <Strophe.Bosh.strip> to "body":
             *
             *  > Strophe.Bosh.prototype.strip = "body";
             *
             *  This will enable stripping of the body tag in both
             *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.
             */

            Strophe.Bosh.prototype.strip = null;

            /*
                This program is distributed under the terms of the MIT license.
                Please see the LICENSE file for details.

                Copyright 2006-2008, OGG, LLC
            */
            /** Class: Strophe.WebSocket
             *  _Private_ helper class that handles WebSocket Connections
             *
             *  The Strophe.WebSocket class is used internally by Strophe.Connection
             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.
             */

            /** File: websocket.js
             *  A JavaScript library to enable XMPP over Websocket in Strophejs.
             *
             *  This file implements XMPP over WebSockets for Strophejs.
             *  If a Connection is established with a Websocket url (ws://...)
             *  Strophe will use WebSockets.
             *  For more information on XMPP-over-WebSocket see RFC 7395:
             *  http://tools.ietf.org/html/rfc7395
             *
             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)
             */

            Strophe.Websocket = class Websocket {
              /** PrivateConstructor: Strophe.Websocket
               *  Create and initialize a Strophe.WebSocket object.
               *  Currently only sets the connection Object.
               *
               *  Parameters:
               *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.
               *
               *  Returns:
               *    A new Strophe.WebSocket object.
               */
              constructor(connection) {
                this._conn = connection;
                this.strip = "wrapper";
                const service = connection.service;

                if (service.indexOf("ws:") !== 0 && service.indexOf("wss:") !== 0) {
                  // If the service is not an absolute URL, assume it is a path and put the absolute
                  // URL together from options, current URL and the path.
                  let new_service = "";

                  if (connection.options.protocol === "ws" && window.location.protocol !== "https:") {
                    new_service += "ws";
                  } else {
                    new_service += "wss";
                  }

                  new_service += "://" + window.location.host;

                  if (service.indexOf("/") !== 0) {
                    new_service += window.location.pathname + service;
                  } else {
                    new_service += service;
                  }

                  connection.service = new_service;
                }
              }
              /** PrivateFunction: _buildStream
               *  _Private_ helper function to generate the <stream> start tag for WebSockets
               *
               *  Returns:
               *    A Strophe.Builder with a <stream> element.
               */


              _buildStream() {
                return $build("open", {
                  "xmlns": Strophe.NS.FRAMING,
                  "to": this._conn.domain,
                  "version": '1.0'
                });
              }
              /** PrivateFunction: _checkStreamError
               * _Private_ checks a message for stream:error
               *
               *  Parameters:
               *    (Strophe.Request) bodyWrap - The received stanza.
               *    connectstatus - The ConnectStatus that will be set on error.
               *  Returns:
               *     true if there was a streamerror, false otherwise.
               */


              _checkStreamError(bodyWrap, connectstatus) {
                let errors;

                if (bodyWrap.getElementsByTagNameNS) {
                  errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, "error");
                } else {
                  errors = bodyWrap.getElementsByTagName("stream:error");
                }

                if (errors.length === 0) {
                  return false;
                }

                const error = errors[0];
                let condition = "";
                let text = "";
                const ns = "urn:ietf:params:xml:ns:xmpp-streams";

                for (let i = 0; i < error.childNodes.length; i++) {
                  const e = error.childNodes[i];

                  if (e.getAttribute("xmlns") !== ns) {
                    break;
                  }

                  if (e.nodeName === "text") {
                    text = e.textContent;
                  } else {
                    condition = e.nodeName;
                  }
                }

                let errorString = "WebSocket stream error: ";

                if (condition) {
                  errorString += condition;
                } else {
                  errorString += "unknown";
                }

                if (text) {
                  errorString += " - " + text;
                }

                Strophe.error(errorString); // close the connection on stream_error

                this._conn._changeConnectStatus(connectstatus, condition);

                this._conn._doDisconnect();

                return true;
              }
              /** PrivateFunction: _reset
               *  Reset the connection.
               *
               *  This function is called by the reset function of the Strophe Connection.
               *  Is not needed by WebSockets.
               */


              _reset() {
                // eslint-disable-line class-methods-use-this
                return;
              }
              /** PrivateFunction: _connect
               *  _Private_ function called by Strophe.Connection.connect
               *
               *  Creates a WebSocket for a connection and assigns Callbacks to it.
               *  Does nothing if there already is a WebSocket.
               */


              _connect() {
                // Ensure that there is no open WebSocket from a previous Connection.
                this._closeSocket();

                this.socket = new WebSocket(this._conn.service, "xmpp");

                this.socket.onopen = () => this._onOpen();

                this.socket.onerror = e => this._onError(e);

                this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called


                this.socket.onmessage = message => this._onInitialMessage(message);
              }
              /** PrivateFunction: _connect_cb
               *  _Private_ function called by Strophe.Connection._connect_cb
               *
               * checks for stream:error
               *
               *  Parameters:
               *    (Strophe.Request) bodyWrap - The received stanza.
               */


              _connect_cb(bodyWrap) {
                const error = this._checkStreamError(bodyWrap, Strophe.Status.CONNFAIL);

                if (error) {
                  return Strophe.Status.CONNFAIL;
                }
              }
              /** PrivateFunction: _handleStreamStart
               * _Private_ function that checks the opening <open /> tag for errors.
               *
               * Disconnects if there is an error and returns false, true otherwise.
               *
               *  Parameters:
               *    (Node) message - Stanza containing the <open /> tag.
               */


              _handleStreamStart(message) {
                let error = false; // Check for errors in the <open /> tag

                const ns = message.getAttribute("xmlns");

                if (typeof ns !== "string") {
                  error = "Missing xmlns in <open />";
                } else if (ns !== Strophe.NS.FRAMING) {
                  error = "Wrong xmlns in <open />: " + ns;
                }

                const ver = message.getAttribute("version");

                if (typeof ver !== "string") {
                  error = "Missing version in <open />";
                } else if (ver !== "1.0") {
                  error = "Wrong version in <open />: " + ver;
                }

                if (error) {
                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);

                  this._conn._doDisconnect();

                  return false;
                }

                return true;
              }
              /** PrivateFunction: _onInitialMessage
               * _Private_ function that handles the first connection messages.
               *
               * On receiving an opening stream tag this callback replaces itself with the real
               * message handler. On receiving a stream error the connection is terminated.
               */


              _onInitialMessage(message) {
                if (message.data.indexOf("<open ") === 0 || message.data.indexOf("<?xml") === 0) {
                  // Strip the XML Declaration, if there is one
                  const data = message.data.replace(/^(<\?.*?\?>\s*)*/, "");
                  if (data === '') return;
                  const streamStart = new DOMParser().parseFromString(data, "text/xml").documentElement;

                  this._conn.xmlInput(streamStart);

                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error


                  if (this._handleStreamStart(streamStart)) {
                    //_connect_cb will check for stream:error and disconnect on error
                    this._connect_cb(streamStart);
                  }
                } else if (message.data.indexOf("<close ") === 0) {
                  // <close xmlns="urn:ietf:params:xml:ns:xmpp-framing />
                  // Parse the raw string to an XML element
                  const parsedMessage = new DOMParser().parseFromString(message.data, "text/xml").documentElement; // Report this input to the raw and xml handlers

                  this._conn.xmlInput(parsedMessage);

                  this._conn.rawInput(message.data);

                  const see_uri = parsedMessage.getAttribute("see-other-uri");

                  if (see_uri) {
                    const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY

                    const isSecureRedirect = service.indexOf("wss:") >= 0 && see_uri.indexOf("wss:") >= 0 || service.indexOf("ws:") >= 0;

                    if (isSecureRedirect) {
                      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, "Received see-other-uri, resetting connection");

                      this._conn.reset();

                      this._conn.service = see_uri;

                      this._connect();
                    }
                  } else {
                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "Received closing stream");

                    this._conn._doDisconnect();
                  }
                } else {
                  this._replaceMessageHandler();

                  const string = this._streamWrap(message.data);

                  const elem = new DOMParser().parseFromString(string, "text/xml").documentElement;

                  this._conn._connect_cb(elem, null, message.data);
                }
              }
              /** PrivateFunction: _replaceMessageHandler
               *
               * Called by _onInitialMessage in order to replace itself with the general message handler.
               * This method is overridden by Strophe.WorkerWebsocket, which manages a
               * websocket connection via a service worker and doesn't have direct access
               * to the socket.
               */


              _replaceMessageHandler() {
                this.socket.onmessage = m => this._onMessage(m);
              }
              /** PrivateFunction: _disconnect
               *  _Private_ function called by Strophe.Connection.disconnect
               *
               *  Disconnects and sends a last stanza if one is given
               *
               *  Parameters:
               *    (Request) pres - This stanza will be sent before disconnecting.
               */


              _disconnect(pres) {
                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
                  if (pres) {
                    this._conn.send(pres);
                  }

                  const close = $build("close", {
                    "xmlns": Strophe.NS.FRAMING
                  });

                  this._conn.xmlOutput(close.tree());

                  const closeString = Strophe.serialize(close);

                  this._conn.rawOutput(closeString);

                  try {
                    this.socket.send(closeString);
                  } catch (e) {
                    Strophe.warn("Couldn't send <close /> tag.");
                  }
                }

                setTimeout(() => this._conn._doDisconnect, 0);
              }
              /** PrivateFunction: _doDisconnect
               *  _Private_ function to disconnect.
               *
               *  Just closes the Socket for WebSockets
               */


              _doDisconnect() {
                Strophe.debug("WebSockets _doDisconnect was called");

                this._closeSocket();
              }
              /** PrivateFunction _streamWrap
               *  _Private_ helper function to wrap a stanza in a <stream> tag.
               *  This is used so Strophe can process stanzas from WebSockets like BOSH
               */


              _streamWrap(stanza) {
                // eslint-disable-line class-methods-use-this
                return "<wrapper>" + stanza + '</wrapper>';
              }
              /** PrivateFunction: _closeSocket
               *  _Private_ function to close the WebSocket.
               *
               *  Closes the socket if it is still open and deletes it
               */


              _closeSocket() {
                if (this.socket) {
                  try {
                    this.socket.onclose = null;
                    this.socket.onerror = null;
                    this.socket.onmessage = null;
                    this.socket.close();
                  } catch (e) {
                    Strophe.debug(e.message);
                  }
                }

                this.socket = null;
              }
              /** PrivateFunction: _emptyQueue
               * _Private_ function to check if the message queue is empty.
               *
               *  Returns:
               *    True, because WebSocket messages are send immediately after queueing.
               */


              _emptyQueue() {
                // eslint-disable-line class-methods-use-this
                return true;
              }
              /** PrivateFunction: _onClose
               * _Private_ function to handle websockets closing.
               */


              _onClose(e) {
                if (this._conn.connected && !this._conn.disconnecting) {
                  Strophe.error("Websocket closed unexpectedly");

                  this._conn._doDisconnect();
                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {
                  // in case the onError callback was not called (Safari 10 does not
                  // call onerror when the initial connection fails) we need to
                  // dispatch a CONNFAIL status update to be consistent with the
                  // behavior on other browsers.
                  Strophe.error("Websocket closed unexcectedly");

                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

                  this._conn._doDisconnect();
                } else {
                  Strophe.debug("Websocket closed");
                }
              }
              /** PrivateFunction: _no_auth_received
               *
               * Called on stream start/restart when no stream:features
               * has been received.
               */


              _no_auth_received(callback) {
                Strophe.error("Server did not offer a supported authentication mechanism");

                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.NO_AUTH_MECH);

                if (callback) {
                  callback.call(this._conn);
                }

                this._conn._doDisconnect();
              }
              /** PrivateFunction: _onDisconnectTimeout
               *  _Private_ timeout handler for handling non-graceful disconnection.
               *
               *  This does nothing for WebSockets
               */


              _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this

              /** PrivateFunction: _abortAllRequests
               *  _Private_ helper function that makes sure all pending requests are aborted.
               */


              _abortAllRequests() {} // eslint-disable-line class-methods-use-this

              /** PrivateFunction: _onError
               * _Private_ function to handle websockets errors.
               *
               * Parameters:
               * (Object) error - The websocket error.
               */


              _onError(error) {
                Strophe.error("Websocket error " + JSON.stringify(error));

                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

                this._disconnect();
              }
              /** PrivateFunction: _onIdle
               *  _Private_ function called by Strophe.Connection._onIdle
               *
               *  sends all queued stanzas
               */


              _onIdle() {
                const data = this._conn._data;

                if (data.length > 0 && !this._conn.paused) {
                  for (let i = 0; i < data.length; i++) {
                    if (data[i] !== null) {
                      let stanza;

                      if (data[i] === "restart") {
                        stanza = this._buildStream().tree();
                      } else {
                        stanza = data[i];
                      }

                      const rawStanza = Strophe.serialize(stanza);

                      this._conn.xmlOutput(stanza);

                      this._conn.rawOutput(rawStanza);

                      this.socket.send(rawStanza);
                    }
                  }

                  this._conn._data = [];
                }
              }
              /** PrivateFunction: _onMessage
               * _Private_ function to handle websockets messages.
               *
               * This function parses each of the messages as if they are full documents.
               * [TODO : We may actually want to use a SAX Push parser].
               *
               * Since all XMPP traffic starts with
               *  <stream:stream version='1.0'
               *                 xml:lang='en'
               *                 xmlns='jabber:client'
               *                 xmlns:stream='http://etherx.jabber.org/streams'
               *                 id='3697395463'
               *                 from='SERVER'>
               *
               * The first stanza will always fail to be parsed.
               *
               * Additionally, the seconds stanza will always be <stream:features> with
               * the stream NS defined in the previous stanza, so we need to 'force'
               * the inclusion of the NS in this stanza.
               *
               * Parameters:
               * (string) message - The websocket message.
               */


              _onMessage(message) {
                let elem; // check for closing stream

                const close = '<close xmlns="urn:ietf:params:xml:ns:xmpp-framing" />';

                if (message.data === close) {
                  this._conn.rawInput(close);

                  this._conn.xmlInput(message);

                  if (!this._conn.disconnecting) {
                    this._conn._doDisconnect();
                  }

                  return;
                } else if (message.data.search("<open ") === 0) {
                  // This handles stream restarts
                  elem = new DOMParser().parseFromString(message.data, "text/xml").documentElement;

                  if (!this._handleStreamStart(elem)) {
                    return;
                  }
                } else {
                  const data = this._streamWrap(message.data);

                  elem = new DOMParser().parseFromString(data, "text/xml").documentElement;
                }

                if (this._checkStreamError(elem, Strophe.Status.ERROR)) {
                  return;
                } //handle unavailable presence stanza before disconnecting


                if (this._conn.disconnecting && elem.firstChild.nodeName === "presence" && elem.firstChild.getAttribute("type") === "unavailable") {
                  this._conn.xmlInput(elem);

                  this._conn.rawInput(Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and
                  // wait for the </stream:stream> tag before we close the connection


                  return;
                }

                this._conn._dataRecv(elem, message.data);
              }
              /** PrivateFunction: _onOpen
               * _Private_ function to handle websockets connection setup.
               *
               * The opening stream tag is sent here.
               */


              _onOpen() {
                Strophe.debug("Websocket open");

                const start = this._buildStream();

                this._conn.xmlOutput(start.tree());

                const startString = Strophe.serialize(start);

                this._conn.rawOutput(startString);

                this.socket.send(startString);
              }
              /** PrivateFunction: _reqToData
               * _Private_ function to get a stanza out of a request.
               *
               * WebSockets don't use requests, so the passed argument is just returned.
               *
               *  Parameters:
               *    (Object) stanza - The stanza.
               *
               *  Returns:
               *    The stanza that was passed.
               */


              _reqToData(stanza) {
                // eslint-disable-line class-methods-use-this
                return stanza;
              }
              /** PrivateFunction: _send
               *  _Private_ part of the Connection.send function for WebSocket
               *
               * Just flushes the messages that are in the queue
               */


              _send() {
                this._conn.flush();
              }
              /** PrivateFunction: _sendRestart
               *
               *  Send an xmpp:restart stanza.
               */


              _sendRestart() {
                clearTimeout(this._conn._idleTimeout);

                this._conn._onIdle.bind(this._conn)();
              }

            };

            /*
                This program is distributed under the terms of the MIT license.
                Please see the LICENSE file for details.

                Copyright 2020, JC Brand
            */
            const lmap = {};
            lmap['debug'] = Strophe.LogLevel.DEBUG;
            lmap['info'] = Strophe.LogLevel.INFO;
            lmap['warn'] = Strophe.LogLevel.WARN;
            lmap['error'] = Strophe.LogLevel.ERROR;
            lmap['fatal'] = Strophe.LogLevel.FATAL;
            /** Class: Strophe.WorkerWebsocket
             *  _Private_ helper class that handles a websocket connection inside a shared worker.
             */

            Strophe.WorkerWebsocket = class WorkerWebsocket extends Strophe.Websocket {
              /** PrivateConstructor: Strophe.WorkerWebsocket
               *  Create and initialize a Strophe.WorkerWebsocket object.
               *
               *  Parameters:
               *    (Strophe.Connection) connection - The Strophe.Connection
               *
               *  Returns:
               *    A new Strophe.WorkerWebsocket object.
               */
              constructor(connection) {
                super(connection);
                this._conn = connection;
                this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');

                this.worker.onerror = e => {
                  var _console;

                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);
                  Strophe.log(Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);
                };
              }

              get socket() {
                return {
                  'send': str => this.worker.port.postMessage(['send', str])
                };
              }

              _connect() {
                this._messageHandler = m => this._onInitialMessage(m);

                this.worker.port.start();

                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);

                this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);
              }

              _attach(callback) {
                this._messageHandler = m => this._onMessage(m);

                this._conn.connect_callback = callback;
                this.worker.port.start();

                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);

                this.worker.port.postMessage(['_attach', this._conn.service]);
              }

              _attachCallback(status, jid) {
                if (status === Strophe.Status.ATTACHED) {
                  this._conn.jid = jid;
                  this._conn.authenticated = true;
                  this._conn.connected = true;
                  this._conn.restored = true;

                  this._conn._changeConnectStatus(Strophe.Status.ATTACHED);
                } else if (status === Strophe.Status.ATTACHFAIL) {
                  this._conn.authenticated = false;
                  this._conn.connected = false;
                  this._conn.restored = false;

                  this._conn._changeConnectStatus(Strophe.Status.ATTACHFAIL);
                }
              }

              _disconnect(readyState, pres) {
                pres && this._conn.send(pres);
                const close = $build("close", {
                  "xmlns": Strophe.NS.FRAMING
                });

                this._conn.xmlOutput(close.tree());

                const closeString = Strophe.serialize(close);

                this._conn.rawOutput(closeString);

                this.worker.port.postMessage(['send', closeString]);

                this._conn._doDisconnect();
              }

              _onClose(e) {
                if (this._conn.connected && !this._conn.disconnecting) {
                  Strophe.error("Websocket closed unexpectedly");

                  this._conn._doDisconnect();
                } else if (e && e.code === 1006 && !this._conn.connected) {
                  // in case the onError callback was not called (Safari 10 does not
                  // call onerror when the initial connection fails) we need to
                  // dispatch a CONNFAIL status update to be consistent with the
                  // behavior on other browsers.
                  Strophe.error("Websocket closed unexcectedly");

                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");

                  this._conn._doDisconnect();
                } else {
                  Strophe.debug("Websocket closed");
                }
              }

              _closeSocket() {
                this.worker.port.postMessage(['_closeSocket']);
              }
              /** PrivateFunction: _replaceMessageHandler
               *
               * Called by _onInitialMessage in order to replace itself with the general message handler.
               * This method is overridden by Strophe.WorkerWebsocket, which manages a
               * websocket connection via a service worker and doesn't have direct access
               * to the socket.
               */


              _replaceMessageHandler() {
                this._messageHandler = m => this._onMessage(m);
              }
              /** PrivateFunction: _onWorkerMessage
               * _Private_ function that handles messages received from the service worker
               */


              _onWorkerMessage(ev) {
                const {
                  data
                } = ev;
                const method_name = data[0];

                if (method_name === '_onMessage') {
                  this._messageHandler(data[1]);
                } else if (method_name in this) {
                  try {
                    this[method_name].apply(this, ev.data.slice(1));
                  } catch (e) {
                    Strophe.log(Strophe.LogLevel.ERROR, e);
                  }
                } else if (method_name === 'log') {
                  const level = data[1];
                  const msg = data[2];
                  Strophe.log(lmap[level], msg);
                } else {
                  Strophe.log(Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);
                }
              }

            };

            global$1.$build = core.$build;
            global$1.$iq = core.$iq;
            global$1.$msg = core.$msg;
            global$1.$pres = core.$pres;
            global$1.Strophe = core.Strophe;
            const {
              b64_sha1
            } = SHA1;

            exports.$build = $build;
            exports.$iq = $iq;
            exports.$msg = $msg;
            exports.$pres = $pres;
            exports.Strophe = Strophe;
            exports.b64_sha1 = b64_sha1;

            Object.defineProperty(exports, '__esModule', { value: true });

}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  throw new Error(
    'ws does not work in the browser. Browser clients must use the native ' +
      'WebSocket object'
  );
};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var conventions = __webpack_require__(57);
var dom = __webpack_require__(112)
var entities = __webpack_require__(212);
var sax = __webpack_require__(213);

var DOMImplementation = dom.DOMImplementation;

var NAMESPACE = conventions.NAMESPACE;

var ParseError = sax.ParseError;
var XMLReader = sax.XMLReader;

/**
 * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:
 *
 * > XML parsed entities are often stored in computer files which,
 * > for editing convenience, are organized into lines.
 * > These lines are typically separated by some combination
 * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).
 * >
 * > To simplify the tasks of applications, the XML processor must behave
 * > as if it normalized all line breaks in external parsed entities (including the document entity)
 * > on input, before parsing, by translating all of the following to a single #xA character:
 * >
 * > 1. the two-character sequence #xD #xA
 * > 2. the two-character sequence #xD #x85
 * > 3. the single character #x85
 * > 4. the single character #x2028
 * > 5. any #xD character that is not immediately followed by #xA or #x85.
 *
 * @param {string} input
 * @returns {string}
 */
function normalizeLineEndings(input) {
	return input
		.replace(/\r[\n\u0085]/g, '\n')
		.replace(/[\r\u0085\u2028]/g, '\n')
}

/**
 * @typedef Locator
 * @property {number} [columnNumber]
 * @property {number} [lineNumber]
 */

/**
 * @typedef DOMParserOptions
 * @property {DOMHandler} [domBuilder]
 * @property {Function} [errorHandler]
 * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing
 * 						defaults to `normalizeLineEndings`
 * @property {Locator} [locator]
 * @property {Record<string, string>} [xmlns]
 *
 * @see normalizeLineEndings
 */

/**
 * The DOMParser interface provides the ability to parse XML or HTML source code
 * from a string into a DOM `Document`.
 *
 * _xmldom is different from the spec in that it allows an `options` parameter,
 * to override the default behavior._
 *
 * @param {DOMParserOptions} [options]
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization
 */
function DOMParser(options){
	this.options = options ||{locator:{}};
}

DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var isHTML = /\/x?html?$/.test(mimeType);//mimeType.toLowerCase().indexOf('html') > -1;
  	var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}

	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(isHTML){
		defaultNSMap[''] = NAMESPACE.HTML;
	}
	defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
	var normalize = options.normalizeLineEndings || normalizeLineEndings;
	if (source && typeof source === 'string') {
		sax.parse(
			normalize(source),
			defaultNSMap,
			entityMap
		)
	} else {
		sax.errorHandler.error('invalid doc source')
	}
	return domBuilder.doc;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler
 *
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;

		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},

	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},

	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
					this.doc.doctype = dt;
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		throw new ParseError(error, this.locator);
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

exports.__DOMHandler = DOMHandler;
exports.normalizeLineEndings = normalizeLineEndings;
exports.DOMParser = DOMParser;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var freeze = __webpack_require__(57).freeze;

/**
 * The entities that are predefined in every XML document.
 *
 * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
 * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
 */
exports.XML_ENTITIES = freeze({amp:'&', apos:"'", gt:'>', lt:'<', quot:'"'})

/**
 * A map of currently 241 entities that are detected in an HTML document.
 * They contain all entries from `XML_ENTITIES`.
 *
 * @see XML_ENTITIES
 * @see DOMParser.parseFromString
 * @see DOMImplementation.prototype.createHTMLDocument
 * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
 * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
 * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
 */
exports.HTML_ENTITIES = freeze({
       lt: '<',
       gt: '>',
       amp: '&',
       quot: '"',
       apos: "'",
       Agrave: "À",
       Aacute: "Á",
       Acirc: "Â",
       Atilde: "Ã",
       Auml: "Ä",
       Aring: "Å",
       AElig: "Æ",
       Ccedil: "Ç",
       Egrave: "È",
       Eacute: "É",
       Ecirc: "Ê",
       Euml: "Ë",
       Igrave: "Ì",
       Iacute: "Í",
       Icirc: "Î",
       Iuml: "Ï",
       ETH: "Ð",
       Ntilde: "Ñ",
       Ograve: "Ò",
       Oacute: "Ó",
       Ocirc: "Ô",
       Otilde: "Õ",
       Ouml: "Ö",
       Oslash: "Ø",
       Ugrave: "Ù",
       Uacute: "Ú",
       Ucirc: "Û",
       Uuml: "Ü",
       Yacute: "Ý",
       THORN: "Þ",
       szlig: "ß",
       agrave: "à",
       aacute: "á",
       acirc: "â",
       atilde: "ã",
       auml: "ä",
       aring: "å",
       aelig: "æ",
       ccedil: "ç",
       egrave: "è",
       eacute: "é",
       ecirc: "ê",
       euml: "ë",
       igrave: "ì",
       iacute: "í",
       icirc: "î",
       iuml: "ï",
       eth: "ð",
       ntilde: "ñ",
       ograve: "ò",
       oacute: "ó",
       ocirc: "ô",
       otilde: "õ",
       ouml: "ö",
       oslash: "ø",
       ugrave: "ù",
       uacute: "ú",
       ucirc: "û",
       uuml: "ü",
       yacute: "ý",
       thorn: "þ",
       yuml: "ÿ",
       nbsp: "\u00a0",
       iexcl: "¡",
       cent: "¢",
       pound: "£",
       curren: "¤",
       yen: "¥",
       brvbar: "¦",
       sect: "§",
       uml: "¨",
       copy: "©",
       ordf: "ª",
       laquo: "«",
       not: "¬",
       shy: "­­",
       reg: "®",
       macr: "¯",
       deg: "°",
       plusmn: "±",
       sup2: "²",
       sup3: "³",
       acute: "´",
       micro: "µ",
       para: "¶",
       middot: "·",
       cedil: "¸",
       sup1: "¹",
       ordm: "º",
       raquo: "»",
       frac14: "¼",
       frac12: "½",
       frac34: "¾",
       iquest: "¿",
       times: "×",
       divide: "÷",
       forall: "∀",
       part: "∂",
       exist: "∃",
       empty: "∅",
       nabla: "∇",
       isin: "∈",
       notin: "∉",
       ni: "∋",
       prod: "∏",
       sum: "∑",
       minus: "−",
       lowast: "∗",
       radic: "√",
       prop: "∝",
       infin: "∞",
       ang: "∠",
       and: "∧",
       or: "∨",
       cap: "∩",
       cup: "∪",
       'int': "∫",
       there4: "∴",
       sim: "∼",
       cong: "≅",
       asymp: "≈",
       ne: "≠",
       equiv: "≡",
       le: "≤",
       ge: "≥",
       sub: "⊂",
       sup: "⊃",
       nsub: "⊄",
       sube: "⊆",
       supe: "⊇",
       oplus: "⊕",
       otimes: "⊗",
       perp: "⊥",
       sdot: "⋅",
       Alpha: "Α",
       Beta: "Β",
       Gamma: "Γ",
       Delta: "Δ",
       Epsilon: "Ε",
       Zeta: "Ζ",
       Eta: "Η",
       Theta: "Θ",
       Iota: "Ι",
       Kappa: "Κ",
       Lambda: "Λ",
       Mu: "Μ",
       Nu: "Ν",
       Xi: "Ξ",
       Omicron: "Ο",
       Pi: "Π",
       Rho: "Ρ",
       Sigma: "Σ",
       Tau: "Τ",
       Upsilon: "Υ",
       Phi: "Φ",
       Chi: "Χ",
       Psi: "Ψ",
       Omega: "Ω",
       alpha: "α",
       beta: "β",
       gamma: "γ",
       delta: "δ",
       epsilon: "ε",
       zeta: "ζ",
       eta: "η",
       theta: "θ",
       iota: "ι",
       kappa: "κ",
       lambda: "λ",
       mu: "μ",
       nu: "ν",
       xi: "ξ",
       omicron: "ο",
       pi: "π",
       rho: "ρ",
       sigmaf: "ς",
       sigma: "σ",
       tau: "τ",
       upsilon: "υ",
       phi: "φ",
       chi: "χ",
       psi: "ψ",
       omega: "ω",
       thetasym: "ϑ",
       upsih: "ϒ",
       piv: "ϖ",
       OElig: "Œ",
       oelig: "œ",
       Scaron: "Š",
       scaron: "š",
       Yuml: "Ÿ",
       fnof: "ƒ",
       circ: "ˆ",
       tilde: "˜",
       ensp: " ",
       emsp: " ",
       thinsp: " ",
       zwnj: "‌",
       zwj: "‍",
       lrm: "‎",
       rlm: "‏",
       ndash: "–",
       mdash: "—",
       lsquo: "‘",
       rsquo: "’",
       sbquo: "‚",
       ldquo: "“",
       rdquo: "”",
       bdquo: "„",
       dagger: "†",
       Dagger: "‡",
       bull: "•",
       hellip: "…",
       permil: "‰",
       prime: "′",
       Prime: "″",
       lsaquo: "‹",
       rsaquo: "›",
       oline: "‾",
       euro: "€",
       trade: "™",
       larr: "←",
       uarr: "↑",
       rarr: "→",
       darr: "↓",
       harr: "↔",
       crarr: "↵",
       lceil: "⌈",
       rceil: "⌉",
       lfloor: "⌊",
       rfloor: "⌋",
       loz: "◊",
       spades: "♠",
       clubs: "♣",
       hearts: "♥",
       diams: "♦"
});

/**
 * @deprecated use `HTML_ENTITIES` instead
 * @see HTML_ENTITIES
 */
exports.entityMap = exports.HTML_ENTITIES


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var NAMESPACE = __webpack_require__(57).NAMESPACE;

//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

/**
 * Creates an error that will not be caught by XMLReader aka the SAX parser.
 *
 * @param {string} message
 * @param {any?} locator Optional, can provide details about the location in the source
 * @constructor
 */
function ParseError(message, locator) {
	this.message = message
	this.locator = locator
	if(Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
}
ParseError.prototype = new Error();
ParseError.prototype.name = ParseError.name

function XMLReader(){

}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if (Object.hasOwnProperty.call(entityMap, k)) {
			return entityMap[k];
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;

	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, '');
				var config = parseStack.pop();
				if(end<0){

	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for (var prefix in localNSMap) {
							if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
								domBuilder.endPrefixMapping(prefix);
							}
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName ); // No known test case
					}
		        }else{
		        	parseStack.push(config)
		        }

				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;


				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					domBuilder.locator = locator2
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
				}

				if (NAMESPACE.isHTML(el.uri) && !el.closed) {
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				} else {
					end++;
				}
			}
		}catch(e){
			if (e instanceof ParseError) {
				throw e;
			}
			errorHandler.error('element parse error: '+e)
			end = -1;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){

	/**
	 * @param {string} qname
	 * @param {string} value
	 * @param {number} startIndex
	 */
	function addAttribute(qname, value, startIndex) {
		if (el.attributeNames.hasOwnProperty(qname)) {
			errorHandler.fatalError('Attribute ' + qname + ' redefined')
		}
		el.addValue(
			qname,
			// @see https://www.w3.org/TR/xml/#AVNormalize
			// since the xmldom sax parser does not "interpret" DTD the following is not implemented:
			// - recursive replacement of (DTD) entity references
			// - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
			value.replace(/[\t\n\r]/g, ' ').replace(/&#?\w+;/g, entityReplacer),
			startIndex
		)
	}
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName'); // No known test case
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="')
					attrName = source.slice(start,p)
				}
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start, p);
					addAttribute(attrName, value, start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start, p);
				addAttribute(attrName, value, start);
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="'); // No known test case
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
				break;
				case S_ATTR_SPACE:
					el.closed = true;
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')") // No known test case
			}
			break;
		case ''://end document
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!');
					addAttribute(attrName, value, start)
				}else{
					if(!NAMESPACE.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					}
					addAttribute(value, value, start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start, p);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					addAttribute(attrName, value, start)
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if (!NAMESPACE.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
					}
					addAttribute(attrName, attrName, start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = NAMESPACE.XMLNS
			domBuilder.startPrefixMapping(nsPrefix, value)
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = NAMESPACE.XML;
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || '']

				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for (prefix in localNSMap) {
				if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
					domBuilder.endPrefixMapping(prefix);
				}
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}

		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>')
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName)
		}
		closeMap[tagName] =pos
	}
	return pos<elStartEnd;
	//}
}

function _copy (source, target) {
	for (var n in source) {
		if (Object.prototype.hasOwnProperty.call(source, n)) {
			target[n] = source[n];
		}
	}
}

function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA()
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = false;
			var sysid = false;
			if(len>3){
				if(/^public$/i.test(matchs[2][0])){
					pubid = matchs[3][0];
					sysid = len>4 && matchs[4][0];
				}else if(/^system$/i.test(matchs[2][0])){
					sysid = matchs[3][0];
				}
			}
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name, pubid, sysid);
			domBuilder.endDTD();

			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

function ElementAttributes(){
	this.attributeNames = {}
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	addValue:function(qName, value, offset) {
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this.attributeNames[qName] = this.length;
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}



function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

exports.XMLReader = XMLReader;
exports.ParseError = ParseError;


/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shim__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__shim__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cryptlib__ = __webpack_require__(308);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_cryptlib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cryptlib__);
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1_cryptlib___default.a; });
 // accessing the root files


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global, Buffer) {/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable curly */

// This is a auto-generated file from a package to make 'cryptlib' to work in React Native

if (false) global.__dirname = "/";
if (false) global.__filename = "";
if (typeof process === "undefined") {
  global.process = __webpack_require__(5);
} else {
  const bProcess = __webpack_require__(5);
  for (var p in bProcess) {
    if (!(p in process)) {
      process[p] = bProcess[p];
    }
  }
}

process.browser = false;
if (typeof Buffer === "undefined") global.Buffer = __webpack_require__(3).Buffer;

// global.location = global.location || { port: 80 }
const isDev = typeof __DEV__ === "boolean" && __DEV__;
// eslint-disable-next-line dot-notation
// eslint-disable-next-line no-process-env
process.env["NODE_ENV"] = isDev ? "development" : "production";
if (typeof localStorage !== "undefined") {
  // eslint-disable-next-line no-undef
  localStorage.debug = isDev ? "*" : "";
}

// If using the crypto shim, uncomment the following line to ensure
// crypto is loaded first, so it can populate global.crypto
__webpack_require__(114);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(8), __webpack_require__(3).Buffer))

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 217 */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(116);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(120);
exports.Duplex = __webpack_require__(34);
exports.Transform = __webpack_require__(121);
exports.PassThrough = __webpack_require__(226);
exports.finished = __webpack_require__(76);
exports.pipeline = __webpack_require__(227);


/***/ }),
/* 220 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = __webpack_require__(3),
  Buffer = _require.Buffer;
var _require2 = __webpack_require__(222),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();

/***/ }),
/* 222 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = __webpack_require__(76);
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;
var Transform = __webpack_require__(121);
__webpack_require__(0)(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).



var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = __webpack_require__(33).codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(76);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(0)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(0)
var Sha256 = __webpack_require__(122)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(0)
var SHA512 = __webpack_require__(123)
var Hash = __webpack_require__(35)
var Buffer = __webpack_require__(2).Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = (function (){
  try {
    return __webpack_require__(58); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = __webpack_require__(124);
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(80);
exports.Duplex = __webpack_require__(28);
exports.Transform = __webpack_require__(81);
exports.PassThrough = __webpack_require__(125);


/***/ }),
/* 233 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(235);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(80)


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(81)


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(125)


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(0)
var Buffer = __webpack_require__(2).Buffer

var Base = __webpack_require__(24)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(129);


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var Buffer = __webpack_require__(2).Buffer

var checkParameters = __webpack_require__(131)
var defaultEncoding = __webpack_require__(132)
var sync = __webpack_require__(133)
var toBuffer = __webpack_require__(134)

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(243)
var aes = __webpack_require__(83)
var aesModes = __webpack_require__(84)
var desModes = __webpack_require__(256)
var ebtk = __webpack_require__(60)

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(24)
var des = __webpack_require__(244)
var inherits = __webpack_require__(0)
var Buffer = __webpack_require__(2).Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(135);
exports.Cipher = __webpack_require__(82);
exports.DES = __webpack_require__(136);
exports.CBC = __webpack_require__(245);
exports.EDE = __webpack_require__(246);


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(11);
var inherits = __webpack_require__(0);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(11);
var inherits = __webpack_require__(0);

var Cipher = __webpack_require__(82);
var DES = __webpack_require__(136);

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(84)
var AuthCipher = __webpack_require__(140)
var Buffer = __webpack_require__(2).Buffer
var StreamCipher = __webpack_require__(141)
var Transform = __webpack_require__(24)
var aes = __webpack_require__(59)
var ebtk = __webpack_require__(60)
var inherits = __webpack_require__(0)

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),
/* 248 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(49)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer
var xor = __webpack_require__(49)

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(49)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(2).Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(140)
var Buffer = __webpack_require__(2).Buffer
var MODES = __webpack_require__(84)
var StreamCipher = __webpack_require__(141)
var Transform = __webpack_require__(24)
var aes = __webpack_require__(59)
var ebtk = __webpack_require__(60)
var inherits = __webpack_require__(0)

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),
/* 256 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(142)
var primes = __webpack_require__(260)

var DH = __webpack_require__(261)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 258 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 259 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 260 */
/***/ (function(module, exports) {

module.exports = {"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(9);
var MillerRabin = __webpack_require__(143);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(142);
var randomBytes = __webpack_require__(32);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(86).Buffer;
var createHash = __webpack_require__(47);
var stream = __webpack_require__(263);
var inherits = __webpack_require__(0);
var sign = __webpack_require__(271);
var verify = __webpack_require__(302);

var algorithms = __webpack_require__(129);
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) { throw new Error('Unknown message digest'); }

  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Sign.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);

  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(hash, key, this._hashType, this._signType, this._tag);

  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) { throw new Error('Unknown message digest'); }

  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Verify.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);

  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  var sigBuffer = typeof sig === 'string' ? Buffer.from(sig, enc) : sig;

  this.end();
  var hash = this._hash.digest();
  return verify(sigBuffer, hash, key, this._signType, this._tag);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(144);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(148);
exports.Duplex = __webpack_require__(37);
exports.Transform = __webpack_require__(149);
exports.PassThrough = __webpack_require__(269);
exports.finished = __webpack_require__(87);
exports.pipeline = __webpack_require__(270);


/***/ }),
/* 264 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = __webpack_require__(3),
  Buffer = _require.Buffer;
var _require2 = __webpack_require__(266),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();

/***/ }),
/* 266 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = __webpack_require__(87);
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 268 */
/***/ (function(module, exports) {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;
var Transform = __webpack_require__(149);
__webpack_require__(0)(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).



var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = __webpack_require__(36).codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(87);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = __webpack_require__(86).Buffer;
var createHmac = __webpack_require__(127);
var crt = __webpack_require__(88);
var EC = __webpack_require__(89).ec;
var BN = __webpack_require__(155);
var parseKeys = __webpack_require__(62);
var curves = __webpack_require__(161);

var RSA_PKCS1_PADDING = 1;

function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong private key type'); }
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') { throw new Error('wrong private key type'); }
    return dsaSign(hash, priv, hashType);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong private key type'); }
  if (key.padding !== undefined && key.padding !== RSA_PKCS1_PADDING) { throw new Error('illegal or unsupported padding mode'); }

  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) { pad.push(0xff); }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) { pad.push(hash[i]); }

  var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) { throw new Error('unknown curve ' + priv.curve.join('.')); }

  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);

  return Buffer.from(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) { r = [0].concat(r); }
  if (s[0] & 0x80) { s = [0].concat(s); }

  var total = r.length + s.length + 4;
  var res = [
    0x30, total, 0x02, r.length
  ];
  res = res.concat(r, [0x02, s.length], s);
  return Buffer.from(res);
}

function getKey(x, q, hash, algo) {
  x = Buffer.from(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = Buffer.alloc(hlen);
  v.fill(1);
  var k = Buffer.alloc(hlen);
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return { k: k, v: v };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) { bits.ishrn(shift); }
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = Buffer.from(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}

function makeKey(q, kv, algo) {
  var t;
  var k;

  do {
    t = Buffer.alloc(0);

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(273).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module)))

/***/ }),
/* 273 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 274 */
/***/ (function(module, exports) {

module.exports = {"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);
var BN = __webpack_require__(9);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(61);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(61);

var utils = __webpack_require__(12);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);
var BN = __webpack_require__(9);
var inherits = __webpack_require__(0);
var Base = __webpack_require__(61);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(279);
exports.sha224 = __webpack_require__(280);
exports.sha256 = __webpack_require__(153);
exports.sha384 = __webpack_require__(281);
exports.sha512 = __webpack_require__(154);


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var common = __webpack_require__(50);
var shaCommon = __webpack_require__(152);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var SHA256 = __webpack_require__(153);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);

var SHA512 = __webpack_require__(154);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var common = __webpack_require__(50);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(16);
var assert = __webpack_require__(11);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 284 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var HmacDRBG = __webpack_require__(286);
var utils = __webpack_require__(12);
var curves = __webpack_require__(90);
var rand = __webpack_require__(85);
var assert = utils.assert;

var KeyPair = __webpack_require__(287);
var Signature = __webpack_require__(288);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(91);
var utils = __webpack_require__(150);
var assert = __webpack_require__(11);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(12);
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);

var utils = __webpack_require__(12);
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(91);
var curves = __webpack_require__(90);
var utils = __webpack_require__(12);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(290);
var Signature = __webpack_require__(291);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(12);
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 292 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(156)

exports.certificate = __webpack_require__(299)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const encoders = __webpack_require__(157);
const decoders = __webpack_require__(159);
const inherits = __webpack_require__(0);

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);

const DEREncoder = __webpack_require__(158);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(0);
const Buffer = __webpack_require__(92).Buffer;

const DERDecoder = __webpack_require__(160);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const base = exports;

base.Reporter = __webpack_require__(94).Reporter;
base.DecoderBuffer = __webpack_require__(51).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(51).EncoderBuffer;
base.Node = __webpack_require__(93);


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(95);


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(156)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 300 */
/***/ (function(module, exports) {

module.exports = {"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = __webpack_require__(60)
var ciphers = __webpack_require__(83)
var Buffer = __webpack_require__(2).Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = __webpack_require__(86).Buffer;
var BN = __webpack_require__(155);
var EC = __webpack_require__(89).ec;
var parseKeys = __webpack_require__(62);
var curves = __webpack_require__(161);

function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') { throw new Error('wrong public key type'); }
    return dsaVerify(sig, hash, pub);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }

  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum += 1;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = Buffer.from(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);

  sig = sig.redPow(new BN(pub.publicExponent));
  sig = Buffer.from(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) { out = 1; }

  i = -1;
  while (++i < len) { out |= sig[i] ^ pad[i]; }
  return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) { throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.')); }

  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;

  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q);
  return v.cmp(r) === 0;
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) { throw new Error('invalid sig'); }
  if (b.cmp(q) >= 0) { throw new Error('invalid sig'); }
}

module.exports = verify;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(89)
var BN = __webpack_require__(9)

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(305)
exports.privateDecrypt = __webpack_require__(306)

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(62)
var randomBytes = __webpack_require__(32)
var createHash = __webpack_require__(47)
var mgf = __webpack_require__(162)
var xor = __webpack_require__(163)
var BN = __webpack_require__(9)
var withPublic = __webpack_require__(164)
var crt = __webpack_require__(88)
var Buffer = __webpack_require__(2).Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(62)
var mgf = __webpack_require__(162)
var xor = __webpack_require__(163)
var BN = __webpack_require__(9)
var crt = __webpack_require__(88)
var createHash = __webpack_require__(47)
var withPublic = __webpack_require__(164)
var Buffer = __webpack_require__(2).Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(2)
var randombytes = __webpack_require__(32)
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*global console*/


Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _crypto = __webpack_require__(114);

var _crypto2 = _interopRequireDefault(_crypto);

var _bl = __webpack_require__(309);

/**
 * CrossPlatform CryptLib
   * This cross platform CryptLib uses AES 256 for encryption. This library can
   * be used for encryptoion and de-cryption of string on iOS, Android, Windows
   * and Node platform.
   * Features:
   * 1. 256 bit AES encryption
   * 2. Random IV generation.
   * 3. Provision for SHA256 hashing of key.
 */

var _bl2 = _interopRequireDefault(_bl);

var CryptLib = (function () {
  function CryptLib() {
    _classCallCheck(this, CryptLib);

    this._maxKeySize = 32;
    this._maxIVSize = 16;
    this._algorithm = 'AES-256-CBC';
    this._charset = 'utf8';
    this._encoding = 'base64';
    this._hashAlgo = 'sha256';
    this._digestEncoding = 'hex';

    this._characterMatrixForRandomIVStringGeneration = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'];
  }

  /**
   * private function: _encryptDecrypt
   * encryptes or decrypts to or from text or encrypted text given an iv and key
   * @param  {string}  text        can be plain text or encrypted text
   * @param  {string}  key         the key used to encrypt or decrypt
   * @param  {string}  initVector  the initialization vector to encrypt or
   *                               decrypt
   * @param  {bool}    isEncrypt   true = encryption, false = decryption
   * @return {string}              encryted text or plain text
   */

  _createClass(CryptLib, [{
    key: '_encryptDecrypt',
    value: function _encryptDecrypt(text, key, initVector, isEncrypt) {

      if (!text || !key) {
        throw 'cryptLib._encryptDecrypt: -> key and plain or encrypted text ' + 'required';
      }

      var ivBl = new _bl2['default'](),
          keyBl = new _bl2['default'](),
          keyCharArray = key.split(''),
          ivCharArray = [],
          encryptor = undefined,
          decryptor = undefined,
          clearText = undefined;

      if (initVector && initVector.length > 0) {
        ivCharArray = initVector.split('');
      }

      for (var i = 0; i < this._maxIVSize; i++) {
        ivBl.append(ivCharArray.shift() || [null]);
      }

      for (var i = 0; i < this._maxKeySize; i++) {
        keyBl.append(keyCharArray.shift() || [null]);
      }

      if (isEncrypt) {
        encryptor = _crypto2['default'].createCipheriv(this._algorithm, keyBl.toString(), ivBl.toString());
        encryptor.setEncoding(this._encoding);
        encryptor.write(text);
        encryptor.end();
        return encryptor.read();
      }

      decryptor = _crypto2['default'].createDecipheriv(this._algorithm, keyBl.toString(), ivBl.toString());
      var dec = decryptor.update(text, this._encoding, this._charset);
      dec += decryptor.final(this._charset);
      return dec;
    }

    /**
     * private function: _isCorrectLength
     * checks if length is preset and is a whole number and > 0
     * @param  {int}  length
     * @return {bool}
    */
  }, {
    key: '_isCorrectLength',
    value: function _isCorrectLength(length) {
      return length && /^\d+$/.test(length) && parseInt(length, 10) !== 0;
    }

    /**
     * generates random initaliztion vector given a length
     * @param  {int}  length  the length of the iv to be generated
     */
  }, {
    key: 'generateRandomIV',
    value: function generateRandomIV(length) {
      if (!this._isCorrectLength(length)) {
        throw 'cryptLib.generateRandomIV() -> needs length or in wrong format';
      }

      var randomBytes = _crypto2['default'].randomBytes(length),
          _iv = [];

      for (var i = 0; i < length; i++) {
        var ptr = randomBytes[i] % this._characterMatrixForRandomIVStringGeneration.length;
        _iv[i] = this._characterMatrixForRandomIVStringGeneration[ptr];
      }
      return _iv.join('');
    }

    /**
     * Creates a hash of a key using SHA-256 algorithm
     * @param  {string} key     the key that will be hashed
     * @param  {int}    length  the length of the SHA-256 hash
     * @return {string}         the output hash generated given a key and length
     */
  }, {
    key: 'getHashSha256',
    value: function getHashSha256(key, length) {
      if (!key) {
        throw 'cryptLib.getHashSha256() -> needs key';
      }

      if (!this._isCorrectLength(length)) {
        throw 'cryptLib.getHashSha256() -> needs length or in wrong format';
      }

      return _crypto2['default'].createHash(this._hashAlgo).update(key).digest(this._digestEncoding).substring(0, length);
    }

    /**
     * encryptes plain text given a key and initialization vector
     * @param  {string}  text        can be plain text or encrypted text
     * @param  {string}  key         the key used to encrypt or decrypt
     * @param  {string}  initVector  the initialization vector to encrypt or
     *                               decrypt
     * @return {string}              encryted text or plain text
     */
  }, {
    key: 'encrypt',
    value: function encrypt(plainText, key, initVector) {
      return this._encryptDecrypt(plainText, key, initVector, true);
    }

    /**
     * decrypts encrypted text given a key and initialization vector
     * @param  {string}  text        can be plain text or encrypted text
     * @param  {string}  key         the key used to encrypt or decrypt
     * @param  {string}  initVector  the initialization vector to encrypt or
     *                               decrypt
     * @return {string}              encryted text or plain text
     */
  }, {
    key: 'decrypt',
    value: function decrypt(encryptedText, key, initVector) {
      return this._encryptDecrypt(encryptedText, key, initVector, false);
    }
  }]);

  return CryptLib;
})();

exports['default'] = new CryptLib();
module.exports = exports['default'];

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var DuplexStream = __webpack_require__(126)
  , util         = __webpack_require__(310)

function BufferList (callback) {
  if (!(this instanceof BufferList))
    return new BufferList(callback)

  this._bufs  = []
  this.length = 0

  if (typeof callback == 'function') {
    this._callback = callback

    var piper = function (err) {
      if (this._callback) {
        this._callback(err)
        this._callback = null
      }
    }.bind(this)

    this.on('pipe', function (src) {
      src.on('error', piper)
    })
    this.on('unpipe', function (src) {
      src.removeListener('error', piper)
    })
  }
  else if (Buffer.isBuffer(callback))
    this.append(callback)
  else if (Array.isArray(callback)) {
    callback.forEach(function (b) {
      Buffer.isBuffer(b) && this.append(b)
    }.bind(this))
  }

  DuplexStream.call(this)
}

util.inherits(BufferList, DuplexStream)

BufferList.prototype._offset = function (offset) {
  var tot = 0, i = 0, _t
  for (; i < this._bufs.length; i++) {
    _t = tot + this._bufs[i].length
    if (offset < _t)
      return [ i, offset - tot ]
    tot = _t
  }
}

BufferList.prototype.append = function (buf) {
  var isBuffer = Buffer.isBuffer(buf) ||
                 buf instanceof BufferList

  this._bufs.push(isBuffer ? buf : new Buffer(buf))
  this.length += buf.length
  return this
}

BufferList.prototype._write = function (buf, encoding, callback) {
  this.append(buf)
  if (callback)
    callback()
}

BufferList.prototype._read = function (size) {
  if (!this.length)
    return this.push(null)
  size = Math.min(size, this.length)
  this.push(this.slice(0, size))
  this.consume(size)
}

BufferList.prototype.end = function (chunk) {
  DuplexStream.prototype.end.call(this, chunk)

  if (this._callback) {
    this._callback(null, this.slice())
    this._callback = null
  }
}

BufferList.prototype.get = function (index) {
  return this.slice(index, index + 1)[0]
}

BufferList.prototype.slice = function (start, end) {
  return this.copy(null, 0, start, end)
}

BufferList.prototype.copy = function (dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart != 'number' || srcStart < 0)
    srcStart = 0
  if (typeof srcEnd != 'number' || srcEnd > this.length)
    srcEnd = this.length
  if (srcStart >= this.length)
    return dst || new Buffer(0)
  if (srcEnd <= 0)
    return dst || new Buffer(0)

  var copy   = !!dst
    , off    = this._offset(srcStart)
    , len    = srcEnd - srcStart
    , bytes  = len
    , bufoff = (copy && dstStart) || 0
    , start  = off[1]
    , l
    , i

  // copy/slice everything
  if (srcStart === 0 && srcEnd == this.length) {
    if (!copy) // slice, just return a full concat
      return Buffer.concat(this._bufs)

    // copy, need to copy individual buffers
    for (i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff)
      bufoff += this._bufs[i].length
    }

    return dst
  }

  // easy, cheap case where it's a subset of one of the buffers
  if (bytes <= this._bufs[off[0]].length - start) {
    return copy
      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
      : this._bufs[off[0]].slice(start, start + bytes)
  }

  if (!copy) // a slice, we need something to copy in to
    dst = new Buffer(len)

  for (i = off[0]; i < this._bufs.length; i++) {
    l = this._bufs[i].length - start

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start)
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes)
      break
    }

    bufoff += l
    bytes -= l

    if (start)
      start = 0
  }

  return dst
}

BufferList.prototype.toString = function (encoding, start, end) {
  return this.slice(start, end).toString(encoding)
}

BufferList.prototype.consume = function (bytes) {
  while (this._bufs.length) {
    if (bytes > this._bufs[0].length) {
      bytes -= this._bufs[0].length
      this.length -= this._bufs[0].length
      this._bufs.shift()
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes)
      this.length -= bytes
      break
    }
  }
  return this
}

BufferList.prototype.duplicate = function () {
  var i = 0
    , copy = new BufferList()

  for (; i < this._bufs.length; i++)
    copy.append(this._bufs[i])

  return copy
}

BufferList.prototype.destroy = function () {
  this._bufs.length = 0;
  this.length = 0;
  this.push(null);
}

;(function () {
  var methods = {
      'readDoubleBE' : 8
    , 'readDoubleLE' : 8
    , 'readFloatBE'  : 4
    , 'readFloatLE'  : 4
    , 'readInt32BE'  : 4
    , 'readInt32LE'  : 4
    , 'readUInt32BE' : 4
    , 'readUInt32LE' : 4
    , 'readInt16BE'  : 2
    , 'readInt16LE'  : 2
    , 'readUInt16BE' : 2
    , 'readUInt16LE' : 2
    , 'readInt8'     : 1
    , 'readUInt8'    : 1
  }

  for (var m in methods) {
    (function (m) {
      BufferList.prototype[m] = function (offset) {
        return this.slice(offset, offset + methods[m])[m](0)
      }
    }(m))
  }
}())

module.exports = BufferList

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(311);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(312);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 311 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 312 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 313 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__realmDB__ = __webpack_require__(13);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };




const createOfflineAction = async params => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_1__realmDB__["a" /* getRealmDB */])();
    realm.write(() => {
      realm.create('OfflineActionTable', _extends({}, params));
    });
  } catch (error) {
    console.log('OfflineActionTable', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = createOfflineAction;


const getOfflineAction = async () => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_1__realmDB__["a" /* getRealmDB */])();
    const offlineActions = realm.objects('OfflineActionTable');
    const iqStrings = offlineActions.map(item => item.iqString);
    return JSON.parse(JSON.stringify(iqStrings));
  } catch (error) {
    console.log('getOfflineAction', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["c"] = getOfflineAction;


const deleteOfflineAction = async iqString => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_1__realmDB__["a" /* getRealmDB */])();
    const offlineAction = realm.objects('OfflineActionTable').filtered('iqString = $0', iqString);
    if (offlineAction.length) {
      realm.write(() => {
        realm.delete(offlineAction[0]);
      });
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])('Offline action not found');
    }
  } catch (error) {
    console.log('deleteOfflineAction', error);
  }
};
/* harmony export (immutable) */ __webpack_exports__["b"] = deleteOfflineAction;


const deleteOfflineActionUsingMsgId = async mid => {
  try {
    const realm = await Object(__WEBPACK_IMPORTED_MODULE_1__realmDB__["a" /* getRealmDB */])();
    const stanza = realm.objects('OfflineActionTable').filtered(`iqString CONTAINS[c] "${mid}"`);
    if (stanza.length) {
      realm.write(() => {
        realm.delete(stanza[0]);
      });
    } else {
      Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])('Offline action not found');
    }
  } catch (error) {
    console.log('deleteOfflineAction', error);
  }
};
/* unused harmony export deleteOfflineActionUsingMsgId */


/***/ }),
/* 314 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_314__;

/***/ }),
/* 315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const AvailableFeatureSchema = {
  name: 'AvailableFeatureTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    featureData: { type: 'string', default: '' } // 1: featureData
  }
};

// ConfigCredential and details
const ConfigCredentialsSchema = {
  name: 'ConfigCredentialsTable',
  primaryKey: 'key',
  properties: {
    key: { type: 'string', default: '' }, // 1: key
    value: { type: 'string', default: '' } // 2: value
  }
};

const ChatTagSchema = {
  name: 'ChatTagTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    tagname: { type: 'string', default: '' }, // 1: tagname
    taginfo: { type: 'string', default: '' }, // 2: taginfo
    memberlist: { type: 'string', default: '' }, // 3: memberlist
    currentUserJid: { type: 'string', default: '' }, // 4: recommentedTagType
    order: { type: 'int', default: 0 }, // 5: Order,
    isRecommended: { type: 'int', default: 0 } // 6: isRecommended
  }
};

const ContactMessageSchema = {
  name: 'ContactMessageTable',
  primaryKey: 'mid',
  properties: {
    mid: 'string', // 0: mid
    name: { type: 'string', default: '' }, // 1: name
    phone_number: { type: 'string?[]', default: [] }, // 2: phone_number
    active_status: { type: 'string?[]', default: [] } // 3: active_status
  }
};

const GroupUserSchema = {
  name: 'GroupUserTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    jid: { type: 'string', default: '' }, // 1: jid
    userJid: { type: 'string', default: '' }, // 2: userJid
    itemId: { type: 'string', default: '' }, // 3: itemId
    isAdmin: { type: 'string', default: '' }, // 4: isAdmin
    affilication: { type: 'string', default: '' } // 5: affilication
  }
};

const LoactionMessageSchema = {
  name: 'LocationMessageTable',
  primaryKey: 'mid',
  properties: {
    mid: 'string', // 0: mid
    latitude: { type: 'string', default: '' }, // 1: latitude
    longitude: { type: 'string', default: '' } // 2: longitude
  }
};

const MediaDetailSchema = {
  name: 'MediaDetailTable',
  primaryKey: 'mid',
  properties: {
    mid: 'string', // 0: mid
    caption: { type: 'string', default: '' }, // 1: caption
    duration: { type: 'int', default: 0 }, // 2: duration
    fileName: { type: 'string', default: '' }, // 3: fileName
    fileSize: { type: 'int', default: 0 }, // 4: fileSize
    fileType: { type: 'string', default: '' }, // 5: fileType
    fileUrl: { type: 'string', default: '' }, // 6: fileUrl
    isDownloaded: { type: 'int', default: 0 }, // 7: isDownloaded
    isUploading: { type: 'int', default: 0 }, // 8: isUploading
    localPath: { type: 'string', default: '' }, // 9: localPath
    thumbImage: { type: 'string', default: '' }, // 10: thumbImage
    webWidth: { type: 'int', default: 0 }, // 11: webWidth
    webHeight: { type: 'int', default: 0 }, // 12: webHeight
    mobileWidth: { type: 'int', default: 0 }, // 13: mobileWidth
    mobileHeight: { type: 'int', default: 0 }, // 14: mobileHeight
    progressStatus: { type: 'int', default: 0 }, // 15: progressStatus
    dataTransferred: { type: 'int', default: 0 }, // 16: dataTransferred
    isMultipleShare: { type: 'int', default: 0 }, // 17: isMultipleShare
    audioType: { type: 'string', default: '' }, // 18: audioType
    usersJIDForShare: { type: 'string', default: '' }, // 19: usersJIDForShare
    fileKey: { type: 'string', default: '' }, // 20: fileKey
    originalWidth: { type: 'int', default: 0 }, // 21: originalWidth
    originalHeight: { type: 'int', default: 0 } // 22: originalHeight
  }
};

const MessageSchema = {
  name: 'MessageTable',
  primaryKey: 'mid',
  properties: {
    groupChatSender: { type: 'string', default: '' }, // 0: groupChatSender
    chatUser: { type: 'string', default: '' }, // 1: chatUser
    msgBody: { type: 'string', default: '' }, // 2: msgBody
    mid: 'string', // 3: mid
    msgType: { type: 'string', default: '' }, // 4: msgType
    chatType: { type: 'string', default: '' }, // 5: chatType
    fromUserJid: { type: 'string', default: '' }, // 6: fromUserJid
    msgTime: { type: 'double', default: 0 }, // 7: msgTime
    status: { type: 'int', default: 3 }, // 8: status
    isCarbon: { type: 'int', default: 0 }, // 9: isCarbon
    isFavourite: { type: 'int', default: 0 }, // 10: isFavourite
    replyTo: { type: 'string', default: '' }, // 11: replyTo
    isDeleted: { type: 'int', default: 0 }, // 12: isDeleted => changes to 1 when deleteforMe and 2 when deleteForEveryone
    isRecall: { type: 'int', default: 0 }, // 13: isRecall => changes to 1 when deleteforEveryOne
    isTranslated: { type: 'int', default: 0 }, // 14: isTranslated
    translatedString: { type: 'string', default: '' }, // 15: translatedString
    broadcastMessageId: { type: 'string', default: '' }, // 16: broadcastMessageId
    publisherJid: { type: 'string', default: '' } // 17: publisherJid
  }
};

const MessageDetailSchema = {
  name: 'MessageDetailTable',
  primaryKey: 'mid',
  properties: {
    mid: 'string', // 0: mid
    message: { type: 'string', default: '' }, // 1: message
    message_type: { type: 'string', default: '' }, // 2: msgType
    replyTo: { type: 'string', default: '' }, // 3: replyTo
    mentionedUsersIds: { type: 'string', default: '' } // 4: mentionedUsersIds
  }
};

const MessageAttributesShema = {
  name: 'MessageAttributesTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    mid: 'string', // 1: mid
    key: { type: 'string', default: '' }, // 2: key
    value: { type: 'string', default: '' } // 3: value
  }
};

const MessageStatusSchema = {
  name: 'MessageStatusTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    jid: 'string', // 1: jid
    mid: 'string', // 2: mid
    broadcastMessageId: { type: 'string', default: '' }, // 3: broadcastMessageId
    chatType: { type: 'string', default: '' }, // 4: chatType
    ackTime: { type: 'double', default: 0 }, // 5: ackTime
    receivedTime: { type: 'double', default: 0 }, // 6: receivedTime
    seenTime: { type: 'double', default: 0 } // 7: seenTime
  }
};

const OfflineActionSchema = {
  name: 'OfflineActionTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    actionType: { type: 'string', default: '' }, // 1: actionType
    toJid: { type: 'string', default: '' }, // 2: actionParams
    iqString: { type: 'string', default: '' } // 3: iqString
  }
};

const OfflineReceiptSchema = {
  name: 'OfflineReceiptTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    mid: 'string', // 1: mid
    doesReceivedReceiptAcknowledged: { type: 'int', default: 0 }, // 2: doesReceivedReceiptAcknowledged
    doesSeenReceiptAcknowledged: { type: 'int', default: 0 }, // 3: doesSeenReceiptAcknowledged
    toJid: { type: 'string', default: '' } // 4: toJid
  }
};

const RecentSchema = {
  name: 'RecentTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    jid: 'string', // 1: jid
    mid: 'string', // 2: mid
    msgTime: { type: 'double', default: 0 }, // 3: msgTime
    unReadCount: { type: 'int', default: 0 }, // 4: unReadCount
    isChatPinned: { type: 'int', default: 0 }, // 5: isChatPinned
    pinnedTime: { type: 'string', default: '' }, // 6: pinnedTime
    isUnread: { type: 'int', default: 0 }, // 7: isUnread
    isArchive: { type: 'int', default: 0 }, // 8: isArchive
    isAdminBlocked: { type: 'int', default: 0 } // 9: isAdminBlocked
  }
};

const RoasterSchema = {
  name: 'RoasterTable',
  primaryKey: 'jid',
  properties: {
    jid: 'string', // 0: jid
    roasterType: { type: 'string', default: '' }, // 1: roasterType
    customTone: { type: 'string', default: '' }, // 2: customTone
    isMute: { type: 'int', default: 0 }, // 3: isMute
    isActiveType: { type: 'string', default: '' }, // 4: isActiveType
    subscription: { type: 'string', default: '' }, // 5: subscription
    isBlock: { type: 'int', default: 0 }, //6.isBlock
    isBlockedMe: { type: 'int', default: 0 }, //7.isBlock
    isAdminBlocked: { type: 'int', default: 0 }, //8.isAdminBlock
    colourCode: { type: 'string', default: '' }, //9.colourCode
    isSyncNeeded: { type: 'int', default: 0 }, //10.is synced
    isParticipantSyncNeeded: { type: 'int', default: 1 } //11.is synced needed for participants for group rosters
  }
};

const StatusSchema = {
  name: 'StatusTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    type: { type: 'string', default: '' }, //1: type
    status: { type: 'string', default: '' } //2: status
  }
};

const WebLoginShema = {
  name: 'WebLoginTable',
  primaryKey: '_id',
  properties: {
    _id: 'string', // 0: id
    qrUniqueToken: { type: 'string', default: '' }, //1: qrUniqueToken
    browserName: { type: 'string', default: '' }, //2: browserName
    osVersionName: { type: 'string', default: '' }, //3: osVersionName
    lastActiveTime: { type: 'string', default: '' } //4: lastActiveTime
  }
};

const VcardSchema = {
  name: 'VcardTable',
  primaryKey: 'jid',
  properties: {
    jid: 'string', // 0: jid
    nickName: { type: 'string', default: '' }, // 1: nickName
    image: { type: 'string', default: '' }, // 2: image
    unsentMessage: { type: 'string', default: '' }, // 3: unsentMessage
    email: { type: 'string', default: '' }, // 4: email
    grouptype: { type: 'string', default: '' }, // 5: Group type
    serverName: { type: 'string', default: '' }, // 6: serverName
    imagePrivacyFlag: { type: 'string', default: '' }, // 7: imagePrivacyFlag
    statusPrivacyFlag: { type: 'string', default: '' }, // 8: statusPrivacyFlag
    lastSeenPrivacyFlag: { type: 'string', default: '' }, // 9: lastSeenPrivacyFlag
    mobileNumberPrivacyFlag: { type: 'string', default: '' }, // 10: mobileNumberPrivacyFlag
    status: { type: 'string', default: '' }, // 11: status
    mobileNo: { type: 'string', default: '' }, // 12: mobileNo
    createdAt: { type: 'string', default: '' }, // 13: createdAt
    thumbnailImage: { type: 'string', default: '' }, // 14: thumbnailImage
    unSentMentionedUserId: { type: 'string', default: '' } // 15: unSentMentionedUserId
  }
};

const realmConfig = {
  schema: [AvailableFeatureSchema, ChatTagSchema, ContactMessageSchema, GroupUserSchema, LoactionMessageSchema, MediaDetailSchema, MessageSchema, MessageDetailSchema, MessageAttributesShema, MessageStatusSchema, OfflineActionSchema, OfflineReceiptSchema, RecentSchema, RoasterSchema, StatusSchema, VcardSchema, WebLoginShema, ConfigCredentialsSchema], // Add your schema objects here
  deleteRealmIfMigrationNeeded: true
};
/* harmony export (immutable) */ __webpack_exports__["a"] = realmConfig;


/***/ }),
/* 316 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export initSocketConnection */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__callAdapter__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__functions__ = __webpack_require__(14);





// eslint-disable-next-line @typescript-eslint/no-var-requires
const io = __webpack_require__(341);
/**
 * Initialize the socket connection & then add the socket events callback
 * @param {*} signallingServer - URL of signal
 */
function initSocketConnection(signallingServer = null) {
    try {
        if (!signallingServer) return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])('Invalid url.');
        let socket = Object(__WEBPACK_IMPORTED_MODULE_3__config__["j" /* getSocket */])();
        if (socket) socket.disconnect();
        socket = io(signallingServer);
        Object(__WEBPACK_IMPORTED_MODULE_3__config__["b" /* addOrUpdateSocket */])(socket);
        return registerSocketEvents(socket);
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_4__functions__["c" /* consoleLog */])('Initialize Socket Connection Error - ', error);
        return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
    }
}

/**
 * Register/Add the socket event handler callbacks
 * @param {*} socket - Socket Connection object
 */
function registerSocketEvents(socket) {
    try {
        if (!socket) return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])('Invalid socket connection object.');

        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["u" /* CALL_STATE_ID */], __WEBPACK_IMPORTED_MODULE_3__config__["c" /* addOrUpdateSocketId */]);
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["r" /* CALL_STATE_CREATED */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["r" /* CALL_STATE_CREATED */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["x" /* CALL_STATE_JOIN */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["x" /* CALL_STATE_JOIN */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["y" /* CALL_STATE_JOINED */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["y" /* CALL_STATE_JOINED */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["E" /* CALL_STATE_SUBSCRIBED */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["E" /* CALL_STATE_SUBSCRIBED */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["t" /* CALL_STATE_FAILURE */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["t" /* CALL_STATE_FAILURE */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["s" /* CALL_STATE_EXIT */], data => {
            data.type = __WEBPACK_IMPORTED_MODULE_1__constants__["s" /* CALL_STATE_EXIT */];
            Object(__WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */])(data);
        });
        socket.on(__WEBPACK_IMPORTED_MODULE_1__constants__["z" /* CALL_STATE_MESSAGE */], __WEBPACK_IMPORTED_MODULE_2__callAdapter__["a" /* _handleCallMessage */]);
        return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["B" /* successResponse */])();
    } catch (error) {
        Object(__WEBPACK_IMPORTED_MODULE_4__functions__["c" /* consoleLog */])('Register Socket Event Error - ', error);
        return Object(__WEBPACK_IMPORTED_MODULE_0__helpers_utils__["j" /* errorResponse */])(error.message);
    }
}

/**
 * Initialize the socket connection
 * @param {*} signallingServer
 */
const _initConnection = (signallingServer = null) => initSocketConnection(signallingServer);
/* harmony export (immutable) */ __webpack_exports__["a"] = _initConnection;


/**
 * Send message via connected  sockets
 * @param {*} message
 */
const _sendMessage = (message = {}) => {
    if (typeof message !== 'object' || !message.type) return;
    const socket = Object(__WEBPACK_IMPORTED_MODULE_3__config__["j" /* getSocket */])();
    // offer, answer, candidate & exit call state should send same name tag.
    // other types we should send in message tag.
    const tagName = [__WEBPACK_IMPORTED_MODULE_1__constants__["C" /* CALL_STATE_OFFER */], __WEBPACK_IMPORTED_MODULE_1__constants__["l" /* CALL_STATE_ANSWER */], __WEBPACK_IMPORTED_MODULE_1__constants__["q" /* CALL_STATE_CANDIDATE */], __WEBPACK_IMPORTED_MODULE_1__constants__["s" /* CALL_STATE_EXIT */]].indexOf(message.type) > -1 ? message.type.toLowerCase() : 'message';
    socket.emit(tagName, message);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = _sendMessage;


/***/ }),
/* 317 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_bind_js__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_Axios_js__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_mergeConfig_js__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__defaults_index_js__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_formDataToJSON_js__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__cancel_CanceledError_js__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__cancel_CancelToken_js__ = __webpack_require__(337);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__cancel_isCancel_js__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__env_data_js__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__helpers_toFormData_js__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_AxiosError_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__helpers_spread_js__ = __webpack_require__(338);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__helpers_isAxiosError_js__ = __webpack_require__(339);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__core_AxiosHeaders_js__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__adapters_adapters_js__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__helpers_HttpStatusCode_js__ = __webpack_require__(340);




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new __WEBPACK_IMPORTED_MODULE_2__core_Axios_js__["a" /* default */](defaultConfig);
  const instance = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_bind_js__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_2__core_Axios_js__["a" /* default */].prototype.request, context);

  // Copy axios.prototype to instance
  __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].extend(instance, __WEBPACK_IMPORTED_MODULE_2__core_Axios_js__["a" /* default */].prototype, context, {allOwnKeys: true});

  // Copy context to instance
  __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(Object(__WEBPACK_IMPORTED_MODULE_3__core_mergeConfig_js__["a" /* default */])(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(__WEBPACK_IMPORTED_MODULE_4__defaults_index_js__["a" /* default */]);

// Expose Axios class to allow class inheritance
axios.Axios = __WEBPACK_IMPORTED_MODULE_2__core_Axios_js__["a" /* default */];

// Expose Cancel & CancelToken
axios.CanceledError = __WEBPACK_IMPORTED_MODULE_6__cancel_CanceledError_js__["a" /* default */];
axios.CancelToken = __WEBPACK_IMPORTED_MODULE_7__cancel_CancelToken_js__["a" /* default */];
axios.isCancel = __WEBPACK_IMPORTED_MODULE_8__cancel_isCancel_js__["a" /* default */];
axios.VERSION = __WEBPACK_IMPORTED_MODULE_9__env_data_js__["a" /* VERSION */];
axios.toFormData = __WEBPACK_IMPORTED_MODULE_10__helpers_toFormData_js__["a" /* default */];

// Expose AxiosError class
axios.AxiosError = __WEBPACK_IMPORTED_MODULE_11__core_AxiosError_js__["a" /* default */];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __WEBPACK_IMPORTED_MODULE_12__helpers_spread_js__["a" /* default */];

// Expose isAxiosError
axios.isAxiosError = __WEBPACK_IMPORTED_MODULE_13__helpers_isAxiosError_js__["a" /* default */];

// Expose mergeConfig
axios.mergeConfig = __WEBPACK_IMPORTED_MODULE_3__core_mergeConfig_js__["a" /* default */];

axios.AxiosHeaders = __WEBPACK_IMPORTED_MODULE_14__core_AxiosHeaders_js__["a" /* default */];

axios.formToJSON = thing => Object(__WEBPACK_IMPORTED_MODULE_5__helpers_formDataToJSON_js__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = __WEBPACK_IMPORTED_MODULE_15__adapters_adapters_js__["a" /* default */].getAdapter;

axios.HttpStatusCode = __WEBPACK_IMPORTED_MODULE_16__helpers_HttpStatusCode_js__["a" /* default */];

axios.default = axios;

// this module should only have a default export
/* harmony default export */ __webpack_exports__["a"] = (axios);


/***/ }),
/* 318 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_buildURL_js__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__InterceptorManager_js__ = __webpack_require__(319);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dispatchRequest_js__ = __webpack_require__(320);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mergeConfig_js__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__buildFullPath_js__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__helpers_validator_js__ = __webpack_require__(336);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AxiosHeaders_js__ = __webpack_require__(42);











const validators = __WEBPACK_IMPORTED_MODULE_6__helpers_validator_js__["a" /* default */].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new __WEBPACK_IMPORTED_MODULE_2__InterceptorManager_js__["a" /* default */](),
      response: new __WEBPACK_IMPORTED_MODULE_2__InterceptorManager_js__["a" /* default */]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = Object(__WEBPACK_IMPORTED_MODULE_4__mergeConfig_js__["a" /* default */])(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      __WEBPACK_IMPORTED_MODULE_6__helpers_validator_js__["a" /* default */].assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        __WEBPACK_IMPORTED_MODULE_6__helpers_validator_js__["a" /* default */].assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].merge(
      headers.common,
      headers[config.method]
    );

    headers && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = __WEBPACK_IMPORTED_MODULE_7__AxiosHeaders_js__["a" /* default */].concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [__WEBPACK_IMPORTED_MODULE_3__dispatchRequest_js__["a" /* default */].bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = __WEBPACK_IMPORTED_MODULE_3__dispatchRequest_js__["a" /* default */].call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = Object(__WEBPACK_IMPORTED_MODULE_4__mergeConfig_js__["a" /* default */])(this.defaults, config);
    const fullPath = Object(__WEBPACK_IMPORTED_MODULE_5__buildFullPath_js__["a" /* default */])(config.baseURL, config.url);
    return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_buildURL_js__["a" /* default */])(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(Object(__WEBPACK_IMPORTED_MODULE_4__mergeConfig_js__["a" /* default */])(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(Object(__WEBPACK_IMPORTED_MODULE_4__mergeConfig_js__["a" /* default */])(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ __webpack_exports__["a"] = (Axios);


/***/ }),
/* 319 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ __webpack_exports__["a"] = (InterceptorManager);


/***/ }),
/* 320 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dispatchRequest;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transformData_js__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cancel_isCancel_js__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__defaults_index_js__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cancel_CanceledError_js__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_AxiosHeaders_js__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__adapters_adapters_js__ = __webpack_require__(176);









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new __WEBPACK_IMPORTED_MODULE_3__cancel_CanceledError_js__["a" /* default */](null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = __WEBPACK_IMPORTED_MODULE_4__core_AxiosHeaders_js__["a" /* default */].from(config.headers);

  // Transform request data
  config.data = __WEBPACK_IMPORTED_MODULE_0__transformData_js__["a" /* default */].call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = __WEBPACK_IMPORTED_MODULE_5__adapters_adapters_js__["a" /* default */].getAdapter(config.adapter || __WEBPACK_IMPORTED_MODULE_2__defaults_index_js__["a" /* default */].adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = __WEBPACK_IMPORTED_MODULE_0__transformData_js__["a" /* default */].call(
      config,
      config.transformResponse,
      response
    );

    response.headers = __WEBPACK_IMPORTED_MODULE_4__core_AxiosHeaders_js__["a" /* default */].from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!Object(__WEBPACK_IMPORTED_MODULE_1__cancel_isCancel_js__["a" /* default */])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = __WEBPACK_IMPORTED_MODULE_0__transformData_js__["a" /* default */].call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = __WEBPACK_IMPORTED_MODULE_4__core_AxiosHeaders_js__["a" /* default */].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}


/***/ }),
/* 321 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = transformData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defaults_index_js__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_AxiosHeaders_js__ = __webpack_require__(42);






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || __WEBPACK_IMPORTED_MODULE_1__defaults_index_js__["a" /* default */];
  const context = response || config;
  const headers = __WEBPACK_IMPORTED_MODULE_2__core_AxiosHeaders_js__["a" /* default */].from(context.headers);
  let data = context.data;

  __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}


/***/ }),
/* 322 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = toURLEncodedForm;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__toFormData_js__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__platform_index_js__ = __webpack_require__(53);






function toURLEncodedForm(data, options) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__toFormData_js__["a" /* default */])(data, new __WEBPACK_IMPORTED_MODULE_2__platform_index_js__["a" /* default */].classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (__WEBPACK_IMPORTED_MODULE_2__platform_index_js__["a" /* default */].isNode && __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}


/***/ }),
/* 323 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__classes_URLSearchParams_js__ = __webpack_require__(324);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__classes_FormData_js__ = __webpack_require__(325);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__classes_Blob_js__ = __webpack_require__(326);




/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== 'undefined' && (
    (product = navigator.product) === 'ReactNative' ||
    product === 'NativeScript' ||
    product === 'NS')
  ) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
})();

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
 const isStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();


/* harmony default export */ __webpack_exports__["a"] = ({
  isBrowser: true,
  classes: {
    URLSearchParams: __WEBPACK_IMPORTED_MODULE_0__classes_URLSearchParams_js__["a" /* default */],
    FormData: __WEBPACK_IMPORTED_MODULE_1__classes_FormData_js__["a" /* default */],
    Blob: __WEBPACK_IMPORTED_MODULE_2__classes_Blob_js__["a" /* default */]
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});


/***/ }),
/* 324 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_AxiosURLSearchParams_js__ = __webpack_require__(171);



/* harmony default export */ __webpack_exports__["a"] = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : __WEBPACK_IMPORTED_MODULE_0__helpers_AxiosURLSearchParams_js__["a" /* default */]);


/***/ }),
/* 325 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";


/* harmony default export */ __webpack_exports__["a"] = (typeof FormData !== 'undefined' ? FormData : null);


/***/ }),
/* 326 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";


/* harmony default export */ __webpack_exports__["a"] = (typeof Blob !== 'undefined' ? Blob : null);


/***/ }),
/* 327 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ __webpack_exports__["a"] = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});


/***/ }),
/* 328 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_settle_js__ = __webpack_require__(329);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_cookies_js__ = __webpack_require__(330);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_buildURL_js__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_buildFullPath_js__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_isURLSameOrigin_js__ = __webpack_require__(333);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__defaults_transitional_js__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__cancel_CanceledError_js__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__helpers_parseProtocol_js__ = __webpack_require__(334);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__platform_index_js__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__core_AxiosHeaders_js__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__helpers_speedometer_js__ = __webpack_require__(335);
















function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = Object(__WEBPACK_IMPORTED_MODULE_12__helpers_speedometer_js__["a" /* default */])(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ __webpack_exports__["a"] = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = __WEBPACK_IMPORTED_MODULE_11__core_AxiosHeaders_js__["a" /* default */].from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isFormData(requestData)) {
      if (__WEBPACK_IMPORTED_MODULE_10__platform_index_js__["a" /* default */].isStandardBrowserEnv || __WEBPACK_IMPORTED_MODULE_10__platform_index_js__["a" /* default */].isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if(!requestHeaders.getContentType(/^\s*multipart\/form-data/)){
        requestHeaders.setContentType('multipart/form-data'); // mobile/desktop app frameworks
      } else if(__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(contentType = requestHeaders.getContentType())){
        // fix semicolon duplication issue for ReactNative FormData implementation
        requestHeaders.setContentType(contentType.replace(/^\s*(multipart\/form-data);+/, '$1'))
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = Object(__WEBPACK_IMPORTED_MODULE_4__core_buildFullPath_js__["a" /* default */])(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), Object(__WEBPACK_IMPORTED_MODULE_3__helpers_buildURL_js__["a" /* default */])(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = __WEBPACK_IMPORTED_MODULE_11__core_AxiosHeaders_js__["a" /* default */].from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      Object(__WEBPACK_IMPORTED_MODULE_1__core_settle_js__["a" /* default */])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */]('Request aborted', __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */]('Network Error', __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || __WEBPACK_IMPORTED_MODULE_6__defaults_transitional_js__["a" /* default */];
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */](
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */].ETIMEDOUT : __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */].ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (__WEBPACK_IMPORTED_MODULE_10__platform_index_js__["a" /* default */].isStandardBrowserEnv) {
      // Add xsrf header
      const xsrfValue = (config.withCredentials || Object(__WEBPACK_IMPORTED_MODULE_5__helpers_isURLSameOrigin_js__["a" /* default */])(fullPath))
        && config.xsrfCookieName && __WEBPACK_IMPORTED_MODULE_2__helpers_cookies_js__["a" /* default */].read(config.xsrfCookieName);

      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new __WEBPACK_IMPORTED_MODULE_8__cancel_CanceledError_js__["a" /* default */](null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = Object(__WEBPACK_IMPORTED_MODULE_9__helpers_parseProtocol_js__["a" /* default */])(fullPath);

    if (protocol && __WEBPACK_IMPORTED_MODULE_10__platform_index_js__["a" /* default */].protocols.indexOf(protocol) === -1) {
      reject(new __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */]('Unsupported protocol ' + protocol + ':', __WEBPACK_IMPORTED_MODULE_7__core_AxiosError_js__["a" /* default */].ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});


/***/ }),
/* 329 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = settle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AxiosError_js__ = __webpack_require__(26);




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new __WEBPACK_IMPORTED_MODULE_0__AxiosError_js__["a" /* default */](
      'Request failed with status code ' + response.status,
      [__WEBPACK_IMPORTED_MODULE_0__AxiosError_js__["a" /* default */].ERR_BAD_REQUEST, __WEBPACK_IMPORTED_MODULE_0__AxiosError_js__["a" /* default */].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}


/***/ }),
/* 330 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_index_js__ = __webpack_require__(53);





/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_1__platform_index_js__["a" /* default */].isStandardBrowserEnv ?

// Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        const cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(path)) {
          cookie.push('path=' + path);
        }

        if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

// Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })());


/***/ }),
/* 331 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isAbsoluteURL;


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


/***/ }),
/* 332 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = combineURLs;


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}


/***/ }),
/* 333 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_index_js__ = __webpack_require__(53);





/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_1__platform_index_js__["a" /* default */].isStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (__WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());


/***/ }),
/* 334 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseProtocol;


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}


/***/ }),
/* 335 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (speedometer);


/***/ }),
/* 336 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__env_data_js__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__ = __webpack_require__(26);





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + __WEBPACK_IMPORTED_MODULE_0__env_data_js__["a" /* VERSION */] + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */](
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */]('options must be an object', __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */]('option ' + opt + ' must be ' + result, __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */]('Unknown option ' + opt, __WEBPACK_IMPORTED_MODULE_1__core_AxiosError_js__["a" /* default */].ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ __webpack_exports__["a"] = ({
  assertOptions,
  validators
});


/***/ }),
/* 337 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CanceledError_js__ = __webpack_require__(64);




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new __WEBPACK_IMPORTED_MODULE_0__CanceledError_js__["a" /* default */](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ __webpack_exports__["a"] = (CancelToken);


/***/ }),
/* 338 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = spread;


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}


/***/ }),
/* 339 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isAxiosError;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(7);




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return __WEBPACK_IMPORTED_MODULE_0__utils_js__["a" /* default */].isObject(payload) && (payload.isAxiosError === true);
}


/***/ }),
/* 340 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ __webpack_exports__["a"] = (HttpStatusCode);


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(342);
var parser = __webpack_require__(100);
var Manager = __webpack_require__(183);
var debug = __webpack_require__(65)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(183);
exports.Socket = __webpack_require__(189);


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(180);
var debug = __webpack_require__(65)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(344);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 344 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(346);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(347);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 347 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(181);
var isBuf = __webpack_require__(182);
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder === true) {
    var isIndexValid =
      typeof data.num === "number" &&
      data.num >= 0 &&
      data.num < buffers.length;
    if (isIndexValid) {
      return buffers[data.num]; // appropriate buffer (should be natural order anyway)
    } else {
      throw new Error("illegal attachments");
    }
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(350);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(44);


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var transports = __webpack_require__(184);
var Emitter = __webpack_require__(43);
var debug = __webpack_require__(68)('engine.io-client:socket');
var index = __webpack_require__(188);
var parser = __webpack_require__(44);
var parseuri = __webpack_require__(180);
var parseqs = __webpack_require__(66);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || undefined;
  this.key = opts.key || undefined;
  this.passphrase = opts.passphrase || undefined;
  this.cert = opts.cert || undefined;
  this.ca = opts.ca || undefined;
  this.ciphers = opts.ciphers || undefined;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(103);
Socket.transports = __webpack_require__(184);
Socket.parser = __webpack_require__(44);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};


/***/ }),
/* 351 */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(101);
var Polling = __webpack_require__(185);
var Emitter = __webpack_require__(43);
var inherit = __webpack_require__(67);
var debug = __webpack_require__(68)('engine.io-client:polling-xhr');
var globalThis = __webpack_require__(102);

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}


/***/ }),
/* 353 */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),
/* 354 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 355 */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),
/* 356 */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),
/* 357 */
/***/ (function(module, exports) {

/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it’s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};


/***/ }),
/* 358 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ }),
/* 359 */
/***/ (function(module, exports) {

/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
  false;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function(chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function(part) {
    bb.append(part);
  });

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
};

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(361);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 361 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module requirements.
 */

var Polling = __webpack_require__(185);
var inherit = __webpack_require__(67);
var globalThis = __webpack_require__(102);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    callbacks = globalThis.___eio = (globalThis.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(103);
var parser = __webpack_require__(44);
var parseqs = __webpack_require__(66);
var inherit = __webpack_require__(67);
var yeast = __webpack_require__(187);
var debug = __webpack_require__(68)('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(364);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;

  var opts = {};

  if (!this.isReactNative) {
    opts.agent = this.agent;
    opts.perMessageDeflate = this.perMessageDeflate;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
  }

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 364 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),
/* 366 */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),
/* 367 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_common_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__call_config_js__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__call_functions__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__call_initialize_js__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__janus_js__ = __webpack_require__(368);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };








let myroom = null;
let serverUrl = null;
let janusSession = null;
let callbacks = {};
let uniqueID = null;
let call = null;
let callOld = null;
let screenShare = null;
let feeds = [];
let feedsObj = {};
let mystream = null;
let mystreamScreenShare = null;
const acodec = null;
const vcodec = null;
let useAudio = true;
let useVideo = true;
let localIceState = null;
let reconnectionWaitingTimer = null;
let reconnectionScheduler = null;
let slowLinkPeers = [];
let bitrate = 512000;
let resolution = {
    "width": 1280,
    "height": 720,
    "frameRate": 24
};
const capture = "screen";
const VIDEO_ROOM_PLUGIN = "janus.plugin.videoroom";
let upscalingBitrateTimer = null;
let upscalingBitrateAndResolutionTimer = null;
let reconnectionFailCountWithActiveInternet = 0;
const audioLevelAverage = 60;
let publisherId = null;
let publisherIdOld = null;
let selectedBitRateAndVideoResultionComibination = "high1";
const bitRateAndVideoResolutionCombination = {
    high1: {
        resolution: {
            "height": 1280,
            "width": 720,
            "frameRate": 24
        },
        bitrate: 512000
    },
    high2: {
        resolution: {
            "height": 1280,
            "width": 720,
            "frameRate": 24
        },
        bitrate: 256000
    },
    std1: {
        resolution: {
            "height": 640,
            "width": 480,
            "frameRate": 20
        },
        bitrate: 256000
    },
    std2: {
        resolution: {
            "height": 640,
            "width": 480,
            "frameRate": 20
        },
        bitrate: 128000
    },
    low1: {
        resolution: {
            "height": 320,
            "width": 240,
            "frameRate": 16
        },
        bitrate: 128000
    },
    low2: {
        resolution: {
            "height": 320,
            "width": 240,
            "frameRate": 16
        },
        bitrate: 64000
    },
    low3: {
        resolution: {
            "height": 240,
            "width": 160,
            "frameRate": 14
        },
        bitrate: 64000
    }
};

const clearReconnectionScheduler = () => {
    if (reconnectionScheduler !== null) {
        clearInterval(reconnectionScheduler);
        reconnectionScheduler = null;
    }
};

const clearReconnectionWaitingTimer = () => {
    clearReconnectionScheduler();
    if (reconnectionWaitingTimer !== null) {
        clearTimeout(reconnectionWaitingTimer);
        reconnectionWaitingTimer = null;
    }
};

const initiateReconnectionWaitingTimer = () => {
    reconnectionWaitingTimer = setTimeout(() => {
        clearReconnectionWaitingTimer();
        //Send the call end callback
        callbacks.endedListener({
            uniqueId: uniqueID,
            room: myroom
        });
        if (upscalingBitrateTimer !== null) {
            clearTimeout(upscalingBitrateTimer);
            upscalingBitrateTimer = null;
        }
        if (upscalingBitrateAndResolutionTimer !== null) {
            clearTimeout(upscalingBitrateAndResolutionTimer);
            upscalingBitrateAndResolutionTimer = null;
        }
    }, 60000);
};

const publishOwnFeed = errorCallback => {
    call.createOffer({
        media: {
            audioRecv: false,
            videoRecv: false,
            audioSend: true,
            videoSend: useVideo,
            video: resolution,
            audio: {
                noiseSuppression: {
                    exact: true
                },
                echoCancellation: {
                    exact: true
                },
                googEchoCancellation: {
                    exact: true
                },
                googAutoGainControl: {
                    exact: true
                },
                googNoiseSuppression: {
                    exact: true
                }
            }
        },
        success: function (jsep) {
            const publish = {
                request: "configure",
                audio: true,
                video: true
            };
            // You can force a specific codec to use when publishing by using the
            // audiocodec and videocodec properties, for instance:
            // 		publish["audiocodec"] = "opus"
            // to force Opus as the audio codec to use, or:
            // 		publish["videocodec"] = "vp9"
            // to force VP9 as the videocodec to use. In both case, though, forcing
            // a codec will only work if: (1) the codec is actually in the SDP (and
            // so the browser supports it), and (2) the codec is in the list of
            // allowed codecs in a room. With respect to the point (2) above,
            // refer to the text in janus.plugin.videoroom.jcfg for more details.
            // We allow people to specify a codec via query string, for demo purposes
            if (acodec) publish["audiocodec"] = acodec;
            if (vcodec) publish["videocodec"] = vcodec;
            call.send({
                message: publish,
                jsep: jsep
            });
            if (!useAudio) {
                call.muteAudio();
            }
        },
        error: function (error) {
            console.error(error);
            errorCallback(error);
        }
    });
};

const startUpdatingBitrate = () => {
    if (upscalingBitrateTimer !== null) {
        clearTimeout(upscalingBitrateTimer);
        upscalingBitrateTimer = null;
    }
    upscalingBitrateTimer = setTimeout(() => {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["l" /* isAUserConnectedCall */])()) {
            console.log("#calls-adaptive-algorithm Slow link not received for past 15 seconds. So updating the configuration.");
            if (bitrate === 64000) {
                updateBitRate(128000);
                startUpdatingBitrate();
            } else if (bitrate === 128000) {
                updateBitRate(256000);
                startUpdatingBitrate();
            } else if (bitrate === 256000) {
                updateBitRate(512000);
            } else {
                console.log("#calls-adaptive-algorithm Currently using highest configuration. Unable to increase further.");
            }
            slowLinkPeers[uniqueID] = 0;
        }
    }, 30000);
};

const startUpdatingVideoResolutionAndBitRate = () => {
    if (upscalingBitrateAndResolutionTimer !== null) {
        clearTimeout(upscalingBitrateAndResolutionTimer);
        upscalingBitrateAndResolutionTimer = null;
    }
    upscalingBitrateAndResolutionTimer = setTimeout(() => {
        if (useVideo && Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["l" /* isAUserConnectedCall */])()) {
            console.log("#calls-adaptive-algorithm Slow link not received for past 15 seconds. So updating the configuration.");
            //Need to increase the bitrate and video resolution
            if (selectedBitRateAndVideoResultionComibination === "low3") {
                updateVideoStreamAndBitrate("low2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "low2") {
                updateVideoStreamAndBitrate("low1");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "low1") {
                updateVideoStreamAndBitrate("std2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "std2") {
                updateVideoStreamAndBitrate("std1");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "std1") {
                updateVideoStreamAndBitrate("high2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "high2") {
                updateVideoStreamAndBitrate("high1");
            } else {
                console.log("#calls-adaptive-algorithm Currently using highest configuration. Unable to increase further.");
            }
        } else {
            startUpdatingBitrate();
        }
        slowLinkPeers[uniqueID] = 0;
    }, 15000);
};

const newRemoteFeed = (id, display, audio, video, errorCallback) => {
    // A new feed has been published, create a new plugin handle and attach to it as a subscriber
    let remoteFeed = null;
    janusSession.attach({
        plugin: VIDEO_ROOM_PLUGIN,
        success: function (pluginHandle) {
            remoteFeed = pluginHandle;
            remoteFeed.simulcastStarted = false;
            // We wait for the plugin to send us an offer
            const subscribe = {
                request: "join",
                room: myroom,
                ptype: "subscriber",
                feed: id
            };
            // In case you don't want to receive audio, video or data, even if the
            // publisher is sending them, set the 'offer_audio', 'offer_video' or
            // 'offer_data' properties to false (they're true by default), e.g.:
            // 		subscribe["offer_video"] = false;
            // For example, if the publisher is VP8 and this is Safari, let's avoid video
            if (__WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].webRTCAdapter.browserDetails.browser === "safari" && (video === "vp9" || video === "vp8" && !__WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].safariVp8)) {
                if (video) video = video.toUpperCase();
                toastr.warning("Publisher is using " + video + ", but Safari doesn't support it: disabling video");
                subscribe["offer_video"] = false;
            }
            remoteFeed.videoCodec = video;
            remoteFeed.send({
                message: subscribe
            });
        },
        error: function (error) {
            __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error(error);
            errorCallback(error);
        },
        onmessage: function (msg, jsep) {
            const event = msg["videoroom"];
            if (event) {
                if (event === "attached") {
                    // Subscriber created and attached
                    for (let i = 1; i < Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common_js__["q" /* getMaxUsersOfCall */])() * 2; i++) {
                        if (!feeds[i]) {
                            feeds[i] = remoteFeed;
                            remoteFeed.rfindex = i;
                            break;
                        }
                    }
                    remoteFeed.rfid = msg["id"];
                    remoteFeed.rfdisplay = msg["display"];
                    feedsObj[remoteFeed.rfid] = remoteFeed;
                }
            }
            if (jsep) {
                // Answer and attach
                remoteFeed.createAnswer({
                    jsep: jsep,
                    // Add data:true here if you want to subscribe to datachannels as well
                    // (obviously only works if the publisher offered them in the first place)
                    media: {
                        audioSend: false,
                        videoSend: false
                    }, // We want recvonly audio/video
                    success: function (jsepNew) {
                        const body = {
                            request: "start",
                            room: myroom
                        };
                        remoteFeed.send({
                            message: body,
                            jsep: jsepNew
                        });
                    },
                    error: function (error) {
                        errorCallback(error);
                    }
                });
            }
        },
        iceState: function (state) {
            if (state === "connected") {
                callbacks.connectionListener({
                    status: state,
                    uniqueId: remoteFeed.rfdisplay
                });
            }
        },
        onremotestream: function (stream) {
            if (remoteFeed.rfdisplay !== uniqueID && reconnectionScheduler === null) {
                const videoTracks = stream.getVideoTracks();
                if ((!videoTracks || videoTracks.length === 0) && useVideo) {
                    callbacks.remoteStreamUnavailableListener({
                        uniqueId: remoteFeed.rfdisplay,
                        trackType: "video"
                    });
                }
                if (callbacks.remoteStreamListener !== undefined) {
                    callbacks.remoteStreamListener({
                        stream: stream,
                        uniqueId: remoteFeed.rfdisplay
                    });
                } else {
                    __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error("remoteStreamListener not configured");
                    errorCallback("remoteStreamListener not configured");
                }
            }
        },
        slowLink: function () {
            const userid = remoteFeed.rfdisplay;
            if (userid === uniqueID) {
                slowLink();
            }
        }
    });
};

const renegotiate = async () => {
    call.createOffer({
        media: {
            audioRecv: false,
            videoRecv: false,
            audioSend: true,
            replaceVideo: true,
            video: resolution,
            audio: {
                noiseSuppression: {
                    exact: true
                },
                echoCancellation: {
                    exact: true
                },
                googEchoCancellation: {
                    exact: true
                },
                googAutoGainControl: {
                    exact: true
                },
                googNoiseSuppression: {
                    exact: true
                }
            }
        },
        success: function (jsep) {
            call.send({
                message: {
                    request: "configure"
                },
                "jsep": jsep
            });
            console.log("#calls-adaptive-algorithm Updated Resolution => ", resolution);
        },
        error: function (error) {
            console.error("config error", error);
        }
    });
};

const updateBitRate = newBitrate => {
    call.send({
        message: {
            request: "configure",
            bitrate: newBitrate
        }
    });
    console.log("#calls-adaptive-algorithm Updated bitrate => ", newBitrate);
};

const updateVideoStreamAndBitrate = async videoConfiguration => {
    selectedBitRateAndVideoResultionComibination = videoConfiguration;
    const updatedResolution = bitRateAndVideoResolutionCombination[videoConfiguration].resolution;
    resolution = updatedResolution;
    const updatedBitrate = bitRateAndVideoResolutionCombination[videoConfiguration].bitrate;
    bitrate = updatedBitrate;
    renegotiate();
    updateBitRate(updatedBitrate);
};

const slowLink = () => {
    console.log("#calls-adaptive-algorithm slow-link received");
    if (slowLinkPeers[uniqueID]) {
        slowLinkPeers[uniqueID] += 1;
        startUpdatingVideoResolutionAndBitRate();
    } else {
        slowLinkPeers[uniqueID] = 1;
    }
    if (slowLinkPeers[uniqueID] > 10) {
        console.log("#calls-adaptive-algorithm Slow link received more than 10 times. So reducing the configuration.");
        if (useVideo) {
            //Need to reduce the bitrate and video resolution
            if (selectedBitRateAndVideoResultionComibination === "high1") {
                updateVideoStreamAndBitrate("high2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "high2") {
                updateVideoStreamAndBitrate("std1");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "std1") {
                updateVideoStreamAndBitrate("std2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "std2") {
                updateVideoStreamAndBitrate("low1");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "low1") {
                updateVideoStreamAndBitrate("low2");
                startUpdatingVideoResolutionAndBitRate();
            } else if (selectedBitRateAndVideoResultionComibination === "low2") {
                updateVideoStreamAndBitrate("low3");
                startUpdatingVideoResolutionAndBitRate();
            } else {
                console.log("#calls-adaptive-algorithm Currently using lowest configuration. Unable to reduce further.");
            }
        } else {
            if (bitrate === 512000) {
                updateBitRate(256000);
                startUpdatingBitrate();
            } else if (bitrate === 256000) {
                updateBitRate(128000);
                startUpdatingBitrate();
            } else if (bitrate === 128000) {
                updateBitRate(64000);
                startUpdatingBitrate();
            } else {
                console.log("#calls-adaptive-algorithm Currently using lowest configuration. Unable to reduce further.");
                startUpdatingBitrate();
            }
        }
        slowLinkPeers[uniqueID] = 0;
    }
};

const handleJoinedEvent = msg => {
    publisherId = msg["id"];
    publishOwnFeed(errorCallback);

    if (msg["publishers"]) {
        const joinedPublisherList = msg["publishers"];
        joinedPublisherList.forEach(jf => {
            const joinedId = jf["id"];
            const joinedDisplay = jf["display"];
            const joinedAudio = jf["audio_codec"];
            const joinedVideo = jf["video_codec"];
            if (joinedDisplay !== uniqueID) {
                newRemoteFeed(joinedId, joinedDisplay, joinedAudio, joinedVideo, errorCallback);
            }
        });
    }
};

const handleEventEvent = msg => {
    if (msg["publishers"]) {
        const eventPublisherList = msg["publishers"];
        eventPublisherList.forEach(jf => {
            const eventId = jf["id"];
            const eventDisplay = jf["display"];
            const eventAudio = jf["audio_codec"];
            const eventVideo = jf["video_codec"];
            if (eventDisplay !== uniqueID) {
                newRemoteFeed(eventId, eventDisplay, eventAudio, eventVideo, errorCallback);
            }
        });
    } else if (msg["leaving"]) {
        const leaving = msg["leaving"];
        let remoteFeed = null;
        feeds.forEach(feed => {
            if (feed && feed.rfid === leaving) {
                remoteFeed = feed;
            }
        });
        if (remoteFeed !== null) {
            //Need to remove the remote feed
            remoteFeed.detach();
            feeds[remoteFeed.rfindex] = null;
            feedsObj[remoteFeed.rfid] = null;
            const leavingUserJid = remoteFeed.rfdisplay;
            let havingAnotherPeerConnection = false;
            if (callbacks.endedListener !== undefined) {
                feeds.forEach(feed => {
                    if (feed && feed.rfdisplay === leavingUserJid) {
                        havingAnotherPeerConnection = true;
                    }
                });
                if (!havingAnotherPeerConnection) {
                    callbacks.endedListener({
                        room: myroom,
                        uniqueId: remoteFeed.rfdisplay
                    });
                }
            } else {
                errorCallback("endedListener not configured");
            }
        }
    } else if (msg["unpublished"]) {
        const unpublished = msg["unpublished"];
        if (unpublished === "ok") {
            // That's us
            call.hangup();
            return;
        }
    } else if (msg["error"]) {
        errorCallback(msg["error"]);
    }
};

const handleTalkingEvent = msg => {
    try {
        const feedId = msg["id"];
        const volumeLevel = msg["audio-level-dBov-avg"];
        let updatedVolume = 0;
        if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 0, 20)) {
            updatedVolume = 10;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 21, 25)) {
            updatedVolume = 9;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 26, 30)) {
            updatedVolume = 8;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 31, 35)) {
            updatedVolume = 7;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 36, 40)) {
            updatedVolume = 6;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 41, 45)) {
            updatedVolume = 5;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 46, 50)) {
            updatedVolume = 4;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 51, 55)) {
            updatedVolume = 3;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 56, 58)) {
            updatedVolume = 2;
        } else if (Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils_js__["w" /* inRange */])(volumeLevel, 58, 59)) {
            updatedVolume = 1;
        }
        const tempRemoteFeed = _extends({}, feedsObj);
        const remoteFeed = tempRemoteFeed[feedId];
        if (remoteFeed) {
            callbacks.speakingListener(remoteFeed.rfdisplay, updatedVolume, true);
        } else {
            callbacks.speakingListener(uniqueID, updatedVolume, true);
        }
    } catch (e) {
        Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("Exception occured", e);
    }
};

const handleStoppedTalkingEvent = msg => {
    try {
        const feedId = msg["id"];
        const remoteFeed = feedsObj[feedId];
        if (remoteFeed) {
            callbacks.speakingListener(remoteFeed.rfdisplay, 0, false);
        } else {
            callbacks.speakingListener(uniqueID, 0, false);
        }
    } catch (e) {
        Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("Exception occured", e);
    }
};

const errorCallback = msg => {
    console.log(msg);
};

const attachplugin = (successCallback, errorCallback) => {
    janusSession.attach({
        plugin: VIDEO_ROOM_PLUGIN,
        success: function (pluginHandle) {
            call = pluginHandle;
            successCallback("Session created and Plugin attached");
        },
        error: function (error) {
            Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("error occured", error);
            errorCallback("Error in attaching plugin");
        },
        iceState: function (state) {
            localIceState = state;
            if (localIceState === "disconnected") {
                var _getCallInfo = Object(__WEBPACK_IMPORTED_MODULE_2__call_config_js__["e" /* getCallInfo */])(),
                    _getCallInfo$behaviou = _getCallInfo.behaviour;

                let behaviour = _getCallInfo$behaviou === undefined ? "call" : _getCallInfo$behaviou;

                if (behaviour === "call" && Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["l" /* isAUserConnectedCall */])() || behaviour === "meet") {
                    initiateReconnectionWaitingTimer();
                    intiateReconnectionScheduler();
                    initiateReconnectionSignalServer();
                    callbacks.connectionListener({
                        status: localIceState,
                        uniqueId: uniqueID
                    });
                } else {
                    callbacks.endedListener({
                        uniqueId: uniqueID,
                        room: myroom
                    });
                    if (upscalingBitrateTimer !== null) {
                        clearTimeout(upscalingBitrateTimer);
                        upscalingBitrateTimer = null;
                    }
                    if (upscalingBitrateAndResolutionTimer !== null) {
                        clearTimeout(upscalingBitrateAndResolutionTimer);
                        upscalingBitrateAndResolutionTimer = null;
                    }
                }
            }
            if (localIceState === "connected") {
                if (reconnectionScheduler === null) {
                    callbacks.connectionListener({
                        status: localIceState,
                        uniqueId: uniqueID
                    });
                }
            }
        },
        onmessage: function (msg, jsep) {
            const event = msg["videoroom"];
            if (!event) {
                return;
            }

            switch (event) {
                case "joined":
                    handleJoinedEvent(msg);
                    break;
                case "destroyed":
                    // The room has been destroyed
                    break;
                case "event":
                    handleEventEvent(msg);
                    break;
                case "talking":
                    handleTalkingEvent(msg);
                    break;
                case "stopped-talking":
                    handleStoppedTalkingEvent(msg);
                    break;
                default:
                    break;
            }

            if (jsep) {
                call.handleRemoteJsep({
                    jsep: jsep
                });

                const audioCodec = msg["audio_codec"];
                if (mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audioCodec) {
                    errorCallback("Our audio stream has been rejected, viewers won't hear us");
                }

                const videoCodec = msg["video_codec"];
                if (mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !videoCodec) {
                    errorCallback("Our video stream has been rejected, viewers won't see us");
                }
            }
        },
        onlocalstream: function (stream) {
            mystream = stream;
            if (callbacks.localStreamListener !== undefined) {
                callbacks.localStreamListener({
                    stream: stream,
                    uniqueId: uniqueID
                });
            } else {
                __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error("remoteStreamListener not configured");
                errorCallback("remoteStreamListener not configured");
            }
        },
        onremotestream: function (stream) {
            // The publisher stream is sendonly, we don't expect anything here
        },
        oncleanup: function () {
            mystream = null;
        },
        slowLink: function () {
            slowLink();
        }
    });
};

const attachPlugin = (uniqueId, isAudioMute, isVideoMute, successCallback, errorCallback) => {
    useAudio = !isAudioMute;
    useVideo = !isVideoMute;
    uniqueID = uniqueId;
    if (janusSession === null || !janusSession.isConnected()) {
        createSession(serverUrl, callbacks, sucessResponse => {
            attachplugin(successCallback, errorCallback);
        }, errorResponse => {});
    } else {
        attachplugin(successCallback, errorCallback);
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = attachPlugin;


const createSession = (server, janusListeners, successCallback, errorCallback) => {
    callbacks = janusListeners;
    serverUrl = server;
    if (janusSession !== null) {
        janusSession.destroy({
            cleanupHandles: true,
            unload: true
        });
    }
    janusSession = new __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */]({
        server: server.janus,
        iceServers: server.iceServers,
        success: function (session) {
            janusSession = session;
            successCallback("Session created");
        },
        error: function (error) {
            Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("error occured", error);
            janusSession = null;
            errorCallback(error);
        },
        destroyed: function () {
            //Janus session removed
        }
    });
};

const initiateConnection = (server, janusListeners, successCallback, errorCallback) => {
    __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].init({
        callback: () => {
            if (!__WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].isWebrtcSupported()) {
                errorCallback("Webrtc not supported");
            }
            createSession(server, janusListeners, successCallback, errorCallback);
        }
    });
};
/* harmony export (immutable) */ __webpack_exports__["e"] = initiateConnection;


const createRoom = (roomId, createRoomCallback) => {
    bitrate = 512000;
    const createRoomRequest = {
        "request": "create",
        "publishers": Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common_js__["q" /* getMaxUsersOfCall */])() * 2,
        "bitrate": bitrate,
        "bitrate_cap": true,
        "is_private": false,
        "audiolevel_ext": true,
        "audiolevel_event": true,
        "audio_active_packets": 1,
        "audio_level_average": audioLevelAverage
    };
    if (roomId) {
        createRoomRequest.room = roomId;
    }
    call.send({
        message: createRoomRequest,
        success: response => {
            if (response.error_code && response.error_code === 427) {
                myroom = roomId;
            } else {
                myroom = response.room;
            }
            createRoomCallback(myroom);
        },
        error: error => {
            console.log("create room error", error);
            createRoomCallback(false);
        }
    });
};
/* harmony export (immutable) */ __webpack_exports__["b"] = createRoom;


const joinRoom = (room, joinRoomCallback) => {
    feeds = [];
    feedsObj = {};
    myroom = room;
    const joinRoomRequest = {
        request: "join",
        room: room,
        ptype: "publisher",
        display: uniqueID
    };
    call.send({
        message: joinRoomRequest,
        success: () => {
            joinRoomCallback(true);
        },
        error: error => {
            __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error(error);
            joinRoomCallback(false);
        }
    });
};
/* harmony export (immutable) */ __webpack_exports__["f"] = joinRoom;


const muteAudio = () => {
    useAudio = false;
    if (call) {
        call.muteAudio();
    }
};
/* harmony export (immutable) */ __webpack_exports__["g"] = muteAudio;


const unmuteAudio = () => {
    useAudio = true;
    if (call) {
        call.unmuteAudio();
    }
};
/* harmony export (immutable) */ __webpack_exports__["k"] = unmuteAudio;


const muteVideo = () => {
    useVideo = false;
    if (call) {
        call.muteVideo();
    }
};
/* harmony export (immutable) */ __webpack_exports__["h"] = muteVideo;


const unmuteVideo = async () => {
    useVideo = true;
    if (call) {
        call.unmuteVideo();
    }
};
/* harmony export (immutable) */ __webpack_exports__["l"] = unmuteVideo;


const destroySession = () => {
    clearTimeouts();
    slowLinkPeers = [];
    bitrate = 512000;
    resolution = {
        "width": 1280,
        "height": 720,
        "frameRate": 24
    };
    selectedBitRateAndVideoResultionComibination = "high1";
    if (call) {
        //Leaving the room
        const leave = {
            "request": "leave"
        };
        call.send({
            message: leave
        });
        call.hangup(true);
        if (janusSession !== null) {
            janusSession.destroy({
                cleanupHandles: true,
                unload: true
            });
            janusSession = null;
        }
        if (upscalingBitrateAndResolutionTimer !== null) {
            clearTimeout(upscalingBitrateAndResolutionTimer);
            upscalingBitrateAndResolutionTimer = null;
        }
        if (upscalingBitrateTimer !== null) {
            clearTimeout(upscalingBitrateTimer);
            upscalingBitrateTimer = null;
        }
    }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = destroySession;


const destroyRoom = callback => {
    const destroyRoomRequest = {
        "request": "destroy",
        "room": myroom
    };
    call.send({
        message: destroyRoomRequest,
        success: () => {
            callback(true);
        },
        error: error => {
            __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error(error);
            callback(false);
        }
    });
};
/* harmony export (immutable) */ __webpack_exports__["c"] = destroyRoom;


const unpublish = () => {
    const unpublishRequest = {
        request: "unpublish"
    };
    call.send({
        message: unpublishRequest
    });
};
/* harmony export (immutable) */ __webpack_exports__["m"] = unpublish;


const pulblishScreen = () => {
    screenShare.createOffer({
        media: {
            video: capture,
            audioSend: true,
            videoRecv: false
        }, // Screen sharing Publishers are sendonly
        success: function (jsep) {
            Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("Got publisher SDP!", jsep);
            const publish = {
                request: "configure",
                audio: false,
                video: true
            };
            screenShare.send({
                message: publish,
                jsep: jsep
            });
        },
        error: function (error) {
            Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("WebRTC error:", error);
        }
    });
};

const stopScreenShare = () => {
    screenShare.hangup();
};
/* harmony export (immutable) */ __webpack_exports__["j"] = stopScreenShare;


const attachPluginForScreenShare = (successCallback, errorCallback) => {
    janusSession.attach({
        plugin: VIDEO_ROOM_PLUGIN,
        success: function (pluginHandle) {
            screenShare = pluginHandle;
            successCallback("Session created and Plugin attached");
        },
        error: function (error) {
            __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error(error);
            errorCallback("Error in attaching plugin");
        },
        iceState: function (state) {
            localIceState = state;
        },
        onmessage: function (msg, jsep) {
            const event = msg["videoroom"];
            if (event) {
                if (event === "joined") {
                    // Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any
                    pulblishScreen();
                } else if (event === "event") {
                    if (msg["error"]) {
                        errorCallback(msg["error"]);
                    }
                }
            }
            if (jsep) {
                screenShare.handleRemoteJsep({
                    jsep: jsep
                });
            }
        },
        onlocalstream: function (stream) {
            mystreamScreenShare = stream;
            mystreamScreenShare.getVideoTracks()[0].onended = function () {
                Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("screenshare data screen share stopped", true);
                stopScreenShare();
            };
            if (callbacks.localStreamListener !== undefined) {
                callbacks.localScreenShareStreamListener({
                    stream: stream,
                    uniqueId: uniqueID
                });
            } else {
                errorCallback("localStreamListener not configured");
            }
        },
        oncleanup: function () {
            mystreamScreenShare = null;
        }
    });
};

const joinRoomForScreenShare = (room, joinRoomScreenShareCallback) => {
    feeds = [];
    feedsObj = {};
    myroom = room;
    const joinRoomRequest = {
        request: "join",
        room: room,
        ptype: "publisher",
        display: "screenshare-" + uniqueID
    };
    screenShare.send({
        message: joinRoomRequest,
        success: () => {
            joinRoomScreenShareCallback(true);
        },
        error: error => {
            __WEBPACK_IMPORTED_MODULE_5__janus_js__["a" /* default */].error(error);
            joinRoomScreenShareCallback(false);
        }
    });
};

const startScreenShare = room => {
    attachPluginForScreenShare(() => {
        Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("screenshare data plugin attached");
        joinRoomForScreenShare(room, res => {
            if (res) {
                Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("screenshare data join room success");
            } else {
                Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("screenshare data join room error");
            }
        });
    }, () => {
        Object(__WEBPACK_IMPORTED_MODULE_3__call_functions__["c" /* consoleLog */])("screenshare data unable to attach plugin");
    });
};
/* harmony export (immutable) */ __webpack_exports__["i"] = startScreenShare;


const intiateReconnectionScheduler = () => {
    reconnectionScheduler = setInterval(() => {
        callOld = call;
        publisherIdOld = publisherId;
        createSession(serverUrl, callbacks, sucessResponse => {
            attachPlugin(uniqueID, !useAudio, !useVideo, sr => {
                clearReconnectionWaitingTimer();
                reconnectionFailCountWithActiveInternet = 0;
                joinRoom(myroom, joinRoomResponse => {
                    if (joinRoomResponse && callOld) {
                        callOld.hangup();
                        if (publisherIdOld !== null) {
                            //kick the old user
                            call.send({
                                message: {
                                    "request": "kick",
                                    "room": myroom,
                                    "id": publisherIdOld
                                },
                                success: () => {},
                                error: error => {}
                            });
                        }
                    }
                });
            }, er => {});
        }, errorResponse => {
            if (navigator.onLine) {
                reconnectionFailCountWithActiveInternet += 1;
                if (reconnectionFailCountWithActiveInternet > 6) {
                    reconnectionFailCountWithActiveInternet = 0;
                    clearReconnectionWaitingTimer();
                    //Send the call end callback
                    callbacks.endedListener({
                        uniqueId: uniqueID,
                        room: myroom
                    });
                    if (upscalingBitrateTimer !== null) {
                        clearTimeout(upscalingBitrateTimer);
                        upscalingBitrateTimer = null;
                    }
                    if (upscalingBitrateAndResolutionTimer !== null) {
                        clearTimeout(upscalingBitrateAndResolutionTimer);
                        upscalingBitrateAndResolutionTimer = null;
                    }
                }
            } else {
                reconnectionFailCountWithActiveInternet = 0;
            }
        });
    }, 3000);
};

const clearTimeouts = () => {
    if (upscalingBitrateTimer !== null) {
        clearTimeout(upscalingBitrateTimer);
    }
    if (upscalingBitrateAndResolutionTimer !== null) {
        clearTimeout(upscalingBitrateAndResolutionTimer);
    }
    clearReconnectionWaitingTimer();
};

let reconnectionSignalServerTimer = null;

const initiateReconnectionSignalServer = () => {
    reconnectionSignalServerTimer = setInterval(() => {
        const ininitializeCallResponse = Object(__WEBPACK_IMPORTED_MODULE_4__call_initialize_js__["m" /* initializeCall */])(Object(__WEBPACK_IMPORTED_MODULE_0__helpers_common_js__["r" /* getSignalServerUrl */])());
        if (ininitializeCallResponse.statusCode === 200) {
            clearReconnectionSignalServerTimer();
        }
    }, 3000);
};

const clearReconnectionSignalServerTimer = () => {
    if (reconnectionSignalServerTimer !== null) {
        clearTimeout(reconnectionSignalServerTimer);
    }
};

/***/ }),
/* 368 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_webrtc_adapter__ = __webpack_require__(369);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* eslint-disable */
/*
 * Module shim for rollup.js to work with.
 * Simply re-export Janus from janus.js, the real 'magic' is in the rollup config.
 *
 * Since this counts as 'autogenerated' code, ESLint is instructed to ignore the contents of this file when linting your project.
 */

/*
	The MIT License (MIT)

	Copyright (c) 2016 Meetecho

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included
	in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
 */
// List of sessions



Janus.sessions = {};

Janus.isExtensionEnabled = function () {
	if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"] && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getDisplayMedia) {
		// No need for the extension, getDisplayMedia is supported
		return true;
	}
	if (window.navigator.userAgent.match('Chrome')) {
		var chromever = parseInt(window.navigator.userAgent.match(/Chrome\/(.*) /)[1], 10);
		var maxver = 33;
		if (window.navigator.userAgent.match('Linux')) maxver = 35; // "known" crash in chrome 34 and 35 on linux
		if (chromever >= 26 && chromever <= maxver) {
			// Older versions of Chrome don't support this extension-based approach, so lie
			return true;
		}
		return Janus.extension.isInstalled();
	} else {
		// Firefox and others, no need for the extension (but this doesn't mean it will work)
		return true;
	}
};

var defaultExtension = {
	// Screensharing Chrome Extension ID
	extensionId: 'hapfgfdkleiggjjpfpenajgdnfckjpaj',
	isInstalled: function () {
		return document.querySelector('#janus-extension-installed') !== null;
	},
	getScreen: function (callback) {
		var pending = window.setTimeout(function () {
			var error = new Error('NavigatorUserMediaError');
			error.name = 'The required Chrome extension is not installed: click <a href="#">here</a> to install it. (NOTE: this will need you to refresh the page)';
			return callback(error);
		}, 1000);
		this.cache[pending] = callback;
		window.postMessage({ type: 'janusGetScreen', id: pending }, '*');
	},
	init: function () {
		var cache = {};
		this.cache = cache;
		// Wait for events from the Chrome Extension
		window.addEventListener('message', function (event) {
			if (event.origin != window.location.origin) return;
			if (event.data.type == 'janusGotScreen' && cache[event.data.id]) {
				var callback = cache[event.data.id];
				delete cache[event.data.id];

				if (event.data.sourceId === '') {
					// user canceled
					var error = new Error('NavigatorUserMediaError');
					error.name = 'You cancelled the request for permission, giving up...';
					callback(error);
				} else {
					callback(null, event.data.sourceId);
				}
			} else if (event.data.type == 'janusGetScreenPending') {
				console.log('clearing ', event.data.id);
				window.clearTimeout(event.data.id);
			}
		});
	}
};

Janus.useDefaultDependencies = function (deps) {
	var f = deps && deps.fetch || fetch;
	var p = deps && deps.Promise || Promise;
	var socketCls = deps && deps.WebSocket || WebSocket;

	return {
		newWebSocket: function (server, proto) {
			return new socketCls(server, proto);
		},
		extension: deps && deps.extension, // || defaultExtension, not working
		isArray: function (arr) {
			return Array.isArray(arr);
		},
		webRTCAdapter: deps && deps.adapter || __WEBPACK_IMPORTED_MODULE_1_webrtc_adapter__["a" /* default */],
		httpAPICall: function (url, options) {
			var fetchOptions = {
				method: options.verb,
				headers: {
					'Accept': 'application/json, text/plain, */*'
				},
				cache: 'no-cache'
			};
			if (options.verb === "POST") {
				fetchOptions.headers['Content-Type'] = 'application/json';
			}
			if (options.withCredentials !== undefined) {
				fetchOptions.credentials = options.withCredentials === true ? 'include' : options.withCredentials ? options.withCredentials : 'omit';
			}
			if (options.body) {
				fetchOptions.body = JSON.stringify(options.body);
			}

			var fetching = f(url, fetchOptions).catch(function (error) {
				return p.reject({ message: 'Probably a network error, is the server down?', error: error });
			});

			/*
    * fetch() does not natively support timeouts.
    * Work around this by starting a timeout manually, and racing it agains the fetch() to see which thing resolves first.
    */

			if (options.timeout) {
				var timeout = new p(function (resolve, reject) {
					var timerId = setTimeout(function () {
						clearTimeout(timerId);
						return reject({ message: 'Request timed out', timeout: options.timeout });
					}, options.timeout);
				});
				fetching = p.race([fetching, timeout]);
			}

			fetching.then(function (response) {
				if (response.ok) {
					if (typeof options.success === typeof Janus.noop) {
						return response.json().then(function (parsed) {
							try {
								options.success(parsed);
							} catch (error) {
								Janus.error('Unhandled httpAPICall success callback error', error);
							}
						}, function (error) {
							return p.reject({ message: 'Failed to parse response body', error: error, response: response });
						});
					}
				} else {
					return p.reject({ message: 'API call failed', response: response });
				}
			}).catch(function (error) {
				if (typeof options.error === typeof Janus.noop) {
					options.error(error.message || '<< internal error >>', error);
				}
			});

			return fetching;
		}
	};
};

Janus.useOldDependencies = function (deps) {
	var jq = deps && deps.jQuery || jQuery;
	var socketCls = deps && deps.WebSocket || WebSocket;
	return {
		newWebSocket: function (server, proto) {
			return new socketCls(server, proto);
		},
		isArray: function (arr) {
			return jq.isArray(arr);
		},
		extension: deps && deps.extension, // || defaultExtension, not working
		webRTCAdapter: deps && deps.adapter || __WEBPACK_IMPORTED_MODULE_1_webrtc_adapter__["a" /* default */],
		httpAPICall: function (url, options) {
			var payload = options.body !== undefined ? {
				contentType: 'application/json',
				data: JSON.stringify(options.body)
			} : {};
			var credentials = options.withCredentials !== undefined ? { xhrFields: { withCredentials: options.withCredentials } } : {};

			return jq.ajax(jq.extend(payload, credentials, {
				url: url,
				type: options.verb,
				cache: false,
				dataType: 'json',
				async: options.async,
				timeout: options.timeout,
				success: function (result) {
					if (typeof options.success === typeof Janus.noop) {
						options.success(result);
					}
				},
				error: function (xhr, status, err) {
					if (typeof options.error === typeof Janus.noop) {
						options.error(status, err);
					}
				}
			}));
		}
	};
};

Janus.noop = function () {};

Janus.dataChanDefaultLabel = "JanusDataChannel";

// Note: in the future we may want to change this, e.g., as was
// attempted in https://github.com/meetecho/janus-gateway/issues/1670
Janus.endOfCandidates = null;

// Stop all tracks from a given stream
Janus.stopAllTracks = function (stream) {
	try {
		// Try a MediaStreamTrack.stop() for each track
		var tracks = stream.getTracks();
		for (var mst of tracks) {
			if (mst) {
				mst.stop();
			}
		}
	} catch (e) {
		// Do nothing if this fails
	}
};

// Initialization
Janus.init = function (options) {
	options = options || {};
	options.callback = typeof options.callback == "function" ? options.callback : Janus.noop;
	if (Janus.initDone) {
		// Already initialized
		options.callback();
	} else {
		if (typeof console == "undefined" || typeof console.log == "undefined") {
			console = { log: function () {} };
		}
		// Console logging (all debugging disabled by default)
		Janus.trace = Janus.noop;
		Janus.debug = Janus.noop;
		Janus.vdebug = Janus.noop;
		//Janus.log = Janus.noop;
		Janus.warn = Janus.noop;
		Janus.error = Janus.noop;
		if (options.debug === true || options.debug === "all") {
			// Enable all debugging levels
			Janus.trace = console.trace.bind(console);
			Janus.debug = console.debug.bind(console);
			Janus.vdebug = console.debug.bind(console);
			Janus.log = console.log.bind(console);
			Janus.warn = console.warn.bind(console);
			Janus.error = console.error.bind(console);
		} else if (Array.isArray(options.debug)) {
			for (var d of options.debug) {
				switch (d) {
					case "trace":
						Janus.trace = console.trace.bind(console);
						break;
					case "debug":
						Janus.debug = console.debug.bind(console);
						break;
					case "vdebug":
						Janus.vdebug = console.debug.bind(console);
						break;
					case "log":
						Janus.log = console.log.bind(console);
						break;
					case "warn":
						Janus.warn = console.warn.bind(console);
						break;
					case "error":
						Janus.error = console.error.bind(console);
						break;
					default:
						console.error("Unknown debugging option '" + d + "' (supported: 'trace', 'debug', 'vdebug', 'log', warn', 'error')");
						break;
				}
			}
		}
		//Janus.log("Initializing library");

		var usedDependencies = options.dependencies || Janus.useDefaultDependencies();
		Janus.isArray = usedDependencies.isArray;
		Janus.webRTCAdapter = usedDependencies.webRTCAdapter;
		Janus.httpAPICall = usedDependencies.httpAPICall;
		Janus.newWebSocket = usedDependencies.newWebSocket;
		Janus.extension = usedDependencies.extension;
		// Janus.extension.init(); not working

		// Helper method to enumerate devices
		Janus.listDevices = function (callback, config) {
			callback = typeof callback == "function" ? callback : Janus.noop;
			if (config == null) config = { audio: true, video: true };
			if (Janus.isGetUserMediaAvailable()) {
				__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia(config).then(function (stream) {
					__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].enumerateDevices().then(function (devices) {
						Janus.debug(devices);
						callback(devices);
						// Get rid of the now useless stream
						Janus.stopAllTracks(stream);
					});
				}).catch(function (err) {
					Janus.error(err);
					callback([]);
				});
			} else {
				Janus.warn("navigator.mediaDevices unavailable");
				callback([]);
			}
		};
		// Helper methods to attach/reattach a stream to a video element (previously part of adapter.js)
		Janus.attachMediaStream = function (element, stream) {
			try {
				element.srcObject = stream;
			} catch (e) {
				try {
					element.src = URL.createObjectURL(stream);
				} catch (e) {
					Janus.error("Error attaching stream to element");
				}
			}
		};
		Janus.reattachMediaStream = function (to, from) {
			try {
				to.srcObject = from.srcObject;
			} catch (e) {
				try {
					to.src = from.src;
				} catch (e) {
					Janus.error("Error reattaching stream to element");
				}
			}
		};
		// Detect tab close: make sure we don't loose existing onbeforeunload handlers
		// (note: for iOS we need to subscribe to a different event, 'pagehide', see
		// https://gist.github.com/thehunmonkgroup/6bee8941a49b86be31a787fe8f4b8cfe)
		var iOS = ['iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) >= 0;
		var eventName = iOS ? 'pagehide' : 'beforeunload';
		var oldOBF = window["on" + eventName];
		// window.addEventListener(eventName, function(event) {
		// 	//Janus.log("Closing window");
		// 	for(var s in Janus.sessions) {
		// 		if(Janus.sessions[s] && Janus.sessions[s].destroyOnUnload) {
		// 			//Janus.log("Destroying session " + s);
		// 			Janus.sessions[s].destroy({unload: true, notifyDestroyed: false});
		// 		}
		// 	}
		// 	if(oldOBF && typeof oldOBF == "function") {
		// 		oldOBF();
		// 	}
		// });
		// If this is a Safari Technology Preview, check if VP8 is supported
		Janus.safariVp8 = false;
		if (Janus.webRTCAdapter.browserDetails.browser === 'safari' && Janus.webRTCAdapter.browserDetails.version >= 605) {
			// Let's see if RTCRtpSender.getCapabilities() is there
			if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"] && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].getCapabilities && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].getCapabilities("video") && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].getCapabilities("video").codecs && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].getCapabilities("video").codecs.length) {
				for (var codec of __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].getCapabilities("video").codecs) {
					if (codec && codec.mimeType && codec.mimeType.toLowerCase() === "video/vp8") {
						Janus.safariVp8 = true;
						break;
					}
				}
				if (Janus.safariVp8) {
					//Janus.log("This version of Safari supports VP8");
				} else {
					Janus.warn("This version of Safari does NOT support VP8: if you're using a Technology Preview, " + "try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu");
				}
			} else {
				// We do it in a very ugly way, as there's no alternative...
				// We create a PeerConnection to see if VP8 is in an offer
				var testpc = new __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCPeerConnection"]({});
				testpc.createOffer({ offerToReceiveVideo: true }).then(function (offer) {
					Janus.safariVp8 = offer.sdp.indexOf("VP8") !== -1;
					if (Janus.safariVp8) {
						//Janus.log("This version of Safari supports VP8");
					} else {
						Janus.warn("This version of Safari does NOT support VP8: if you're using a Technology Preview, " + "try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu");
					}
					testpc.close();
					testpc = null;
				});
			}
		}
		// Check if this browser supports Unified Plan and transceivers
		// Based on https://codepen.io/anon/pen/ZqLwWV?editors=0010
		Janus.unifiedPlan = false;
		if (Janus.webRTCAdapter.browserDetails.browser === 'firefox' && Janus.webRTCAdapter.browserDetails.version >= 59) {
			// Firefox definitely does, starting from version 59
			Janus.unifiedPlan = true;
		} else if (Janus.webRTCAdapter.browserDetails.browser === 'chrome' && Janus.webRTCAdapter.browserDetails.version >= 72) {
			// Chrome does, but it's only usable from version 72 on
			Janus.unifiedPlan = true;
		} else if (!window.RTCRtpTransceiver || !('currentDirection' in RTCRtpTransceiver.prototype)) {
			// Safari supports addTransceiver() but not Unified Plan when
			// currentDirection is not defined (see codepen above).
			Janus.unifiedPlan = false;
		} else {
			// Check if addTransceiver() throws an exception
			var tempPc = new __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCPeerConnection"]();
			try {
				tempPc.addTransceiver('audio');
				Janus.unifiedPlan = true;
			} catch (e) {}
			tempPc.close();
		}
		Janus.initDone = true;
		options.callback();
	}
};

// Helper method to check whether WebRTC is supported by this browser
Janus.isWebrtcSupported = function () {
	// return !!window.RTCPeerConnection; // not working
	return true;
};
// Helper method to check whether devices can be accessed by this browser (e.g., not possible via plain HTTP)
Janus.isGetUserMediaAvailable = function () {
	return __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"] && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia;
};

// Helper method to create random identifiers (e.g., transaction)
Janus.randomString = function (len) {
	var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	var randomString = '';
	for (var i = 0; i < len; i++) {
		var randomPoz = Math.floor(Math.random() * charSet.length);
		randomString += charSet.substring(randomPoz, randomPoz + 1);
	}
	return randomString;
};

function Janus(gatewayCallbacks) {
	gatewayCallbacks = gatewayCallbacks || {};
	gatewayCallbacks.success = typeof gatewayCallbacks.success == "function" ? gatewayCallbacks.success : Janus.noop;
	gatewayCallbacks.error = typeof gatewayCallbacks.error == "function" ? gatewayCallbacks.error : Janus.noop;
	gatewayCallbacks.destroyed = typeof gatewayCallbacks.destroyed == "function" ? gatewayCallbacks.destroyed : Janus.noop;
	if (!Janus.initDone) {
		gatewayCallbacks.error("Library not initialized");
		return {};
	}
	if (!Janus.isWebrtcSupported()) {
		gatewayCallbacks.error("WebRTC not supported by this browser");
		return {};
	}
	//Janus.log("Library initialized: " + Janus.initDone);
	if (!gatewayCallbacks.server) {
		gatewayCallbacks.error("Invalid server url");
		return {};
	}
	var websockets = false;
	var ws = null;
	var wsHandlers = {};
	var wsKeepaliveTimeoutId = null;
	var servers = null;
	var serversIndex = 0;
	var server = gatewayCallbacks.server;
	if (Janus.isArray(server)) {
		//Janus.log("Multiple servers provided (" + server.length + "), will use the first that works");
		server = null;
		servers = gatewayCallbacks.server;
		Janus.debug(servers);
	} else {
		if (server.indexOf("ws") === 0) {
			websockets = true;
			//Janus.log("Using WebSockets to contact Janus: " + server);
		} else {
			websockets = false;
			//Janus.log("Using REST API to contact Janus: " + server);
		}
	}
	var iceServers = gatewayCallbacks.iceServers || [{ urls: "stun:stun.l.google.com:19302" }];
	var iceTransportPolicy = gatewayCallbacks.iceTransportPolicy;
	var bundlePolicy = gatewayCallbacks.bundlePolicy;
	// Whether IPv6 candidates should be gathered
	var ipv6Support = gatewayCallbacks.ipv6 === true;
	// Whether we should enable the withCredentials flag for XHR requests
	var withCredentials = false;
	if (gatewayCallbacks.withCredentials !== undefined && gatewayCallbacks.withCredentials !== null) withCredentials = gatewayCallbacks.withCredentials === true;
	// Optional max events
	var maxev = 10;
	if (gatewayCallbacks.max_poll_events !== undefined && gatewayCallbacks.max_poll_events !== null) maxev = gatewayCallbacks.max_poll_events;
	if (maxev < 1) maxev = 1;
	// Token to use (only if the token based authentication mechanism is enabled)
	var token = null;
	if (gatewayCallbacks.token !== undefined && gatewayCallbacks.token !== null) token = gatewayCallbacks.token;
	// API secret to use (only if the shared API secret is enabled)
	var apisecret = null;
	if (gatewayCallbacks.apisecret !== undefined && gatewayCallbacks.apisecret !== null) apisecret = gatewayCallbacks.apisecret;
	// Whether we should destroy this session when onbeforeunload is called
	this.destroyOnUnload = true;
	if (gatewayCallbacks.destroyOnUnload !== undefined && gatewayCallbacks.destroyOnUnload !== null) this.destroyOnUnload = gatewayCallbacks.destroyOnUnload === true;
	// Some timeout-related values
	var keepAlivePeriod = 5000;
	if (gatewayCallbacks.keepAlivePeriod !== undefined && gatewayCallbacks.keepAlivePeriod !== null) keepAlivePeriod = gatewayCallbacks.keepAlivePeriod;
	if (isNaN(keepAlivePeriod)) keepAlivePeriod = 25000;
	var longPollTimeout = 60000;
	if (gatewayCallbacks.longPollTimeout !== undefined && gatewayCallbacks.longPollTimeout !== null) longPollTimeout = gatewayCallbacks.longPollTimeout;
	if (isNaN(longPollTimeout)) longPollTimeout = 60000;

	// overrides for default maxBitrate values for simulcasting
	function getMaxBitrates(simulcastMaxBitrates) {
		var maxBitrates = {
			high: 900000,
			medium: 300000,
			low: 100000
		};

		if (simulcastMaxBitrates !== undefined && simulcastMaxBitrates !== null) {
			if (simulcastMaxBitrates.high) maxBitrates.high = simulcastMaxBitrates.high;
			if (simulcastMaxBitrates.medium) maxBitrates.medium = simulcastMaxBitrates.medium;
			if (simulcastMaxBitrates.low) maxBitrates.low = simulcastMaxBitrates.low;
		}

		return maxBitrates;
	}

	var connected = false;
	var sessionId = null;
	var pluginHandles = {};
	var that = this;
	var retries = 0;
	var transactions = {};
	createSession(gatewayCallbacks);

	// Public methods
	this.getServer = function () {
		return server;
	};
	this.isConnected = function () {
		return connected;
	};
	this.reconnect = function (callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		callbacks["reconnect"] = true;
		createSession(callbacks);
	};
	this.getSessionId = function () {
		return sessionId;
	};
	this.getInfo = function (callbacks) {
		getInfo(callbacks);
	};
	this.destroy = function (callbacks) {
		destroySession(callbacks);
	};
	this.attach = function (callbacks) {
		createHandle(callbacks);
	};

	function eventHandler() {
		if (sessionId == null) return;
		Janus.debug('Long poll...');
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			return;
		}
		var longpoll = server + "/" + sessionId + "?rid=" + new Date().getTime();
		if (maxev) longpoll = longpoll + "&maxev=" + maxev;
		if (token) longpoll = longpoll + "&token=" + encodeURIComponent(token);
		if (apisecret) longpoll = longpoll + "&apisecret=" + encodeURIComponent(apisecret);
		Janus.httpAPICall(longpoll, {
			verb: 'GET',
			withCredentials: withCredentials,
			success: handleEvent,
			timeout: longPollTimeout,
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown);
				retries++;
				if (retries > 3) {
					// Did we just lose the server? :-(
					connected = false;
					gatewayCallbacks.error("Lost connection to the server (is it down?)");
					return;
				}
				eventHandler();
			}
		});
	}

	// Private event handler: this will trigger plugin callbacks, if set
	function handleEvent(json, skipTimeout) {
		retries = 0;
		if (!websockets && sessionId !== undefined && sessionId !== null && skipTimeout !== true) eventHandler();
		if (!websockets && Janus.isArray(json)) {
			// We got an array: it means we passed a maxev > 1, iterate on all objects
			for (var i = 0; i < json.length; i++) {
				handleEvent(json[i], true);
			}
			return;
		}
		if (json["janus"] === "keepalive") {
			// Nothing happened
			Janus.vdebug("Got a keepalive on session " + sessionId);
			return;
		} else if (json["janus"] === "server_info") {
			// Just info on the Janus instance
			Janus.debug("Got info on the Janus instance");
			Janus.debug(json);
			var transaction = json["transaction"];
			if (transaction) {
				var reportSuccess = transactions[transaction];
				if (reportSuccess) reportSuccess(json);
				delete transactions[transaction];
			}
			return;
		} else if (json["janus"] === "ack") {
			// Just an ack, we can probably ignore
			Janus.debug("Got an ack on session " + sessionId);
			Janus.debug(json);
			var transaction = json["transaction"];
			if (transaction) {
				var reportSuccess = transactions[transaction];
				if (reportSuccess) reportSuccess(json);
				delete transactions[transaction];
			}
			return;
		} else if (json["janus"] === "success") {
			// Success!
			Janus.debug("Got a success on session " + sessionId);
			Janus.debug(json);
			var transaction = json["transaction"];
			if (transaction) {
				var reportSuccess = transactions[transaction];
				if (reportSuccess) reportSuccess(json);
				delete transactions[transaction];
			}
			return;
		} else if (json["janus"] === "trickle") {
			// We got a trickle candidate from Janus
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.debug("This handle is not attached to this session");
				return;
			}
			var candidate = json["candidate"];
			Janus.debug("Got a trickled candidate on session " + sessionId);
			Janus.debug(candidate);
			var config = pluginHandle.webrtcStuff;
			if (config.pc && config.remoteSdp) {
				// Add candidate right now
				Janus.debug("Adding remote candidate:", candidate);
				if (!candidate || candidate.completed === true) {
					// end-of-candidates
					config.pc.addIceCandidate(Janus.endOfCandidates);
				} else {
					// New candidate
					config.pc.addIceCandidate(candidate);
				}
			} else {
				// We didn't do setRemoteDescription (trickle got here before the offer?)
				Janus.debug("We didn't do setRemoteDescription (trickle got here before the offer?), caching candidate");
				if (!config.candidates) config.candidates = [];
				config.candidates.push(candidate);
				Janus.debug(config.candidates);
			}
		} else if (json["janus"] === "webrtcup") {
			// The PeerConnection with the server is up! Notify this
			Janus.debug("Got a webrtcup event on session " + sessionId);
			Janus.debug(json);
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.debug("This handle is not attached to this session");
				return;
			}
			pluginHandle.webrtcState(true);
			return;
		} else if (json["janus"] === "hangup") {
			// A plugin asked the core to hangup a PeerConnection on one of our handles
			Janus.debug("Got a hangup event on session " + sessionId);
			Janus.debug(json);
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.debug("This handle is not attached to this session");
				return;
			}
			pluginHandle.webrtcState(false, json["reason"]);
			pluginHandle.hangup();
		} else if (json["janus"] === "detached") {
			// A plugin asked the core to detach one of our handles
			Janus.debug("Got a detached event on session " + sessionId);
			Janus.debug(json);
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				// Don't warn here because destroyHandle causes this situation.
				return;
			}
			pluginHandle.ondetached();
			pluginHandle.detach();
		} else if (json["janus"] === "media") {
			// Media started/stopped flowing
			Janus.debug("Got a media event on session " + sessionId);
			Janus.debug(json);
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.debug("This handle is not attached to this session");
				return;
			}
			pluginHandle.mediaState(json["type"], json["receiving"]);
		} else if (json["janus"] === "slowlink") {
			Janus.debug("Got a slowlink event on session " + sessionId);
			Janus.debug(json);
			// Trouble uplink or downlink
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.debug("This handle is not attached to this session");
				return;
			}
			pluginHandle.slowLink(json["uplink"], json["lost"]);
		} else if (json["janus"] === "error") {
			// Oops, something wrong happened
			Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
			Janus.debug(json);
			var transaction = json["transaction"];
			if (transaction) {
				var reportSuccess = transactions[transaction];
				if (reportSuccess) {
					reportSuccess(json);
				}
				delete transactions[transaction];
			}
			return;
		} else if (json["janus"] === "event") {
			Janus.debug("Got a plugin event on session " + sessionId);
			Janus.debug(json);
			var sender = json["sender"];
			if (!sender) {
				Janus.warn("Missing sender...");
				return;
			}
			var plugindata = json["plugindata"];
			if (!plugindata) {
				Janus.warn("Missing plugindata...");
				return;
			}
			Janus.debug("  -- Event is coming from " + sender + " (" + plugindata["plugin"] + ")");
			var data = plugindata["data"];
			Janus.debug(data);
			var pluginHandle = pluginHandles[sender];
			if (!pluginHandle) {
				Janus.warn("This handle is not attached to this session");
				return;
			}
			var jsep = json["jsep"];
			if (jsep) {
				Janus.debug("Handling SDP as well...");
				Janus.debug(jsep);
			}
			var callback = pluginHandle.onmessage;
			if (callback) {
				Janus.debug("Notifying application...");
				// Send to callback specified when attaching plugin handle
				callback(data, jsep);
			} else {
				// Send to generic callback (?)
				Janus.debug("No provided notification callback");
			}
		} else if (json["janus"] === "timeout") {
			connected = false;
			Janus.debug(json);
			if (websockets) {
				ws.close(3504, "Gateway timeout");
			}
			return;
		} else {
			Janus.warn("Unknown message/event  '" + json["janus"] + "' on session " + sessionId);
			Janus.debug(json);
		}
	}

	// Private helper to send keep-alive messages on WebSockets
	function keepAlive() {
		if (!server || !websockets || !connected) return;
		wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);
		var request = { "janus": "keepalive", "session_id": sessionId, "transaction": Janus.randomString(12) };
		if (token) request["token"] = token;
		if (apisecret) request["apisecret"] = apisecret;
		if (ws.readyState === 1) {
			ws.send(JSON.stringify(request));
		}
	}

	// Private method to create a session
	function createSession(callbacks) {
		var transaction = Janus.randomString(12);
		var request = { "janus": "create", "transaction": transaction };
		if (callbacks["reconnect"]) {
			// We're reconnecting, claim the session
			connected = false;
			request["janus"] = "claim";
			request["session_id"] = sessionId;
			// If we were using websockets, ignore the old connection
			if (ws) {
				ws.onopen = null;
				ws.onerror = null;
				ws.onclose = null;
				if (wsKeepaliveTimeoutId) {
					clearTimeout(wsKeepaliveTimeoutId);
					wsKeepaliveTimeoutId = null;
				}
			}
		}
		if (token) request["token"] = token;
		if (apisecret) request["apisecret"] = apisecret;
		if (!server && Janus.isArray(servers)) {
			// We still need to find a working server from the list we were given
			server = servers[serversIndex];
			if (server.indexOf("ws") === 0) {
				websockets = true;
				//Janus.log("Server #" + (serversIndex+1) + ": trying WebSockets to contact Janus (" + server + ")");
			} else {
				websockets = false;
				//Janus.log("Server #" + (serversIndex+1) + ": trying REST API to contact Janus (" + server + ")");
			}
		}
		if (websockets) {
			ws = Janus.newWebSocket(server, 'janus-protocol');
			wsHandlers = {
				'error': function () {
					Janus.error("Error connecting to the Janus WebSockets server... " + server);
					if (Janus.isArray(servers) && !callbacks["reconnect"]) {
						serversIndex++;
						if (serversIndex === servers.length) {
							// We tried all the servers the user gave us and they all failed
							callbacks.error("Error connecting to any of the provided Janus servers: Is the server down?");
							return;
						}
						// Let's try the next server
						server = null;
						setTimeout(function () {
							createSession(callbacks);
						}, 200);
						return;
					}
					callbacks.error("Error connecting to the Janus WebSockets server: Is the server down?");
				},

				'open': function () {
					connected = true;
					// We need to be notified about the success
					transactions[transaction] = function (json) {
						Janus.debug(json);
						if (json["janus"] !== "success") {
							Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
							callbacks.error(json["error"].reason);
							return;
						}
						wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);
						sessionId = json["session_id"] ? json["session_id"] : json.data["id"];
						if (callbacks["reconnect"]) {
							//Janus.log("Claimed session: " + sessionId);
						} else {
								//Janus.log("Created session: " + sessionId);
							}
						callbacks.success(that);
						Janus.sessions[sessionId] = that;
					};
					ws.send(JSON.stringify(request));
				},

				'message': function (event) {
					handleEvent(JSON.parse(event.data));
				},

				'close': function () {
					if (!server || !connected) {
						return;
					}
					connected = false;
				}
			};

			for (var eventName in wsHandlers) {
				ws.addEventListener(eventName, wsHandlers[eventName]);
			}

			return;
		}
		Janus.httpAPICall(server, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				Janus.debug(json);
				if (json["janus"] !== "success") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
					callbacks.error(json["error"].reason);
					return;
				}
				connected = true;
				sessionId = json["session_id"] ? json["session_id"] : json.data["id"];
				Janus.sessions[sessionId] = that;
				eventHandler();
				callbacks.success();
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				if (Janus.isArray(servers) && !callbacks["reconnect"]) {
					serversIndex++;
					if (serversIndex === servers.length) {
						// We tried all the servers the user gave us and they all failed
						callbacks.error("Error connecting to any of the provided Janus servers: Is the server down?");
						return;
					}
					// Let's try the next server
					server = null;
					setTimeout(function () {
						createSession(callbacks);
					}, 200);
					return;
				}
				if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else callbacks.error(textStatus + ": " + errorThrown);
			}
		});
	}

	// Private method to get info on the server
	function getInfo(callbacks) {
		callbacks = callbacks || {};
		// FIXME This method triggers a success even when we fail
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		//Janus.log("Getting info on Janus instance");
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			callbacks.error("Is the server down? (connected=false)");
			return;
		}
		// We just need to send an "info" request
		var transaction = Janus.randomString(12);
		var request = { "janus": "info", "transaction": transaction };
		if (token) request["token"] = token;
		if (apisecret) request["apisecret"] = apisecret;
		if (websockets) {
			transactions[transaction] = function (json) {
				//Janus.log("Server info:");
				Janus.debug(json);
				if (json["janus"] !== "server_info") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
				}
				callbacks.success(json);
			};
			ws.send(JSON.stringify(request));
			return;
		}
		Janus.httpAPICall(server, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				//Janus.log("Server info:");
				Janus.debug(json);
				if (json["janus"] !== "server_info") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
				}
				callbacks.success(json);
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else callbacks.error(textStatus + ": " + errorThrown);
			}
		});
	}

	// Private method to destroy a session
	function destroySession(callbacks) {
		callbacks = callbacks || {};
		// FIXME This method triggers a success even when we fail
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		var unload = callbacks.unload === true;
		var notifyDestroyed = true;
		if (callbacks.notifyDestroyed !== undefined && callbacks.notifyDestroyed !== null) notifyDestroyed = callbacks.notifyDestroyed === true;
		var cleanupHandles = callbacks.cleanupHandles === true;
		//Janus.log("Destroying session " + sessionId + " (unload=" + unload + ")");
		if (!sessionId) {
			Janus.warn("No session to destroy");
			callbacks.success();
			if (notifyDestroyed) gatewayCallbacks.destroyed();
			return;
		}
		if (cleanupHandles) {
			for (var handleId in pluginHandles) destroyHandle(handleId, { noRequest: true });
		}
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			sessionId = null;
			callbacks.success();
			return;
		}
		// No need to destroy all handles first, Janus will do that itself
		var request = { "janus": "destroy", "transaction": Janus.randomString(12) };
		if (token) request["token"] = token;
		if (apisecret) request["apisecret"] = apisecret;
		if (unload) {
			// We're unloading the page: use sendBeacon for HTTP instead,
			// or just close the WebSocket connection if we're using that
			if (websockets) {
				ws.onclose = null;
				ws.close();
				ws = null;
			} else {
				navigator.sendBeacon(server + "/" + sessionId, JSON.stringify(request));
			}
			//Janus.log("Destroyed session:");
			sessionId = null;
			connected = false;
			callbacks.success();
			if (notifyDestroyed) gatewayCallbacks.destroyed();
			return;
		}
		if (websockets) {
			request["session_id"] = sessionId;

			var unbindWebSocket = function () {
				for (var eventName in wsHandlers) {
					ws.removeEventListener(eventName, wsHandlers[eventName]);
				}
				ws.removeEventListener('message', onUnbindMessage);
				ws.removeEventListener('error', onUnbindError);
				if (wsKeepaliveTimeoutId) {
					clearTimeout(wsKeepaliveTimeoutId);
				}
				ws.close();
			};

			var onUnbindMessage = function (event) {
				var data = JSON.parse(event.data);
				if (data.session_id == request.session_id && data.transaction == request.transaction) {
					unbindWebSocket();
					callbacks.success();
					if (notifyDestroyed) gatewayCallbacks.destroyed();
				}
			};
			var onUnbindError = function (event) {
				unbindWebSocket();
				callbacks.error("Failed to destroy the server: Is the server down?");
				if (notifyDestroyed) gatewayCallbacks.destroyed();
			};

			ws.addEventListener('message', onUnbindMessage);
			ws.addEventListener('error', onUnbindError);

			if (ws.readyState === 1) {
				ws.send(JSON.stringify(request));
			} else {
				onUnbindError();
			}

			return;
		}
		Janus.httpAPICall(server + "/" + sessionId, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				//Janus.log("Destroyed session:");
				Janus.debug(json);
				sessionId = null;
				connected = false;
				if (json["janus"] !== "success") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
				}
				callbacks.success();
				if (notifyDestroyed) gatewayCallbacks.destroyed();
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				// Reset everything anyway
				sessionId = null;
				connected = false;
				callbacks.success();
				if (notifyDestroyed) gatewayCallbacks.destroyed();
			}
		});
	}

	// Private method to create a plugin handle
	function createHandle(callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		callbacks.consentDialog = typeof callbacks.consentDialog == "function" ? callbacks.consentDialog : Janus.noop;
		callbacks.iceState = typeof callbacks.iceState == "function" ? callbacks.iceState : Janus.noop;
		callbacks.mediaState = typeof callbacks.mediaState == "function" ? callbacks.mediaState : Janus.noop;
		callbacks.webrtcState = typeof callbacks.webrtcState == "function" ? callbacks.webrtcState : Janus.noop;
		callbacks.slowLink = typeof callbacks.slowLink == "function" ? callbacks.slowLink : Janus.noop;
		callbacks.onmessage = typeof callbacks.onmessage == "function" ? callbacks.onmessage : Janus.noop;
		callbacks.onlocalstream = typeof callbacks.onlocalstream == "function" ? callbacks.onlocalstream : Janus.noop;
		callbacks.onremotestream = typeof callbacks.onremotestream == "function" ? callbacks.onremotestream : Janus.noop;
		callbacks.ondata = typeof callbacks.ondata == "function" ? callbacks.ondata : Janus.noop;
		callbacks.ondataopen = typeof callbacks.ondataopen == "function" ? callbacks.ondataopen : Janus.noop;
		callbacks.oncleanup = typeof callbacks.oncleanup == "function" ? callbacks.oncleanup : Janus.noop;
		callbacks.ondetached = typeof callbacks.ondetached == "function" ? callbacks.ondetached : Janus.noop;
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			callbacks.error("Is the server down? (connected=false)");
			return;
		}
		var plugin = callbacks.plugin;
		if (!plugin) {
			Janus.error("Invalid plugin");
			callbacks.error("Invalid plugin");
			return;
		}
		var opaqueId = callbacks.opaqueId;
		var handleToken = callbacks.token ? callbacks.token : token;
		var transaction = Janus.randomString(12);
		var request = { "janus": "attach", "plugin": plugin, "opaque_id": opaqueId, "transaction": transaction };
		if (handleToken) request["token"] = handleToken;
		if (apisecret) request["apisecret"] = apisecret;
		if (websockets) {
			transactions[transaction] = function (json) {
				Janus.debug(json);
				if (json["janus"] !== "success") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
					callbacks.error("Ooops: " + json["error"].code + " " + json["error"].reason);
					return;
				}
				var handleId = json.data["id"];
				//Janus.log("Created handle: " + handleId);
				var pluginHandle = {
					session: that,
					plugin: plugin,
					id: handleId,
					token: handleToken,
					detached: false,
					webrtcStuff: {
						started: false,
						myStream: null,
						streamExternal: false,
						remoteStream: null,
						mySdp: null,
						mediaConstraints: null,
						pc: null,
						dataChannel: {},
						dtmfSender: null,
						trickle: true,
						iceDone: false,
						volume: {
							value: null,
							timer: null
						},
						bitrate: {
							value: null,
							bsnow: null,
							bsbefore: null,
							tsnow: null,
							tsbefore: null,
							timer: null
						}
					},
					getId: function () {
						return handleId;
					},
					getPlugin: function () {
						return plugin;
					},
					getVolume: function () {
						return getVolume(handleId, true);
					},
					getRemoteVolume: function () {
						return getVolume(handleId, true);
					},
					getLocalVolume: function () {
						return getVolume(handleId, false);
					},
					isAudioMuted: function () {
						return isMuted(handleId, false);
					},
					muteAudio: function () {
						return mute(handleId, false, true);
					},
					unmuteAudio: function () {
						return mute(handleId, false, false);
					},
					isVideoMuted: function () {
						return isMuted(handleId, true);
					},
					muteVideo: function () {
						return mute(handleId, true, true);
					},
					unmuteVideo: function () {
						return mute(handleId, true, false);
					},
					getBitrate: function () {
						return getBitrate(handleId);
					},
					send: function (callbacks) {
						sendMessage(handleId, callbacks);
					},
					data: function (callbacks) {
						sendData(handleId, callbacks);
					},
					dtmf: function (callbacks) {
						sendDtmf(handleId, callbacks);
					},
					consentDialog: callbacks.consentDialog,
					iceState: callbacks.iceState,
					mediaState: callbacks.mediaState,
					webrtcState: callbacks.webrtcState,
					slowLink: callbacks.slowLink,
					onmessage: callbacks.onmessage,
					createOffer: function (callbacks) {
						prepareWebrtc(handleId, true, callbacks);
					},
					createAnswer: function (callbacks) {
						prepareWebrtc(handleId, false, callbacks);
					},
					handleRemoteJsep: function (callbacks) {
						prepareWebrtcPeer(handleId, callbacks);
					},
					onlocalstream: callbacks.onlocalstream,
					onremotestream: callbacks.onremotestream,
					ondata: callbacks.ondata,
					ondataopen: callbacks.ondataopen,
					oncleanup: callbacks.oncleanup,
					ondetached: callbacks.ondetached,
					hangup: function (sendRequest) {
						cleanupWebrtc(handleId, sendRequest === true);
					},
					detach: function (callbacks) {
						destroyHandle(handleId, callbacks);
					}
				};
				pluginHandles[handleId] = pluginHandle;
				callbacks.success(pluginHandle);
			};
			request["session_id"] = sessionId;
			ws.send(JSON.stringify(request));
			return;
		}
		Janus.httpAPICall(server + "/" + sessionId, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				Janus.debug(json);
				if (json["janus"] !== "success") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
					callbacks.error("Ooops: " + json["error"].code + " " + json["error"].reason);
					return;
				}
				var handleId = json.data["id"];
				//Janus.log("Created handle: " + handleId);
				var pluginHandle = {
					session: that,
					plugin: plugin,
					id: handleId,
					token: handleToken,
					detached: false,
					webrtcStuff: {
						started: false,
						myStream: null,
						streamExternal: false,
						remoteStream: null,
						mySdp: null,
						mediaConstraints: null,
						pc: null,
						dataChannel: {},
						dtmfSender: null,
						trickle: true,
						iceDone: false,
						volume: {
							value: null,
							timer: null
						},
						bitrate: {
							value: null,
							bsnow: null,
							bsbefore: null,
							tsnow: null,
							tsbefore: null,
							timer: null
						}
					},
					getId: function () {
						return handleId;
					},
					getPlugin: function () {
						return plugin;
					},
					getVolume: function () {
						return getVolume(handleId, true);
					},
					getRemoteVolume: function () {
						return getVolume(handleId, true);
					},
					getLocalVolume: function () {
						return getVolume(handleId, false);
					},
					isAudioMuted: function () {
						return isMuted(handleId, false);
					},
					muteAudio: function () {
						return mute(handleId, false, true);
					},
					unmuteAudio: function () {
						return mute(handleId, false, false);
					},
					isVideoMuted: function () {
						return isMuted(handleId, true);
					},
					muteVideo: function () {
						return mute(handleId, true, true);
					},
					unmuteVideo: function () {
						return mute(handleId, true, false);
					},
					getBitrate: function () {
						return getBitrate(handleId);
					},
					send: function (callbacks) {
						sendMessage(handleId, callbacks);
					},
					data: function (callbacks) {
						sendData(handleId, callbacks);
					},
					dtmf: function (callbacks) {
						sendDtmf(handleId, callbacks);
					},
					consentDialog: callbacks.consentDialog,
					iceState: callbacks.iceState,
					mediaState: callbacks.mediaState,
					webrtcState: callbacks.webrtcState,
					slowLink: callbacks.slowLink,
					onmessage: callbacks.onmessage,
					createOffer: function (callbacks) {
						prepareWebrtc(handleId, true, callbacks);
					},
					createAnswer: function (callbacks) {
						prepareWebrtc(handleId, false, callbacks);
					},
					handleRemoteJsep: function (callbacks) {
						prepareWebrtcPeer(handleId, callbacks);
					},
					onlocalstream: callbacks.onlocalstream,
					onremotestream: callbacks.onremotestream,
					ondata: callbacks.ondata,
					ondataopen: callbacks.ondataopen,
					oncleanup: callbacks.oncleanup,
					ondetached: callbacks.ondetached,
					hangup: function (sendRequest) {
						cleanupWebrtc(handleId, sendRequest === true);
					},
					detach: function (callbacks) {
						destroyHandle(handleId, callbacks);
					}
				};
				pluginHandles[handleId] = pluginHandle;
				callbacks.success(pluginHandle);
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				if (errorThrown === "") callbacks.error(textStatus + ": Is the server down?");else callbacks.error(textStatus + ": " + errorThrown);
			}
		});
	}

	// Private method to send a message
	function sendMessage(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			callbacks.error("Is the server down? (connected=false)");
			return;
		}
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var message = callbacks.message;
		var jsep = callbacks.jsep;
		var transaction = Janus.randomString(12);
		var request = { "janus": "message", "body": message, "transaction": transaction };
		if (pluginHandle.token) request["token"] = pluginHandle.token;
		if (apisecret) request["apisecret"] = apisecret;
		if (jsep) {
			request.jsep = {
				type: jsep.type,
				sdp: jsep.sdp
			};
			if (jsep.e2ee) request.jsep.e2ee = true;
			if (jsep.rid_order === "hml" || jsep.rid_order === "lmh") request.jsep.rid_order = jsep.rid_order;
		}
		Janus.debug("Sending message to plugin (handle=" + handleId + "):");
		Janus.debug(request);
		if (websockets) {
			request["session_id"] = sessionId;
			request["handle_id"] = handleId;
			transactions[transaction] = function (json) {
				Janus.debug("Message sent!");
				Janus.debug(json);
				if (json["janus"] === "success") {
					// We got a success, must have been a synchronous transaction
					var plugindata = json["plugindata"];
					if (!plugindata) {
						Janus.warn("Request succeeded, but missing plugindata...");
						callbacks.success();
						return;
					}
					//Janus.log("Synchronous transaction successful (" + plugindata["plugin"] + ")");
					var data = plugindata["data"];
					Janus.debug(data);
					callbacks.success(data);
					return;
				} else if (json["janus"] !== "ack") {
					// Not a success and not an ack, must be an error
					if (json["error"]) {
						Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
						callbacks.error(json["error"].code + " " + json["error"].reason);
					} else {
						Janus.error("Unknown error"); // FIXME
						callbacks.error("Unknown error");
					}
					return;
				}
				// If we got here, the plugin decided to handle the request asynchronously
				callbacks.success();
			};
			ws.send(JSON.stringify(request));
			return;
		}
		Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				Janus.debug("Message sent!");
				Janus.debug(json);
				if (json["janus"] === "success") {
					// We got a success, must have been a synchronous transaction
					var plugindata = json["plugindata"];
					if (!plugindata) {
						Janus.warn("Request succeeded, but missing plugindata...");
						callbacks.success();
						return;
					}
					//Janus.log("Synchronous transaction successful (" + plugindata["plugin"] + ")");
					var data = plugindata["data"];
					Janus.debug(data);
					callbacks.success(data);
					return;
				} else if (json["janus"] !== "ack") {
					// Not a success and not an ack, must be an error
					if (json["error"]) {
						Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
						callbacks.error(json["error"].code + " " + json["error"].reason);
					} else {
						Janus.error("Unknown error"); // FIXME
						callbacks.error("Unknown error");
					}
					return;
				}
				// If we got here, the plugin decided to handle the request asynchronously
				callbacks.success();
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				callbacks.error(textStatus + ": " + errorThrown);
			}
		});
	}

	// Private method to send a trickle candidate
	function sendTrickleCandidate(handleId, candidate) {
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			return;
		}
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return;
		}
		var request = { "janus": "trickle", "candidate": candidate, "transaction": Janus.randomString(12) };
		if (pluginHandle.token) request["token"] = pluginHandle.token;
		if (apisecret) request["apisecret"] = apisecret;
		Janus.vdebug("Sending trickle candidate (handle=" + handleId + "):");
		Janus.vdebug(request);
		if (websockets) {
			request["session_id"] = sessionId;
			request["handle_id"] = handleId;
			ws.send(JSON.stringify(request));
			return;
		}
		Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				Janus.vdebug("Candidate sent!");
				Janus.vdebug(json);
				if (json["janus"] !== "ack") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
					return;
				}
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
			}
		});
	}

	// Private method to create a data channel
	function createDataChannel(handleId, dclabel, dcprotocol, incoming, pendingData) {
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		if (!config.pc) {
			Janus.warn("Invalid PeerConnection");
			return;
		}
		var onDataChannelMessage = function (event) {
			//Janus.log('Received message on data channel:', event);
			var label = event.target.label;
			pluginHandle.ondata(event.data, label);
		};
		var onDataChannelStateChange = function (event) {
			//Janus.log('Received state change on data channel:', event);
			var label = event.target.label;
			var protocol = event.target.protocol;
			var dcState = config.dataChannel[label] ? config.dataChannel[label].readyState : "null";
			//Janus.log('State change on <' + label + '> data channel: ' + dcState);
			if (dcState === 'open') {
				// Any pending messages to send?
				if (config.dataChannel[label].pending && config.dataChannel[label].pending.length > 0) {
					//Janus.log("Sending pending messages on <" + label + ">:", config.dataChannel[label].pending.length);
					for (var data of config.dataChannel[label].pending) {
						//Janus.log("Sending data on data channel <" + label + ">");
						Janus.debug(data);
						config.dataChannel[label].send(data);
					}
					config.dataChannel[label].pending = [];
				}
				// Notify the open data channel
				pluginHandle.ondataopen(label, protocol);
			}
		};
		var onDataChannelError = function (error) {
			Janus.error('Got error on data channel:', error);
			// TODO
		};
		if (!incoming) {
			// FIXME Add options (ordered, maxRetransmits, etc.)
			var dcoptions = { ordered: true };
			if (dcprotocol) dcoptions.protocol = dcprotocol;
			config.dataChannel[dclabel] = config.pc.createDataChannel(dclabel, dcoptions);
		} else {
			// The channel was created by Janus
			config.dataChannel[dclabel] = incoming;
		}
		config.dataChannel[dclabel].onmessage = onDataChannelMessage;
		config.dataChannel[dclabel].onopen = onDataChannelStateChange;
		config.dataChannel[dclabel].onclose = onDataChannelStateChange;
		config.dataChannel[dclabel].onerror = onDataChannelError;
		config.dataChannel[dclabel].pending = [];
		if (pendingData) config.dataChannel[dclabel].pending.push(pendingData);
	}

	// Private method to send a data channel message
	function sendData(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		var data = callbacks.text || callbacks.data;
		if (!data) {
			Janus.warn("Invalid data");
			callbacks.error("Invalid data");
			return;
		}
		var label = callbacks.label ? callbacks.label : Janus.dataChanDefaultLabel;
		if (!config.dataChannel[label]) {
			// Create new data channel and wait for it to open
			createDataChannel(handleId, label, callbacks.protocol, false, data, callbacks.protocol);
			callbacks.success();
			return;
		}
		if (config.dataChannel[label].readyState !== "open") {
			config.dataChannel[label].pending.push(data);
			callbacks.success();
			return;
		}
		//Janus.log("Sending data on data channel <" + label + ">");
		Janus.debug(data);
		config.dataChannel[label].send(data);
		callbacks.success();
	}

	// Private method to send a DTMF tone
	function sendDtmf(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		if (!config.dtmfSender) {
			// Create the DTMF sender the proper way, if possible
			if (config.pc) {
				var senders = config.pc.getSenders();
				var audioSender = senders.find(function (sender) {
					return sender.track && sender.track.kind === 'audio';
				});
				if (!audioSender) {
					Janus.warn("Invalid DTMF configuration (no audio track)");
					callbacks.error("Invalid DTMF configuration (no audio track)");
					return;
				}
				config.dtmfSender = audioSender.dtmf;
				if (config.dtmfSender) {
					//Janus.log("Created DTMF Sender");
					config.dtmfSender.ontonechange = function (tone) {
						Janus.debug("Sent DTMF tone: " + tone.tone);
					};
				}
			}
			if (!config.dtmfSender) {
				Janus.warn("Invalid DTMF configuration");
				callbacks.error("Invalid DTMF configuration");
				return;
			}
		}
		var dtmf = callbacks.dtmf;
		if (!dtmf) {
			Janus.warn("Invalid DTMF parameters");
			callbacks.error("Invalid DTMF parameters");
			return;
		}
		var tones = dtmf.tones;
		if (!tones) {
			Janus.warn("Invalid DTMF string");
			callbacks.error("Invalid DTMF string");
			return;
		}
		var duration = typeof dtmf.duration === 'number' ? dtmf.duration : 500; // We choose 500ms as the default duration for a tone
		var gap = typeof dtmf.gap === 'number' ? dtmf.gap : 50; // We choose 50ms as the default gap between tones
		Janus.debug("Sending DTMF string " + tones + " (duration " + duration + "ms, gap " + gap + "ms)");
		config.dtmfSender.insertDTMF(tones, duration, gap);
		callbacks.success();
	}

	// Private method to destroy a plugin handle
	function destroyHandle(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		var noRequest = callbacks.noRequest === true;
		//Janus.log("Destroying handle " + handleId + " (only-locally=" + noRequest + ")");
		cleanupWebrtc(handleId);
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || pluginHandle.detached) {
			// Plugin was already detached by Janus, calling detach again will return a handle not found error, so just exit here
			delete pluginHandles[handleId];
			callbacks.success();
			return;
		}
		pluginHandle.detached = true;
		if (noRequest) {
			// We're only removing the handle locally
			delete pluginHandles[handleId];
			callbacks.success();
			return;
		}
		if (!connected) {
			Janus.warn("Is the server down? (connected=false)");
			callbacks.error("Is the server down? (connected=false)");
			return;
		}
		var request = { "janus": "detach", "transaction": Janus.randomString(12) };
		if (pluginHandle.token) request["token"] = pluginHandle.token;
		if (apisecret) request["apisecret"] = apisecret;
		if (websockets) {
			request["session_id"] = sessionId;
			request["handle_id"] = handleId;
			ws.send(JSON.stringify(request));
			delete pluginHandles[handleId];
			callbacks.success();
			return;
		}
		Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
			verb: 'POST',
			withCredentials: withCredentials,
			body: request,
			success: function (json) {
				//Janus.log("Destroyed handle:");
				Janus.debug(json);
				if (json["janus"] !== "success") {
					Janus.error("Ooops: " + json["error"].code + " " + json["error"].reason); // FIXME
				}
				delete pluginHandles[handleId];
				callbacks.success();
			},
			error: function (textStatus, errorThrown) {
				Janus.error(textStatus + ":", errorThrown); // FIXME
				// We cleanup anyway
				delete pluginHandles[handleId];
				callbacks.success();
			}
		});
	}

	// WebRTC stuff
	function streamsDone(handleId, jsep, media, callbacks, stream) {
		if (sessionId == null) {
			Janus.stopAllTracks(stream);
			return;
		}
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			// Close all tracks if the given stream has been created internally
			if (!callbacks.stream) {
				Janus.stopAllTracks(stream);
			}
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		Janus.debug("streamsDone:", stream);
		if (stream) {
			Janus.debug("  -- Audio tracks:", stream.getAudioTracks());
			Janus.debug("  -- Video tracks:", stream.getVideoTracks());
		}
		// We're now capturing the new stream: check if we're updating or if it's a new thing
		var addTracks = false;
		if (!config.myStream || !media.update || config.streamExternal && !media.replaceAudio && !media.replaceVideo) {
			config.myStream = stream;
			addTracks = true;
		} else {
			// We only need to update the existing stream
			if ((!media.update && isAudioSendEnabled(media) || media.update && (media.addAudio || media.replaceAudio)) && stream.getAudioTracks() && stream.getAudioTracks().length) {
				config.myStream.addTrack(stream.getAudioTracks()[0]);
				if (Janus.unifiedPlan) {
					// Use Transceivers
					//Janus.log((media.replaceAudio ? "Replacing" : "Adding") + " audio track:", stream.getAudioTracks()[0]);
					var audioTransceiver = null;
					var transceivers = config.pc.getTransceivers();
					if (transceivers && transceivers.length > 0) {
						for (var t of transceivers) {
							if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
								audioTransceiver = t;
								break;
							}
						}
					}
					if (audioTransceiver && audioTransceiver.sender) {
						audioTransceiver.sender.replaceTrack(stream.getAudioTracks()[0]);
					} else {
						config.pc.addTrack(stream.getAudioTracks()[0], stream);
					}
				} else {
					//Janus.log((media.replaceAudio ? "Replacing" : "Adding") + " audio track:", stream.getAudioTracks()[0]);
					config.pc.addTrack(stream.getAudioTracks()[0], stream);
				}
			}
			if ((!media.update && isVideoSendEnabled(media) || media.update && (media.addVideo || media.replaceVideo)) && stream.getVideoTracks() && stream.getVideoTracks().length) {
				config.myStream.addTrack(stream.getVideoTracks()[0]);
				if (Janus.unifiedPlan) {
					// Use Transceivers
					//Janus.log((media.replaceVideo ? "Replacing" : "Adding") + " video track:", stream.getVideoTracks()[0]);
					var videoTransceiver = null;
					var transceivers = config.pc.getTransceivers();
					if (transceivers && transceivers.length > 0) {
						for (var t of transceivers) {
							if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
								videoTransceiver = t;
								break;
							}
						}
					}
					if (videoTransceiver && videoTransceiver.sender) {
						videoTransceiver.sender.replaceTrack(stream.getVideoTracks()[0]);
					} else {
						config.pc.addTrack(stream.getVideoTracks()[0], stream);
					}
				} else {
					//Janus.log((media.replaceVideo ? "Replacing" : "Adding") + " video track:", stream.getVideoTracks()[0]);
					config.pc.addTrack(stream.getVideoTracks()[0], stream);
				}
			}
		}
		// If we still need to create a PeerConnection, let's do that
		if (!config.pc) {
			var pc_config = { "iceServers": iceServers, "iceTransportPolicy": iceTransportPolicy, "bundlePolicy": bundlePolicy };
			if (Janus.webRTCAdapter.browserDetails.browser === "chrome") {
				// For Chrome versions before 72, we force a plan-b semantic, and unified-plan otherwise
				pc_config["sdpSemantics"] = Janus.webRTCAdapter.browserDetails.version < 72 ? "plan-b" : "unified-plan";
			}
			var pc_constraints = {
				"optional": [{ "DtlsSrtpKeyAgreement": true }]
			};
			if (ipv6Support) {
				pc_constraints.optional.push({ "googIPv6": true });
			}
			// Any custom constraint to add?
			if (callbacks.rtcConstraints && typeof callbacks.rtcConstraints === 'object') {
				Janus.debug("Adding custom PeerConnection constraints:", callbacks.rtcConstraints);
				for (var i in callbacks.rtcConstraints) {
					pc_constraints.optional.push(callbacks.rtcConstraints[i]);
				}
			}
			if (Janus.webRTCAdapter.browserDetails.browser === "edge") {
				// This is Edge, enable BUNDLE explicitly
				pc_config.bundlePolicy = "max-bundle";
			}
			// Check if a sender or receiver transform has been provided
			if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"] && (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedStreams || __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedAudioStreams && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedVideoStreams) && (callbacks.senderTransforms || callbacks.receiverTransforms)) {
				config.senderTransforms = callbacks.senderTransforms;
				config.receiverTransforms = callbacks.receiverTransforms;
				pc_config["forceEncodedAudioInsertableStreams"] = true;
				pc_config["forceEncodedVideoInsertableStreams"] = true;
				pc_config["encodedInsertableStreams"] = true;
			}
			//Janus.log("Creating PeerConnection");
			Janus.debug(pc_constraints);
			config.pc = new __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCPeerConnection"](pc_config, pc_constraints);
			Janus.debug(config.pc);
			if (config.pc.getStats) {
				// FIXME
				config.volume = {};
				config.bitrate.value = "0 kbits/sec";
			}
			//Janus.log("Preparing local SDP and gathering candidates (trickle=" + config.trickle + ")");
			config.pc.oniceconnectionstatechange = function (e) {
				if (config.pc) {
					pluginHandle.iceState(config.pc.iceConnectionState);
				}
			};
			config.pc.onicecandidate = function (event) {
				if (!event.candidate || event.candidate.candidate.indexOf('endOfCandidates') > 0) {
					//Janus.log("End of candidates.");
					config.iceDone = true;
					if (config.trickle === true) {
						// Notify end of candidates
						sendTrickleCandidate(handleId, { "completed": true });
					} else {
						// No trickle, time to send the complete SDP (including all candidates)
						sendSDP(handleId, callbacks);
					}
				} else {
					// JSON.stringify doesn't work on some WebRTC objects anymore
					// See https://code.google.com/p/chromium/issues/detail?id=467366
					var candidate = {
						"candidate": event.candidate.candidate,
						"sdpMid": event.candidate.sdpMid,
						"sdpMLineIndex": event.candidate.sdpMLineIndex
					};
					if (config.trickle === true) {
						// Send candidate
						sendTrickleCandidate(handleId, candidate);
					}
				}
			};
			config.pc.ontrack = function (event) {
				//Janus.log("Handling Remote Track");
				Janus.debug(event);
				if (!event.streams) return;
				config.remoteStream = event.streams[0];
				pluginHandle.onremotestream(config.remoteStream);
				if (event.track.onended) return;
				if (config.receiverTransforms) {
					var receiverStreams = null;
					if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedStreams) {
						receiverStreams = event.receiver.createEncodedStreams();
					} else if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createAudioEncodedStreams || __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedVideoStreams) {
						if (event.track.kind === "audio" && config.receiverTransforms["audio"]) {
							receiverStreams = event.receiver.createEncodedAudioStreams();
						} else if (event.track.kind === "video" && config.receiverTransforms["video"]) {
							receiverStreams = event.receiver.createEncodedVideoStreams();
						}
					}
					if (receiverStreams) {
						if (receiverStreams.readableStream && receiverStreams.writableStream) {
							receiverStreams.readableStream.pipeThrough(config.receiverTransforms[event.track.kind]).pipeTo(receiverStreams.writableStream);
						} else if (receiverStreams.readable && receiverStreams.writable) {
							receiverStreams.readable.pipeThrough(config.receiverTransforms[event.track.kind]).pipeTo(receiverStreams.writable);
						}
					}
				}
				//var trackMutedTimeoutId = null;
				//Janus.log("Adding onended callback to track:", event.track);
				// event.track.onended = function(ev) {
				// 	//Janus.log("Remote track removed:", ev);
				// 	if(config.remoteStream) {
				// 		clearTimeout(trackMutedTimeoutId);
				// 		config.remoteStream.removeTrack(ev.target);
				// 		console.log("onended", config.remoteStream)
				// 		pluginHandle.onremotestream(config.remoteStream);
				// 	}
				// };
				// event.track.onmute = function(ev) {
				// 	//Janus.log("Remote track muted:", ev);
				// 	if(config.remoteStream && trackMutedTimeoutId == null) {
				// 		trackMutedTimeoutId = setTimeout(function() {
				// 			//Janus.log("Removing remote track");
				// 			if (config.remoteStream) {
				// 				config.remoteStream.removeTrack(ev.target);
				// 				console.log("onmute", config.remoteStream)
				// 				pluginHandle.onremotestream(config.remoteStream);
				// 			}
				// 			trackMutedTimeoutId = null;
				// 		// Chrome seems to raise mute events only at multiples of 834ms;
				// 		// we set the timeout to three times this value (rounded to 840ms)
				// 		}, 3 * 840);
				// 	}
				// };
				// event.track.onunmute = function(ev) {
				// 	//Janus.log("Remote track flowing again:", ev);
				// 	if(trackMutedTimeoutId != null) {
				// 		clearTimeout(trackMutedTimeoutId);
				// 		trackMutedTimeoutId = null;
				// 	} else {
				// 		try {
				// 			config.remoteStream.addTrack(ev.target);
				// 			console.log("onunmute", config.remoteStream)
				// 			pluginHandle.onremotestream(config.remoteStream);
				// 		} catch(e) {
				// 			Janus.error(e);
				// 		};
				// 	}
				// };
			};
		}
		if (addTracks && stream) {
			//Janus.log('Adding local stream');
			var simulcast2 = callbacks.simulcast2 === true;
			stream.getTracks().forEach(function (track) {
				//Janus.log('Adding local track:', track);
				var sender = null;
				if (!simulcast2 || track.kind === 'audio') {
					sender = config.pc.addTrack(track, stream);
				} else {
					//Janus.log('Enabling rid-based simulcasting:', track);
					var maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
					var tr = config.pc.addTransceiver(track, {
						direction: "sendrecv",
						streams: [stream],
						sendEncodings: callbacks.sendEncodings || [{ rid: "h", active: true, maxBitrate: maxBitrates.high }, { rid: "m", active: true, maxBitrate: maxBitrates.medium, scaleResolutionDownBy: 2 }, { rid: "l", active: true, maxBitrate: maxBitrates.low, scaleResolutionDownBy: 4 }]
					});
					if (tr) sender = tr.sender;
				}
				// Check if insertable streams are involved
				if (sender && config.senderTransforms) {
					var senderStreams = null;
					if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedStreams) {
						senderStreams = sender.createEncodedStreams();
					} else if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createAudioEncodedStreams || __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["RTCRtpSender"].prototype.createEncodedVideoStreams) {
						if (sender.track.kind === "audio" && config.senderTransforms["audio"]) {
							senderStreams = sender.createEncodedAudioStreams();
						} else if (sender.track.kind === "video" && config.senderTransforms["video"]) {
							senderStreams = sender.createEncodedVideoStreams();
						}
					}
					if (senderStreams) {
						if (senderStreams.readableStream && senderStreams.writableStream) {
							senderStreams.readableStream.pipeThrough(config.senderTransforms[sender.track.kind]).pipeTo(senderStreams.writableStream);
						} else if (senderStreams.readable && senderStreams.writable) {
							senderStreams.readable.pipeThrough(config.senderTransforms[sender.track.kind]).pipeTo(senderStreams.writable);
						}
					}
				}
			});
		}
		// Any data channel to create?
		if (isDataEnabled(media) && !config.dataChannel[Janus.dataChanDefaultLabel]) {
			//Janus.log("Creating default data channel");
			createDataChannel(handleId, Janus.dataChanDefaultLabel, null, false);
			config.pc.ondatachannel = function (event) {
				//Janus.log("Data channel created by Janus:", event);
				createDataChannel(handleId, event.channel.label, event.channel.protocol, event.channel);
			};
		}
		// If there's a new local stream, let's notify the application
		if (config.myStream) {
			pluginHandle.onlocalstream(config.myStream);
		}
		// Create offer/answer now
		if (!jsep) {
			createOffer(handleId, media, callbacks);
		} else {
			config.pc.setRemoteDescription(jsep).then(function () {
				//Janus.log("Remote description accepted!");
				config.remoteSdp = jsep.sdp;
				// Any trickle candidate we cached?
				if (config.candidates && config.candidates.length > 0) {
					for (var i = 0; i < config.candidates.length; i++) {
						var candidate = config.candidates[i];
						Janus.debug("Adding remote candidate:", candidate);
						if (!candidate || candidate.completed === true) {
							// end-of-candidates
							config.pc.addIceCandidate(Janus.endOfCandidates);
						} else {
							// New candidate
							config.pc.addIceCandidate(candidate);
						}
					}
					config.candidates = [];
				}
				// Create the answer now
				createAnswer(handleId, media, callbacks);
			}, callbacks.error);
		}
	}

	function prepareWebrtc(handleId, offer, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : webrtcError;
		var jsep = callbacks.jsep;
		if (offer && jsep) {
			Janus.error("Provided a JSEP to a createOffer");
			callbacks.error("Provided a JSEP to a createOffer");
			return;
		} else if (!offer && (!jsep || !jsep.type || !jsep.sdp)) {
			Janus.error("A valid JSEP is required for createAnswer");
			callbacks.error("A valid JSEP is required for createAnswer");
			return;
		}
		/* Check that callbacks.media is a (not null) Object */
		callbacks.media = typeof callbacks.media === 'object' && callbacks.media ? callbacks.media : { audio: true, video: true };
		var media = callbacks.media;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		config.trickle = isTrickleEnabled(callbacks.trickle);
		// Are we updating a session?
		if (!config.pc) {
			// Nope, new PeerConnection
			media.update = false;
			media.keepAudio = false;
			media.keepVideo = false;
		} else {
			//Janus.log("Updating existing media session");
			media.update = true;
			// Check if there's anything to add/remove/replace, or if we
			// can go directly to preparing the new SDP offer or answer
			if (callbacks.stream) {
				// External stream: is this the same as the one we were using before?
				if (callbacks.stream !== config.myStream) {
					//Janus.log("Renegotiation involves a new external stream");
				}
			} else {
				// Check if there are changes on audio
				if (media.addAudio) {
					media.keepAudio = false;
					media.replaceAudio = false;
					media.removeAudio = false;
					media.audioSend = true;
					if (config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {
						Janus.error("Can't add audio stream, there already is one");
						callbacks.error("Can't add audio stream, there already is one");
						return;
					}
				} else if (media.removeAudio) {
					media.keepAudio = false;
					media.replaceAudio = false;
					media.addAudio = false;
					media.audioSend = false;
				} else if (media.replaceAudio) {
					media.keepAudio = false;
					media.addAudio = false;
					media.removeAudio = false;
					media.audioSend = true;
				}
				if (!config.myStream) {
					// No media stream: if we were asked to replace, it's actually an "add"
					if (media.replaceAudio) {
						media.keepAudio = false;
						media.replaceAudio = false;
						media.addAudio = true;
						media.audioSend = true;
					}
					if (isAudioSendEnabled(media)) {
						media.keepAudio = false;
						media.addAudio = true;
					}
				} else {
					if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
						// No audio track: if we were asked to replace, it's actually an "add"
						if (media.replaceAudio) {
							media.keepAudio = false;
							media.replaceAudio = false;
							media.addAudio = true;
							media.audioSend = true;
						}
						if (isAudioSendEnabled(media)) {
							media.keepAudio = false;
							media.addAudio = true;
						}
					} else {
						// We have an audio track: should we keep it as it is?
						if (isAudioSendEnabled(media) && !media.removeAudio && !media.replaceAudio) {
							media.keepAudio = true;
						}
					}
				}
				// Check if there are changes on video
				if (media.addVideo) {
					media.keepVideo = false;
					media.replaceVideo = false;
					media.removeVideo = false;
					media.videoSend = true;
					if (config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {
						Janus.error("Can't add video stream, there already is one");
						callbacks.error("Can't add video stream, there already is one");
						return;
					}
				} else if (media.removeVideo) {
					media.keepVideo = false;
					media.replaceVideo = false;
					media.addVideo = false;
					media.videoSend = false;
				} else if (media.replaceVideo) {
					media.keepVideo = false;
					media.addVideo = false;
					media.removeVideo = false;
					media.videoSend = true;
				}
				if (!config.myStream) {
					// No media stream: if we were asked to replace, it's actually an "add"
					if (media.replaceVideo) {
						media.keepVideo = false;
						media.replaceVideo = false;
						media.addVideo = true;
						media.videoSend = true;
					}
					if (isVideoSendEnabled(media)) {
						media.keepVideo = false;
						media.addVideo = true;
					}
				} else {
					if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
						// No video track: if we were asked to replace, it's actually an "add"
						if (media.replaceVideo) {
							media.keepVideo = false;
							media.replaceVideo = false;
							media.addVideo = true;
							media.videoSend = true;
						}
						if (isVideoSendEnabled(media)) {
							media.keepVideo = false;
							media.addVideo = true;
						}
					} else {
						// We have a video track: should we keep it as it is?
						if (isVideoSendEnabled(media) && !media.removeVideo && !media.replaceVideo) {
							media.keepVideo = true;
						}
					}
				}
				// Data channels can only be added
				if (media.addData) {
					media.data = true;
				}
			}
			// If we're updating and keeping all tracks, let's skip the getUserMedia part
			if (isAudioSendEnabled(media) && media.keepAudio && isVideoSendEnabled(media) && media.keepVideo) {
				pluginHandle.consentDialog(false);
				streamsDone(handleId, jsep, media, callbacks, config.myStream);
				return;
			}
		}
		// If we're updating, check if we need to remove/replace one of the tracks
		if (media.update && (!config.streamExternal || config.streamExternal && (media.replaceAudio || media.replaceVideo))) {
			if (media.removeAudio || media.replaceAudio) {
				if (config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {
					var at = config.myStream.getAudioTracks()[0];
					//Janus.log("Removing audio track:", at);
					config.myStream.removeTrack(at);
					try {
						at.stop();
					} catch (e) {}
				}
				if (config.pc.getSenders() && config.pc.getSenders().length) {
					var ra = true;
					if (media.replaceAudio && Janus.unifiedPlan) {
						// We can use replaceTrack
						ra = false;
					}
					if (ra) {
						for (var asnd of config.pc.getSenders()) {
							if (asnd && asnd.track && asnd.track.kind === "audio") {
								//Janus.log("Removing audio sender:", asnd);
								config.pc.removeTrack(asnd);
							}
						}
					}
				}
			}
			if (media.removeVideo || media.replaceVideo) {
				if (config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {
					var vt = config.myStream.getVideoTracks()[0];
					//Janus.log("Removing video track:", vt);
					config.myStream.removeTrack(vt);
					try {
						vt.stop();
					} catch (e) {}
				}
				if (config.pc.getSenders() && config.pc.getSenders().length) {
					var rv = true;
					if (media.replaceVideo && Janus.unifiedPlan) {
						// We can use replaceTrack
						rv = false;
					}
					if (rv) {
						for (var vsnd of config.pc.getSenders()) {
							if (vsnd && vsnd.track && vsnd.track.kind === "video") {
								//Janus.log("Removing video sender:", vsnd);
								config.pc.removeTrack(vsnd);
							}
						}
					}
				}
			}
		}
		// Was a MediaStream object passed, or do we need to take care of that?
		if (callbacks.stream) {
			var stream = callbacks.stream;
			//Janus.log("MediaStream provided by the application");
			Janus.debug(stream);
			// If this is an update, let's check if we need to release the previous stream
			if (media.update && config.myStream && config.myStream !== callbacks.stream && !config.streamExternal && !media.replaceAudio && !media.replaceVideo) {
				// We're replacing a stream we captured ourselves with an external one
				Janus.stopAllTracks(config.myStream);
				config.myStream = null;
			}
			// Skip the getUserMedia part
			config.streamExternal = true;
			pluginHandle.consentDialog(false);
			streamsDone(handleId, jsep, media, callbacks, stream);
			return;
		}
		if (isAudioSendEnabled(media) || isVideoSendEnabled(media)) {
			if (!Janus.isGetUserMediaAvailable()) {
				callbacks.error("getUserMedia not available");
				return;
			}
			var constraints = { mandatory: {}, optional: [] };
			pluginHandle.consentDialog(true);
			var audioSupport = isAudioSendEnabled(media);
			if (audioSupport && media && typeof media.audio === 'object') audioSupport = media.audio;
			var videoSupport = isVideoSendEnabled(media);
			if (videoSupport && media) {
				var simulcast = callbacks.simulcast === true;
				var simulcast2 = callbacks.simulcast2 === true;
				if ((simulcast || simulcast2) && !jsep && !media.video) media.video = "hires";
				if (media.video && media.video != 'screen' && media.video != 'window') {
					if (typeof media.video === 'object') {
						videoSupport = media.video;
					} else {
						var width = 0;
						var height = 0,
						    maxHeight = 0;
						if (media.video === 'lowres') {
							// Small resolution, 4:3
							height = 240;
							maxHeight = 240;
							width = 320;
						} else if (media.video === 'lowres-16:9') {
							// Small resolution, 16:9
							height = 180;
							maxHeight = 180;
							width = 320;
						} else if (media.video === 'hires' || media.video === 'hires-16:9' || media.video === 'hdres') {
							// High(HD) resolution is only 16:9
							height = 720;
							maxHeight = 720;
							width = 1280;
						} else if (media.video === 'fhdres') {
							// Full HD resolution is only 16:9
							height = 1080;
							maxHeight = 1080;
							width = 1920;
						} else if (media.video === '4kres') {
							// 4K resolution is only 16:9
							height = 2160;
							maxHeight = 2160;
							width = 3840;
						} else if (media.video === 'stdres') {
							// Normal resolution, 4:3
							height = 480;
							maxHeight = 480;
							width = 640;
						} else if (media.video === 'stdres-16:9') {
							// Normal resolution, 16:9
							height = 360;
							maxHeight = 360;
							width = 640;
						} else {
							//Janus.log("Default video setting is stdres 4:3");
							height = 480;
							maxHeight = 480;
							width = 640;
						}
						//Janus.log("Adding media constraint:", media.video);
						videoSupport = {
							'height': { 'ideal': height },
							'width': { 'ideal': width }
						};
						//Janus.log("Adding video constraint:", videoSupport);
					}
				} else if (media.video === 'screen' || media.video === 'window') {
					if (__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"] && __WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getDisplayMedia) {
						// The new experimental getDisplayMedia API is available, let's use that
						// https://groups.google.com/forum/#!topic/discuss-webrtc/Uf0SrR4uxzk
						// https://webrtchacks.com/chrome-screensharing-getdisplaymedia/
						constraints.video = {};
						if (media.screenshareFrameRate) {
							constraints.video.frameRate = media.screenshareFrameRate;
						}
						if (media.screenshareHeight) {
							constraints.video.height = media.screenshareHeight;
						}
						if (media.screenshareWidth) {
							constraints.video.width = media.screenshareWidth;
						}
						constraints.audio = media.captureDesktopAudio;
						__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getDisplayMedia(constraints).then(function (stream) {
							pluginHandle.consentDialog(false);
							if (isAudioSendEnabled(media) && !media.keepAudio) {
								__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia({ audio: true, video: false }).then(function (audioStream) {
									stream.addTrack(audioStream.getAudioTracks()[0]);
									streamsDone(handleId, jsep, media, callbacks, stream);
								});
							} else {
								streamsDone(handleId, jsep, media, callbacks, stream);
							}
						}, function (error) {
							pluginHandle.consentDialog(false);
							callbacks.error(error);
						});
						return;
					}
					// We're going to try and use the extension for Chrome 34+, the old approach
					// for older versions of Chrome, or the experimental support in Firefox 33+
					function callbackUserMedia(error, stream) {
						pluginHandle.consentDialog(false);
						if (error) {
							callbacks.error(error);
						} else {
							streamsDone(handleId, jsep, media, callbacks, stream);
						}
					}
					function getScreenMedia(constraints, gsmCallback, useAudio) {
						//Janus.log("Adding media constraint (screen capture)");
						Janus.debug(constraints);
						__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia(constraints).then(function (stream) {
							if (useAudio) {
								__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia({ audio: true, video: false }).then(function (audioStream) {
									stream.addTrack(audioStream.getAudioTracks()[0]);
									gsmCallback(null, stream);
								});
							} else {
								gsmCallback(null, stream);
							}
						}).catch(function (error) {
							pluginHandle.consentDialog(false);gsmCallback(error);
						});
					}
					if (Janus.webRTCAdapter.browserDetails.browser === 'chrome') {
						var chromever = Janus.webRTCAdapter.browserDetails.version;
						var maxver = 33;
						if (window.navigator.userAgent.match('Linux')) maxver = 35; // "known" crash in chrome 34 and 35 on linux
						if (chromever >= 26 && chromever <= maxver) {
							// Chrome 26->33 requires some awkward chrome://flags manipulation
							constraints = {
								video: {
									mandatory: {
										googLeakyBucket: true,
										maxWidth: window.screen.width,
										maxHeight: window.screen.height,
										minFrameRate: media.screenshareFrameRate,
										maxFrameRate: media.screenshareFrameRate,
										chromeMediaSource: 'screen'
									}
								},
								audio: isAudioSendEnabled(media) && !media.keepAudio
							};
							getScreenMedia(constraints, callbackUserMedia);
						} else {
							// Chrome 34+ requires an extension
							Janus.extension.getScreen(function (error, sourceId) {
								if (error) {
									pluginHandle.consentDialog(false);
									return callbacks.error(error);
								}
								constraints = {
									audio: false,
									video: {
										mandatory: {
											chromeMediaSource: 'desktop',
											maxWidth: window.screen.width,
											maxHeight: window.screen.height,
											minFrameRate: media.screenshareFrameRate,
											maxFrameRate: media.screenshareFrameRate
										},
										optional: [{ googLeakyBucket: true }, { googTemporalLayeredScreencast: true }]
									}
								};
								constraints.video.mandatory.chromeMediaSourceId = sourceId;
								getScreenMedia(constraints, callbackUserMedia, isAudioSendEnabled(media) && !media.keepAudio);
							});
						}
					} else if (Janus.webRTCAdapter.browserDetails.browser === 'firefox') {
						if (Janus.webRTCAdapter.browserDetails.version >= 33) {
							// Firefox 33+ has experimental support for screen sharing
							constraints = {
								video: {
									mozMediaSource: media.video,
									mediaSource: media.video
								},
								audio: isAudioSendEnabled(media) && !media.keepAudio
							};
							getScreenMedia(constraints, function (err, stream) {
								callbackUserMedia(err, stream);
								// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1045810
								if (!err) {
									var lastTime = stream.currentTime;
									var polly = window.setInterval(function () {
										if (!stream) window.clearInterval(polly);
										if (stream.currentTime == lastTime) {
											window.clearInterval(polly);
											if (stream.onended) {
												stream.onended();
											}
										}
										lastTime = stream.currentTime;
									}, 500);
								}
							});
						} else {
							var error = new Error('NavigatorUserMediaError');
							error.name = 'Your version of Firefox does not support screen sharing, please install Firefox 33 (or more recent versions)';
							pluginHandle.consentDialog(false);
							callbacks.error(error);
							return;
						}
					}
					return;
				}
			}
			// If we got here, we're not screensharing
			if (!media || media.video !== 'screen') {
				// Check whether all media sources are actually available or not
				__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].enumerateDevices().then(function (devices) {
					var audioExist = devices.some(function (device) {
						return device.kind === 'audioinput';
					}),
					    videoExist = isScreenSendEnabled(media) || devices.some(function (device) {
						return device.kind === 'videoinput';
					});

					// Check whether a missing device is really a problem
					var audioSend = isAudioSendEnabled(media);
					var videoSend = isVideoSendEnabled(media);
					var needAudioDevice = isAudioSendRequired(media);
					var needVideoDevice = isVideoSendRequired(media);
					if (audioSend || videoSend || needAudioDevice || needVideoDevice) {
						// We need to send either audio or video
						var haveAudioDevice = audioSend ? audioExist : false;
						var haveVideoDevice = videoSend ? videoExist : false;
						if (!haveAudioDevice && !haveVideoDevice) {
							// FIXME Should we really give up, or just assume recvonly for both?
							pluginHandle.consentDialog(false);
							callbacks.error('No capture device found');
							return false;
						} else if (!haveAudioDevice && needAudioDevice) {
							pluginHandle.consentDialog(false);
							callbacks.error('Audio capture is required, but no capture device found');
							return false;
						} else if (!haveVideoDevice && needVideoDevice) {
							pluginHandle.consentDialog(false);
							callbacks.error('Video capture is required, but no capture device found');
							return false;
						}
					}

					var gumConstraints = {
						audio: audioExist && !media.keepAudio ? audioSupport : false,
						video: videoExist && !media.keepVideo ? videoSupport : false
					};
					Janus.debug("getUserMedia constraints", gumConstraints);
					if (!gumConstraints.audio && !gumConstraints.video) {
						pluginHandle.consentDialog(false);
						streamsDone(handleId, jsep, media, callbacks, stream);
					} else {
						__WEBPACK_IMPORTED_MODULE_0_react_native_webrtc__["mediaDevices"].getUserMedia(gumConstraints).then(function (stream) {
							pluginHandle.consentDialog(false);
							streamsDone(handleId, jsep, media, callbacks, stream);
						}).catch(function (error) {
							pluginHandle.consentDialog(false);
							callbacks.error({ code: error.code, name: error.name, message: error.message });
						});
					}
				}).catch(function (error) {
					pluginHandle.consentDialog(false);
					callbacks.error(error);
				});
			}
		} else {
			// No need to do a getUserMedia, create offer/answer right away
			streamsDone(handleId, jsep, media, callbacks);
		}
	}

	function prepareWebrtcPeer(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : webrtcError;
		callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
		var jsep = callbacks.jsep;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		if (jsep) {
			if (!config.pc) {
				Janus.warn("Wait, no PeerConnection?? if this is an answer, use createAnswer and not handleRemoteJsep");
				callbacks.error("No PeerConnection: if this is an answer, use createAnswer and not handleRemoteJsep");
				return;
			}
			callbacks.customizeSdp(jsep);
			config.pc.setRemoteDescription(jsep).then(function () {
				//Janus.log("Remote description accepted!");
				config.remoteSdp = jsep.sdp;
				// Any trickle candidate we cached?
				if (config.candidates && config.candidates.length > 0) {
					for (var i = 0; i < config.candidates.length; i++) {
						var candidate = config.candidates[i];
						Janus.debug("Adding remote candidate:", candidate);
						if (!candidate || candidate.completed === true) {
							// end-of-candidates
							config.pc.addIceCandidate(Janus.endOfCandidates);
						} else {
							// New candidate
							config.pc.addIceCandidate(candidate);
						}
					}
					config.candidates = [];
				}
				// Done
				callbacks.success();
			}, callbacks.error);
		} else {
			callbacks.error("Invalid JSEP");
		}
	}

	function createOffer(handleId, media, callbacks) {
		callbacks = _extends({}, callbacks) || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		var simulcast = callbacks.simulcast === true;
		if (!simulcast) {
			//Janus.log("Creating offer (iceDone=" + config.iceDone + ")");
		} else {}
			//Janus.log("Creating offer (iceDone=" + config.iceDone + ", simulcast=" + simulcast + ")");

			// https://code.google.com/p/webrtc/issues/detail?id=3508
		var mediaConstraints = {};
		if (Janus.unifiedPlan) {
			// We can use Transceivers
			var audioTransceiver = null,
			    videoTransceiver = null;
			var transceivers = config.pc.getTransceivers();
			if (transceivers && transceivers.length > 0) {
				for (var t of transceivers) {
					if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
						if (!audioTransceiver) {
							audioTransceiver = t;
						}
						continue;
					}
					if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
						if (!videoTransceiver) {
							videoTransceiver = t;
						}
						continue;
					}
				}
			}
			// Handle audio (and related changes, if any)
			var audioSend = isAudioSendEnabled(media);
			var audioRecv = isAudioRecvEnabled(media);
			if (!audioSend && !audioRecv) {
				// Audio disabled: have we removed it?
				if (media.removeAudio && audioTransceiver) {
					if (audioTransceiver.setDirection) {
						audioTransceiver.setDirection("inactive");
					} else {
						audioTransceiver.direction = "inactive";
					}
					//Janus.log("Setting audio transceiver to inactive:", audioTransceiver);
				}
			} else {
				// Take care of audio m-line
				if (audioSend && audioRecv) {
					if (audioTransceiver) {
						if (audioTransceiver.setDirection) {
							audioTransceiver.setDirection("sendrecv");
						} else {
							audioTransceiver.direction = "sendrecv";
						}
						//Janus.log("Setting audio transceiver to sendrecv:", audioTransceiver);
					}
				} else if (audioSend && !audioRecv) {
					if (audioTransceiver) {
						if (audioTransceiver.setDirection) {
							audioTransceiver.setDirection("sendonly");
						} else {
							audioTransceiver.direction = "sendonly";
						}
						//Janus.log("Setting audio transceiver to sendonly:", audioTransceiver);
					}
				} else if (!audioSend && audioRecv) {
					if (audioTransceiver) {
						if (audioTransceiver.setDirection) {
							audioTransceiver.setDirection("recvonly");
						} else {
							audioTransceiver.direction = "recvonly";
						}
						//Janus.log("Setting audio transceiver to recvonly:", audioTransceiver);
					} else {
						// In theory, this is the only case where we might not have a transceiver yet
						audioTransceiver = config.pc.addTransceiver("audio", { direction: "recvonly" });
						//Janus.log("Adding recvonly audio transceiver:", audioTransceiver);
					}
				}
			}
			// Handle video (and related changes, if any)
			var videoSend = isVideoSendEnabled(media);
			var videoRecv = isVideoRecvEnabled(media);
			if (!videoSend && !videoRecv) {
				// Video disabled: have we removed it?
				if (media.removeVideo && videoTransceiver) {
					if (videoTransceiver.setDirection) {
						videoTransceiver.setDirection("inactive");
					} else {
						videoTransceiver.direction = "inactive";
					}
					//Janus.log("Setting video transceiver to inactive:", videoTransceiver);
				}
			} else {
				// Take care of video m-line
				if (videoSend && videoRecv) {
					if (videoTransceiver) {
						if (videoTransceiver.setDirection) {
							videoTransceiver.setDirection("sendrecv");
						} else {
							videoTransceiver.direction = "sendrecv";
						}
						//Janus.log("Setting video transceiver to sendrecv:", videoTransceiver);
					}
				} else if (videoSend && !videoRecv) {
					if (videoTransceiver) {
						if (videoTransceiver.setDirection) {
							videoTransceiver.setDirection("sendonly");
						} else {
							videoTransceiver.direction = "sendonly";
						}
						//Janus.log("Setting video transceiver to sendonly:", videoTransceiver);
					}
				} else if (!videoSend && videoRecv) {
					if (videoTransceiver) {
						if (videoTransceiver.setDirection) {
							videoTransceiver.setDirection("recvonly");
						} else {
							videoTransceiver.direction = "recvonly";
						}
						//Janus.log("Setting video transceiver to recvonly:", videoTransceiver);
					} else {
						// In theory, this is the only case where we might not have a transceiver yet
						videoTransceiver = config.pc.addTransceiver("video", { direction: "recvonly" });
					}
				}
			}
		} else {
			let tempMediaConstraints = _extends({}, mediaConstraints);
			tempMediaConstraints["offerToReceiveAudio"] = isAudioRecvEnabled(media);
			tempMediaConstraints["offerToReceiveVideo"] = isVideoRecvEnabled(media);
			mediaConstraints = tempMediaConstraints;
		}
		var iceRestart = callbacks.iceRestart === true;
		if (iceRestart) {
			let tempMediaConstraints = _extends({}, mediaConstraints);
			tempMediaConstraints["iceRestart"] = true;
			mediaConstraints = tempMediaConstraints;
		}
		Janus.debug(mediaConstraints);
		// Check if this is Firefox and we've been asked to do simulcasting
		var sendVideo = isVideoSendEnabled(media);
		if (sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === "firefox") {
			// FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b
			//Janus.log("Enabling Simulcasting for Firefox (RID)");
			var sender = config.pc.getSenders().find(function (s) {
				return s.track && s.track.kind === "video";
			});
			if (sender) {
				var parameters = sender.getParameters();
				if (!parameters) {
					parameters = {};
				}
				var maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
				parameters.encodings = callbacks.sendEncodings || [{ rid: "h", active: true, maxBitrate: maxBitrates.high }, { rid: "m", active: true, maxBitrate: maxBitrates.medium, scaleResolutionDownBy: 2 }, { rid: "l", active: true, maxBitrate: maxBitrates.low, scaleResolutionDownBy: 4 }];
				sender.setParameters(parameters);
			}
		}
		config.pc.createOffer(mediaConstraints).then(function (offer) {
			Janus.debug(offer);
			// JSON.stringify doesn't work on some WebRTC objects anymore
			// See https://code.google.com/p/chromium/issues/detail?id=467366
			var jsep = {
				"type": offer.type,
				"sdp": offer.sdp
			};
			callbacks.customizeSdp(jsep);
			offer.sdp = jsep.sdp;
			//Janus.log("Setting local description");
			if (sendVideo && simulcast) {
				// This SDP munging only works with Chrome (Safari STP may support it too)
				if (Janus.webRTCAdapter.browserDetails.browser === "chrome" || Janus.webRTCAdapter.browserDetails.browser === "safari") {
					//Janus.log("Enabling Simulcasting for Chrome (SDP munging)");
					offer.sdp = mungeSdpForSimulcasting(offer.sdp);
				} else if (Janus.webRTCAdapter.browserDetails.browser !== "firefox") {
					Janus.warn("simulcast=true, but this is not Chrome nor Firefox, ignoring");
				}
			}
			config.mySdp = {
				type: "offer",
				sdp: offer.sdp
			};
			config.pc.setLocalDescription(offer).catch(callbacks.error);
			config.mediaConstraints = mediaConstraints;
			if (!config.iceDone && !config.trickle) {
				// Don't do anything until we have all candidates
				//Janus.log("Waiting for all candidates...");
				return;
			}
			// If transforms are present, notify Janus that the media is end-to-end encrypted
			if (config.senderTransforms || config.receiverTransforms) {
				let tempOffer = _extends({}, offer);
				tempOffer["e2ee"] = true;
				offer = tempOffer;
			}
			callbacks.success(offer);
		}, callbacks.error);
	}

	function createAnswer(handleId, media, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		callbacks.customizeSdp = typeof callbacks.customizeSdp == "function" ? callbacks.customizeSdp : Janus.noop;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			callbacks.error("Invalid handle");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		var simulcast = callbacks.simulcast === true;
		if (!simulcast) {
			//Janus.log("Creating answer (iceDone=" + config.iceDone + ")");
		} else {
				//Janus.log("Creating answer (iceDone=" + config.iceDone + ", simulcast=" + simulcast + ")");
			}
		var mediaConstraints = null;
		if (Janus.unifiedPlan) {
			// We can use Transceivers
			mediaConstraints = {};
			var audioTransceiver = null,
			    videoTransceiver = null;
			var transceivers = config.pc.getTransceivers();
			if (transceivers && transceivers.length > 0) {
				for (var t of transceivers) {
					if (t.sender && t.sender.track && t.sender.track.kind === "audio" || t.receiver && t.receiver.track && t.receiver.track.kind === "audio") {
						if (!audioTransceiver) audioTransceiver = t;
						continue;
					}
					if (t.sender && t.sender.track && t.sender.track.kind === "video" || t.receiver && t.receiver.track && t.receiver.track.kind === "video") {
						if (!videoTransceiver) videoTransceiver = t;
						continue;
					}
				}
			}
			// Handle audio (and related changes, if any)
			var audioSend = isAudioSendEnabled(media);
			var audioRecv = isAudioRecvEnabled(media);
			if (!audioSend && !audioRecv) {
				// Audio disabled: have we removed it?
				if (media.removeAudio && audioTransceiver) {
					try {
						if (audioTransceiver.setDirection) {
							audioTransceiver.setDirection("inactive");
						} else {
							audioTransceiver.direction = "inactive";
						}
						//Janus.log("Setting audio transceiver to inactive:", audioTransceiver);
					} catch (e) {
						Janus.error(e);
					}
				}
			} else {
				// Take care of audio m-line
				if (audioSend && audioRecv) {
					if (audioTransceiver) {
						try {
							if (audioTransceiver.setDirection) {
								audioTransceiver.setDirection("sendrecv");
							} else {
								audioTransceiver.direction = "sendrecv";
							}
							//Janus.log("Setting audio transceiver to sendrecv:", audioTransceiver);
						} catch (e) {
							Janus.error(e);
						}
					}
				} else if (audioSend && !audioRecv) {
					try {
						if (audioTransceiver) {
							if (audioTransceiver.setDirection) {
								audioTransceiver.setDirection("sendonly");
							} else {
								audioTransceiver.direction = "sendonly";
							}
							//Janus.log("Setting audio transceiver to sendonly:", audioTransceiver);
						}
					} catch (e) {
						Janus.error(e);
					}
				} else if (!audioSend && audioRecv) {
					if (audioTransceiver) {
						try {
							if (audioTransceiver.setDirection) {
								audioTransceiver.setDirection("recvonly");
							} else {
								audioTransceiver.direction = "recvonly";
							}
							//Janus.log("Setting audio transceiver to recvonly:", audioTransceiver);
						} catch (e) {
							Janus.error(e);
						}
					} else {
						// In theory, this is the only case where we might not have a transceiver yet
						audioTransceiver = config.pc.addTransceiver("audio", { direction: "recvonly" });
						//Janus.log("Adding recvonly audio transceiver:", audioTransceiver);
					}
				}
			}
			// Handle video (and related changes, if any)
			var videoSend = isVideoSendEnabled(media);
			var videoRecv = isVideoRecvEnabled(media);
			if (!videoSend && !videoRecv) {
				// Video disabled: have we removed it?
				if (media.removeVideo && videoTransceiver) {
					try {
						if (videoTransceiver.setDirection) {
							videoTransceiver.setDirection("inactive");
						} else {
							videoTransceiver.direction = "inactive";
						}
						//Janus.log("Setting video transceiver to inactive:", videoTransceiver);
					} catch (e) {
						Janus.error(e);
					}
				}
			} else {
				// Take care of video m-line
				if (videoSend && videoRecv) {
					if (videoTransceiver) {
						try {
							if (videoTransceiver.setDirection) {
								videoTransceiver.setDirection("sendrecv");
							} else {
								videoTransceiver.direction = "sendrecv";
							}
							//Janus.log("Setting video transceiver to sendrecv:", videoTransceiver);
						} catch (e) {
							Janus.error(e);
						}
					}
				} else if (videoSend && !videoRecv) {
					if (videoTransceiver) {
						try {
							if (videoTransceiver.setDirection) {
								videoTransceiver.setDirection("sendonly");
							} else {
								videoTransceiver.direction = "sendonly";
							}
							//Janus.log("Setting video transceiver to sendonly:", videoTransceiver);
						} catch (e) {
							Janus.error(e);
						}
					}
				} else if (!videoSend && videoRecv) {
					if (videoTransceiver) {
						try {
							if (videoTransceiver.setDirection) {
								videoTransceiver.setDirection("recvonly");
							} else {
								videoTransceiver.direction = "recvonly";
							}
							//Janus.log("Setting video transceiver to recvonly:", videoTransceiver);
						} catch (e) {
							Janus.error(e);
						}
					} else {
						// In theory, this is the only case where we might not have a transceiver yet
						videoTransceiver = config.pc.addTransceiver("video", { direction: "recvonly" });
					}
				}
			}
		} else {
			if (Janus.webRTCAdapter.browserDetails.browser === "firefox" || Janus.webRTCAdapter.browserDetails.browser === "edge") {
				mediaConstraints = {
					offerToReceiveAudio: isAudioRecvEnabled(media),
					offerToReceiveVideo: isVideoRecvEnabled(media)
				};
			} else {
				mediaConstraints = {
					mandatory: {
						OfferToReceiveAudio: isAudioRecvEnabled(media),
						OfferToReceiveVideo: isVideoRecvEnabled(media)
					}
				};
			}
		}
		Janus.debug(mediaConstraints);
		// Check if this is Firefox and we've been asked to do simulcasting
		var sendVideo = isVideoSendEnabled(media);
		if (sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === "firefox") {
			// FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b
			//Janus.log("Enabling Simulcasting for Firefox (RID)");
			var sender = config.pc.getSenders()[1];
			//Janus.log(sender);
			var parameters = sender.getParameters();
			//Janus.log(parameters);

			var maxBitrates = getMaxBitrates(callbacks.simulcastMaxBitrates);
			sender.setParameters({ encodings: callbacks.sendEncodings || [{ rid: "h", active: true, maxBitrate: maxBitrates.high }, { rid: "m", active: true, maxBitrate: maxBitrates.medium, scaleResolutionDownBy: 2 }, { rid: "l", active: true, maxBitrate: maxBitrates.low, scaleResolutionDownBy: 4 }] });
		}
		config.pc.createAnswer(mediaConstraints).then(function (answer) {
			Janus.debug(answer);
			// JSON.stringify doesn't work on some WebRTC objects anymore
			// See https://code.google.com/p/chromium/issues/detail?id=467366
			var jsep = {
				"type": answer.type,
				"sdp": answer.sdp
			};
			callbacks.customizeSdp(jsep);
			answer.sdp = jsep.sdp;
			//Janus.log("Setting local description");
			if (sendVideo && simulcast) {
				// This SDP munging only works with Chrome
				if (Janus.webRTCAdapter.browserDetails.browser === "chrome") {
					// FIXME Apparently trying to simulcast when answering breaks video in Chrome...
					//~ //Janus.log("Enabling Simulcasting for Chrome (SDP munging)");
					//~ answer.sdp = mungeSdpForSimulcasting(answer.sdp);
					Janus.warn("simulcast=true, but this is an answer, and video breaks in Chrome if we enable it");
				} else if (Janus.webRTCAdapter.browserDetails.browser !== "firefox") {
					Janus.warn("simulcast=true, but this is not Chrome nor Firefox, ignoring");
				}
			}
			config.mySdp = {
				type: "answer",
				sdp: answer.sdp
			};
			config.pc.setLocalDescription(answer).catch(callbacks.error);
			config.mediaConstraints = mediaConstraints;
			if (!config.iceDone && !config.trickle) {
				// Don't do anything until we have all candidates
				//Janus.log("Waiting for all candidates...");
				return;
			}
			// If transforms are present, notify Janus that the media is end-to-end encrypted
			if (config.senderTransforms || config.receiverTransforms) {
				answer["e2ee"] = true;
			}
			callbacks.success(answer);
		}, callbacks.error);
	}

	function sendSDP(handleId, callbacks) {
		callbacks = callbacks || {};
		callbacks.success = typeof callbacks.success == "function" ? callbacks.success : Janus.noop;
		callbacks.error = typeof callbacks.error == "function" ? callbacks.error : Janus.noop;
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle, not sending anything");
			return;
		}
		var config = pluginHandle.webrtcStuff;
		//Janus.log("Sending offer/answer SDP...");
		if (!config.mySdp) {
			Janus.warn("Local SDP instance is invalid, not sending anything...");
			return;
		}
		config.mySdp = {
			"type": config.pc.localDescription.type,
			"sdp": config.pc.localDescription.sdp
		};
		if (config.trickle === false) config.mySdp["trickle"] = false;
		Janus.debug(callbacks);
		config.sdpSent = true;
		callbacks.success(config.mySdp);
	}

	function getVolume(handleId, remote) {
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return 0;
		}
		var stream = remote ? "remote" : "local";
		var config = pluginHandle.webrtcStuff;
		if (!config.volume[stream]) config.volume[stream] = { value: 0 };
		// Start getting the volume, if audioLevel in getStats is supported (apparently
		// they're only available in Chrome/Safari right now: https://webrtc-stats.callstats.io/)
		if (config.pc.getStats && (Janus.webRTCAdapter.browserDetails.browser === "chrome" || Janus.webRTCAdapter.browserDetails.browser === "safari")) {
			if (remote && !config.remoteStream) {
				Janus.warn("Remote stream unavailable");
				return 0;
			} else if (!remote && !config.myStream) {
				Janus.warn("Local stream unavailable");
				return 0;
			}
			if (!config.volume[stream].timer) {
				//Janus.log("Starting " + stream + " volume monitor");
				config.volume[stream].timer = setInterval(function () {
					config.pc.getStats().then(function (stats) {
						stats.forEach(function (res) {
							if (!res || res.kind !== "audio") return;
							if (remote && !res.remoteSource || !remote && res.type !== "media-source") return;
							config.volume[stream].value = res.audioLevel ? res.audioLevel : 0;
						});
					});
				}, 200);
				return 0; // We don't have a volume to return yet
			}
			return config.volume[stream].value;
		} else {
			// audioInputLevel and audioOutputLevel seem only available in Chrome? audioLevel
			// seems to be available on Chrome and Firefox, but they don't seem to work
			Janus.warn("Getting the " + stream + " volume unsupported by browser");
			return 0;
		}
	}

	function isMuted(handleId, video) {
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return true;
		}
		var config = pluginHandle.webrtcStuff;
		if (!config.pc) {
			Janus.warn("Invalid PeerConnection");
			return true;
		}
		if (!config.myStream) {
			Janus.warn("Invalid local MediaStream");
			return true;
		}
		if (video) {
			// Check video track
			if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
				Janus.warn("No video track");
				return true;
			}
			return !config.myStream.getVideoTracks()[0].enabled;
		} else {
			// Check audio track
			if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
				Janus.warn("No audio track");
				return true;
			}
			return !config.myStream.getAudioTracks()[0].enabled;
		}
	}

	function mute(handleId, video, mute) {
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return false;
		}
		var config = pluginHandle.webrtcStuff;
		if (!config.pc) {
			Janus.warn("Invalid PeerConnection");
			return false;
		}
		if (!config.myStream) {
			Janus.warn("Invalid local MediaStream");
			return false;
		}
		if (video) {
			// Mute/unmute video track
			if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {
				Janus.warn("No video track");
				return false;
			}
			// if(mute){
			//Removing the video track when we mute the video
			// let tracks = config.myStream.getVideoTracks();
			// for(var vt of tracks) {
			// 	config.myStream.removeTrack(vt);
			// 	if(vt) {
			// 		vt.stop();
			// 	}
			// }
			config.myStream.getVideoTracks()[0].enabled = !mute;
			return true;
		} else {
			// Mute/unmute audio track
			if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {
				Janus.warn("No audio track");
				return false;
			}
			config.myStream.getAudioTracks()[0].enabled = !mute;
			return true;
		}
	}

	function getBitrate(handleId) {
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle || !pluginHandle.webrtcStuff) {
			Janus.warn("Invalid handle");
			return "Invalid handle";
		}
		var config = pluginHandle.webrtcStuff;
		if (!config.pc) return "Invalid PeerConnection";
		// Start getting the bitrate, if getStats is supported
		if (config.pc.getStats) {
			if (!config.bitrate.timer) {
				//Janus.log("Starting bitrate timer (via getStats)");
				config.bitrate.timer = setInterval(function () {
					config.pc.getStats().then(function (stats) {
						stats.forEach(function (res) {
							if (!res) return;
							var inStats = false;
							// Check if these are statistics on incoming media
							if ((res.mediaType === "video" || res.id.toLowerCase().indexOf("video") > -1) && res.type === "inbound-rtp" && res.id.indexOf("rtcp") < 0) {
								// New stats
								inStats = true;
							} else if (res.type == 'ssrc' && res.bytesReceived && (res.googCodecName === "VP8" || res.googCodecName === "")) {
								// Older Chromer versions
								inStats = true;
							}
							// Parse stats now
							if (inStats) {
								config.bitrate.bsnow = res.bytesReceived;
								config.bitrate.tsnow = res.timestamp;
								if (config.bitrate.bsbefore === null || config.bitrate.tsbefore === null) {
									// Skip this round
									config.bitrate.bsbefore = config.bitrate.bsnow;
									config.bitrate.tsbefore = config.bitrate.tsnow;
								} else {
									// Calculate bitrate
									var timePassed = config.bitrate.tsnow - config.bitrate.tsbefore;
									if (Janus.webRTCAdapter.browserDetails.browser === "safari") timePassed = timePassed / 1000; // Apparently the timestamp is in microseconds, in Safari
									var bitRate = Math.round((config.bitrate.bsnow - config.bitrate.bsbefore) * 8 / timePassed);
									if (Janus.webRTCAdapter.browserDetails.browser === "safari") bitRate = parseInt(bitRate / 1000);
									config.bitrate.value = bitRate + ' kbits/sec';
									//~ //Janus.log("Estimated bitrate is " + config.bitrate.value);
									config.bitrate.bsbefore = config.bitrate.bsnow;
									config.bitrate.tsbefore = config.bitrate.tsnow;
								}
							}
						});
					});
				}, 1000);
				return "0 kbits/sec"; // We don't have a bitrate value yet
			}
			return config.bitrate.value;
		} else {
			Janus.warn("Getting the video bitrate unsupported by browser");
			return "Feature unsupported by browser";
		}
	}

	function webrtcError(error) {
		Janus.error("WebRTC error:", error);
	}

	function cleanupWebrtc(handleId, hangupRequest) {
		//Janus.log("Cleaning WebRTC stuff");
		var pluginHandle = pluginHandles[handleId];
		if (!pluginHandle) {
			// Nothing to clean
			return;
		}
		var config = pluginHandle.webrtcStuff;
		if (config) {
			if (hangupRequest === true) {
				// Send a hangup request (we don't really care about the response)
				var request = { "janus": "hangup", "transaction": Janus.randomString(12) };
				if (pluginHandle.token) request["token"] = pluginHandle.token;
				if (apisecret) request["apisecret"] = apisecret;
				Janus.debug("Sending hangup request (handle=" + handleId + "):");
				Janus.debug(request);
				if (websockets) {
					request["session_id"] = sessionId;
					request["handle_id"] = handleId;
					ws.send(JSON.stringify(request));
				} else {
					Janus.httpAPICall(server + "/" + sessionId + "/" + handleId, {
						verb: 'POST',
						withCredentials: withCredentials,
						body: request
					});
				}
			}
			// Cleanup stack
			config.remoteStream = null;
			if (config.volume) {
				if (config.volume["local"] && config.volume["local"].timer) clearInterval(config.volume["local"].timer);
				if (config.volume["remote"] && config.volume["remote"].timer) clearInterval(config.volume["remote"].timer);
			}
			config.volume = {};
			if (config.bitrate.timer) clearInterval(config.bitrate.timer);
			config.bitrate.timer = null;
			config.bitrate.bsnow = null;
			config.bitrate.bsbefore = null;
			config.bitrate.tsnow = null;
			config.bitrate.tsbefore = null;
			config.bitrate.value = null;
			if (!config.streamExternal && config.myStream) {
				Janus.stopAllTracks(config.myStream);
			}
			config.streamExternal = false;
			config.myStream = null;
			// Close PeerConnection
			try {
				config.pc.close();
			} catch (e) {
				// Do nothing
			}
			config.pc = null;
			config.candidates = null;
			config.mySdp = null;
			config.remoteSdp = null;
			config.iceDone = false;
			config.dataChannel = {};
			config.dtmfSender = null;
			config.senderTransforms = null;
			config.receiverTransforms = null;
		}
		pluginHandle.oncleanup();
	}

	// Helper method to munge an SDP to enable simulcasting (Chrome only)
	function mungeSdpForSimulcasting(sdp) {
		// Let's munge the SDP to add the attributes for enabling simulcasting
		// (based on https://gist.github.com/ggarber/a19b4c33510028b9c657)
		var lines = sdp.split("\r\n");
		var video = false;
		var ssrc = [-1],
		    ssrc_fid = [-1];
		var cname = null,
		    msid = null,
		    mslabel = null,
		    label = null;
		var insertAt = -1;
		for (var i = 0; i < lines.length; i++) {
			var mline = lines[i].match(/m=(\w+) */);
			if (mline) {
				var medium = mline[1];
				if (medium === "video") {
					// New video m-line: make sure it's the first one
					if (ssrc[0] < 0) {
						video = true;
					} else {
						// We're done, let's add the new attributes here
						insertAt = i;
						break;
					}
				} else {
					// New non-video m-line: do we have what we were looking for?
					if (ssrc[0] > -1) {
						// We're done, let's add the new attributes here
						insertAt = i;
						break;
					}
				}
				continue;
			}
			if (!video) continue;
			var sim = lines[i].match(/a=ssrc-group:SIM (\d+) (\d+) (\d+)/);
			if (sim) {
				Janus.warn("The SDP already contains a SIM attribute, munging will be skipped");
				return sdp;
			}
			var fid = lines[i].match(/a=ssrc-group:FID (\d+) (\d+)/);
			if (fid) {
				ssrc[0] = fid[1];
				ssrc_fid[0] = fid[2];
				lines.splice(i, 1);i--;
				continue;
			}
			if (ssrc[0]) {
				var match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)');
				if (match) {
					cname = match[1];
				}
				match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)');
				if (match) {
					msid = match[1];
				}
				match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)');
				if (match) {
					mslabel = match[1];
				}
				match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)');
				if (match) {
					label = match[1];
				}
				if (lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {
					lines.splice(i, 1);i--;
					continue;
				}
				if (lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {
					lines.splice(i, 1);i--;
					continue;
				}
			}
			if (lines[i].length == 0) {
				lines.splice(i, 1);i--;
				continue;
			}
		}
		if (ssrc[0] < 0) {
			// Couldn't find a FID attribute, let's just take the first video SSRC we find
			insertAt = -1;
			video = false;
			for (var i = 0; i < lines.length; i++) {
				var mline = lines[i].match(/m=(\w+) */);
				if (mline) {
					var medium = mline[1];
					if (medium === "video") {
						// New video m-line: make sure it's the first one
						if (ssrc[0] < 0) {
							video = true;
						} else {
							// We're done, let's add the new attributes here
							insertAt = i;
							break;
						}
					} else {
						// New non-video m-line: do we have what we were looking for?
						if (ssrc[0] > -1) {
							// We're done, let's add the new attributes here
							insertAt = i;
							break;
						}
					}
					continue;
				}
				if (!video) continue;
				if (ssrc[0] < 0) {
					var value = lines[i].match(/a=ssrc:(\d+)/);
					if (value) {
						ssrc[0] = value[1];
						lines.splice(i, 1);i--;
						continue;
					}
				} else {
					var match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)');
					if (match) {
						cname = match[1];
					}
					match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)');
					if (match) {
						msid = match[1];
					}
					match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)');
					if (match) {
						mslabel = match[1];
					}
					match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)');
					if (match) {
						label = match[1];
					}
					if (lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {
						lines.splice(i, 1);i--;
						continue;
					}
					if (lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {
						lines.splice(i, 1);i--;
						continue;
					}
				}
				if (lines[i].length === 0) {
					lines.splice(i, 1);i--;
					continue;
				}
			}
		}
		if (ssrc[0] < 0) {
			// Still nothing, let's just return the SDP we were asked to munge
			Janus.warn("Couldn't find the video SSRC, simulcasting NOT enabled");
			return sdp;
		}
		if (insertAt < 0) {
			// Append at the end
			insertAt = lines.length;
		}
		// Generate a couple of SSRCs (for retransmissions too)
		// Note: should we check if there are conflicts, here?
		ssrc[1] = Math.floor(Math.random() * 0xFFFFFFFF);
		ssrc[2] = Math.floor(Math.random() * 0xFFFFFFFF);
		ssrc_fid[1] = Math.floor(Math.random() * 0xFFFFFFFF);
		ssrc_fid[2] = Math.floor(Math.random() * 0xFFFFFFFF);
		// Add attributes to the SDP
		for (var i = 0; i < ssrc.length; i++) {
			if (cname) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' cname:' + cname);
				insertAt++;
			}
			if (msid) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' msid:' + msid);
				insertAt++;
			}
			if (mslabel) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' mslabel:' + mslabel);
				insertAt++;
			}
			if (label) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' label:' + label);
				insertAt++;
			}
			// Add the same info for the retransmission SSRC
			if (cname) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' cname:' + cname);
				insertAt++;
			}
			if (msid) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' msid:' + msid);
				insertAt++;
			}
			if (mslabel) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' mslabel:' + mslabel);
				insertAt++;
			}
			if (label) {
				lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' label:' + label);
				insertAt++;
			}
		}
		lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[2] + ' ' + ssrc_fid[2]);
		lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[1] + ' ' + ssrc_fid[1]);
		lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[0] + ' ' + ssrc_fid[0]);
		lines.splice(insertAt, 0, 'a=ssrc-group:SIM ' + ssrc[0] + ' ' + ssrc[1] + ' ' + ssrc[2]);
		sdp = lines.join("\r\n");
		if (!sdp.endsWith("\r\n")) sdp += "\r\n";
		return sdp;
	}

	// Helper methods to parse a media object
	function isAudioSendEnabled(media) {
		Janus.debug("isAudioSendEnabled:", media);
		if (!media) return true; // Default
		if (media.audio === false) return false; // Generic audio has precedence
		if (media.audioSend === undefined || media.audioSend === null) return true; // Default
		return media.audioSend === true;
	}

	function isAudioSendRequired(media) {
		Janus.debug("isAudioSendRequired:", media);
		if (!media) return false; // Default
		if (media.audio === false || media.audioSend === false) return false; // If we're not asking to capture audio, it's not required
		if (media.failIfNoAudio === undefined || media.failIfNoAudio === null) return false; // Default
		return media.failIfNoAudio === true;
	}

	function isAudioRecvEnabled(media) {
		Janus.debug("isAudioRecvEnabled:", media);
		if (!media) return true; // Default
		if (media.audio === false) return false; // Generic audio has precedence
		if (media.audioRecv === undefined || media.audioRecv === null) return true; // Default
		return media.audioRecv === true;
	}

	function isVideoSendEnabled(media) {
		Janus.debug("isVideoSendEnabled:", media);
		if (!media) return true; // Default
		if (media.video === false) return false; // Generic video has precedence
		if (media.videoSend === undefined || media.videoSend === null) return true; // Default
		return media.videoSend === true;
	}

	function isVideoSendRequired(media) {
		Janus.debug("isVideoSendRequired:", media);
		if (!media) return false; // Default
		if (media.video === false || media.videoSend === false) return false; // If we're not asking to capture video, it's not required
		if (media.failIfNoVideo === undefined || media.failIfNoVideo === null) return false; // Default
		return media.failIfNoVideo === true;
	}

	function isVideoRecvEnabled(media) {
		Janus.debug("isVideoRecvEnabled:", media);
		if (!media) return true; // Default
		if (media.video === false) return false; // Generic video has precedence
		if (media.videoRecv === undefined || media.videoRecv === null) return true; // Default
		return media.videoRecv === true;
	}

	function isScreenSendEnabled(media) {
		Janus.debug("isScreenSendEnabled:", media);
		if (!media) return false;
		if (typeof media.video !== 'object' || typeof media.video.mandatory !== 'object') return false;
		var constraints = media.video.mandatory;
		if (constraints.chromeMediaSource) return constraints.chromeMediaSource === 'desktop' || constraints.chromeMediaSource === 'screen';else if (constraints.mozMediaSource) return constraints.mozMediaSource === 'window' || constraints.mozMediaSource === 'screen';else if (constraints.mediaSource) return constraints.mediaSource === 'window' || constraints.mediaSource === 'screen';
		return false;
	}

	function isDataEnabled(media) {
		Janus.debug("isDataEnabled:", media);
		if (Janus.webRTCAdapter.browserDetails.browser === "edge") {
			Janus.warn("Edge doesn't support data channels yet");
			return false;
		}
		if (media === undefined || media === null) return false; // Default
		return media.data === true;
	}

	function isTrickleEnabled(trickle) {
		Janus.debug("isTrickleEnabled:", trickle);
		return trickle === false ? false : true;
	}
}

/* harmony default export */ __webpack_exports__["a"] = (Janus);

/***/ }),
/* 369 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adapter_factory_js__ = __webpack_require__(370);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





const adapter =
  Object(__WEBPACK_IMPORTED_MODULE_0__adapter_factory_js__["a" /* adapterFactory */])({window: typeof window === 'undefined' ? undefined : window});
/* harmony default export */ __webpack_exports__["a"] = (adapter);


/***/ }),
/* 370 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = adapterFactory;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__ = __webpack_require__(371);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__ = __webpack_require__(374);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__ = __webpack_require__(377);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_shim__ = __webpack_require__(378);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sdp__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sdp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sdp__);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */


// Browser shims.






// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = __WEBPACK_IMPORTED_MODULE_0__utils__["h" /* log */];
  const browserDetails = __WEBPACK_IMPORTED_MODULE_0__utils__["c" /* detectBrowser */](window);

  const adapter = {
    browserDetails,
    commonShim: __WEBPACK_IMPORTED_MODULE_4__common_shim__,
    extractVersion: __WEBPACK_IMPORTED_MODULE_0__utils__["f" /* extractVersion */],
    disableLog: __WEBPACK_IMPORTED_MODULE_0__utils__["d" /* disableLog */],
    disableWarnings: __WEBPACK_IMPORTED_MODULE_0__utils__["e" /* disableWarnings */],
    // Expose sdp as a convenience. For production apps include directly.
    sdp: __WEBPACK_IMPORTED_MODULE_5_sdp__,
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!__WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__ || !__WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimPeerConnection"] ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__;

      // Must be called before shimPeerConnection.
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimAddIceCandidateNullOrEmpty"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimParameterlessSetLocalDescription"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetUserMedia"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimMediaStream"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimPeerConnection"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimOnTrack"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimAddTrackRemoveTrack"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetSendersWithDtmf"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimGetStats"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["shimSenderReceiverGetStats"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_1__chrome_chrome_shim__["fixNegotiationNeeded"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimRTCIceCandidate"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimRTCIceCandidateRelayProtocol"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimConnectionState"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimMaxMessageSize"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimSendThrowTypeError"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["removeExtmapAllowMixed"](window, browserDetails);
      break;
    case 'firefox':
      if (!__WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__ || !__WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimPeerConnection"] ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__;

      // Must be called before shimPeerConnection.
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimAddIceCandidateNullOrEmpty"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimParameterlessSetLocalDescription"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimGetUserMedia"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimPeerConnection"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimOnTrack"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimRemoveStream"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimSenderGetStats"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimReceiverGetStats"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimRTCDataChannel"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimAddTransceiver"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimGetParameters"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimCreateOffer"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_2__firefox_firefox_shim__["shimCreateAnswer"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimRTCIceCandidate"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimConnectionState"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimMaxMessageSize"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimSendThrowTypeError"](window, browserDetails);
      break;
    case 'safari':
      if (!__WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__;

      // Must be called before shimCallbackAPI.
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimAddIceCandidateNullOrEmpty"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimParameterlessSetLocalDescription"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimRTCIceServerUrls"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimCreateOfferLegacy"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimCallbacksAPI"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimLocalStreamsAPI"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimRemoteStreamsAPI"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimTrackEventTransceiver"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimGetUserMedia"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_3__safari_safari_shim__["shimAudioContext"](window, browserDetails);

      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimRTCIceCandidate"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimRTCIceCandidateRelayProtocol"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimMaxMessageSize"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["shimSendThrowTypeError"](window, browserDetails);
      __WEBPACK_IMPORTED_MODULE_4__common_shim__["removeExtmapAllowMixed"](window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}


/***/ }),
/* 371 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimMediaStream"] = shimMediaStream;
/* harmony export (immutable) */ __webpack_exports__["shimOnTrack"] = shimOnTrack;
/* harmony export (immutable) */ __webpack_exports__["shimGetSendersWithDtmf"] = shimGetSendersWithDtmf;
/* harmony export (immutable) */ __webpack_exports__["shimGetStats"] = shimGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimSenderReceiverGetStats"] = shimSenderReceiverGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimAddTrackRemoveTrackWithNative"] = shimAddTrackRemoveTrackWithNative;
/* harmony export (immutable) */ __webpack_exports__["shimAddTrackRemoveTrack"] = shimAddTrackRemoveTrack;
/* harmony export (immutable) */ __webpack_exports__["shimPeerConnection"] = shimPeerConnection;
/* harmony export (immutable) */ __webpack_exports__["fixNegotiationNeeded"] = fixNegotiationNeeded;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getusermedia__ = __webpack_require__(372);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return __WEBPACK_IMPORTED_MODULE_1__getusermedia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__ = __webpack_require__(373);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__["a"]; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        __WEBPACK_IMPORTED_MODULE_0__utils_js__["g" /* filterStats */](result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        __WEBPACK_IMPORTED_MODULE_0__utils_js__["g" /* filterStats */](result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
          'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
    .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
          'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
        this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
          'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
        externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
        internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
        .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
    window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
    'localDescription', {
      get() {
        const description = origLocalDescription.get.apply(this);
        if (description.type === '') {
          return description;
        }
        return replaceInternalStreamId(this, description);
      }
    });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
          'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
      .forEach(function(method) {
        const nativeMethod = window.RTCPeerConnection.prototype[method];
        const methodObj = {[method]() {
          arguments[0] = new ((method === 'addIceCandidate') ?
            window.RTCIceCandidate :
            window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }};
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  __WEBPACK_IMPORTED_MODULE_0__utils_js__["i" /* wrapPeerConnectionEvent */](window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}


/***/ }),
/* 372 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetUserMedia;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(30);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


const logging = __WEBPACK_IMPORTED_MODULE_0__utils_js__["h" /* log */];

function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
            .then(devices => {
              devices = devices.filter(d => d.kind === 'videoinput');
              let dev = devices.find(d => matches.some(match =>
                d.label.toLowerCase().includes(match)));
              if (!dev && devices.length && matches.includes('back')) {
                dev = devices[devices.length - 1]; // more likely the back cam
              }
              if (dev) {
                constraints.video.deviceId = face.exact
                  ? {exact: dev.deviceId}
                  : {ideal: dev.deviceId};
              }
              constraints.video = constraintsToChrome_(constraints.video);
              logging('chrome: ' + JSON.stringify(constraints));
              return func(constraints);
            });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}


/***/ }),
/* 373 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetDisplayMedia;
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


/***/ }),
/* 374 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimOnTrack"] = shimOnTrack;
/* harmony export (immutable) */ __webpack_exports__["shimPeerConnection"] = shimPeerConnection;
/* harmony export (immutable) */ __webpack_exports__["shimSenderGetStats"] = shimSenderGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimReceiverGetStats"] = shimReceiverGetStats;
/* harmony export (immutable) */ __webpack_exports__["shimRemoveStream"] = shimRemoveStream;
/* harmony export (immutable) */ __webpack_exports__["shimRTCDataChannel"] = shimRTCDataChannel;
/* harmony export (immutable) */ __webpack_exports__["shimAddTransceiver"] = shimAddTransceiver;
/* harmony export (immutable) */ __webpack_exports__["shimGetParameters"] = shimGetParameters;
/* harmony export (immutable) */ __webpack_exports__["shimCreateOffer"] = shimCreateOffer;
/* harmony export (immutable) */ __webpack_exports__["shimCreateAnswer"] = shimCreateAnswer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getusermedia__ = __webpack_require__(375);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetUserMedia", function() { return __WEBPACK_IMPORTED_MODULE_1__getusermedia__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__ = __webpack_require__(376);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shimGetDisplayMedia", function() { return __WEBPACK_IMPORTED_MODULE_2__getdisplaymedia__["a"]; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window, browserDetails) {
  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
      .forEach(function(method) {
        const nativeMethod = window.RTCPeerConnection.prototype[method];
        const methodObj = {[method]() {
          arguments[0] = new ((method === 'addIceCandidate') ?
            window.RTCIceCandidate :
            window.RTCSessionDescription)(arguments[0]);
          return nativeMethod.apply(this, arguments);
        }};
        window.RTCPeerConnection.prototype[method] = methodObj[method];
      });
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
      Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  __WEBPACK_IMPORTED_MODULE_0__utils__["i" /* wrapPeerConnectionEvent */](window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        // WebIDL input coercion and validation
        let sendEncodings = arguments[1] && arguments[1].sendEncodings;
        if (sendEncodings === undefined) {
          sendEncodings = [];
        }
        sendEncodings = [...sendEncodings];
        const shouldPerformCheck = sendEncodings.length > 0;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params) ||
              // Avoid being fooled by patched getParameters() below.
              (params.encodings.length === 1 &&
               Object.keys(params.encodings[0]).length === 0)) {
            params.encodings = sendEncodings;
            sender.sendEncodings = sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        const params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
        .then(() => {
          return origCreateOffer.apply(this, arguments);
        })
        .finally(() => {
          this.setParametersPromises = [];
        });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
        .then(() => {
          return origCreateAnswer.apply(this, arguments);
        })
        .finally(() => {
          this.setParametersPromises = [];
        });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}


/***/ }),
/* 375 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetUserMedia;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(30);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */




function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('navigator.getUserMedia',
      'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}


/***/ }),
/* 376 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shimGetDisplayMedia;
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


/***/ }),
/* 377 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimLocalStreamsAPI"] = shimLocalStreamsAPI;
/* harmony export (immutable) */ __webpack_exports__["shimRemoteStreamsAPI"] = shimRemoteStreamsAPI;
/* harmony export (immutable) */ __webpack_exports__["shimCallbacksAPI"] = shimCallbacksAPI;
/* harmony export (immutable) */ __webpack_exports__["shimGetUserMedia"] = shimGetUserMedia;
/* harmony export (immutable) */ __webpack_exports__["shimConstraints"] = shimConstraints;
/* harmony export (immutable) */ __webpack_exports__["shimRTCIceServerUrls"] = shimRTCIceServerUrls;
/* harmony export (immutable) */ __webpack_exports__["shimTrackEventTransceiver"] = shimTrackEventTransceiver;
/* harmony export (immutable) */ __webpack_exports__["shimCreateOfferLegacy"] = shimCreateOfferLegacy;
/* harmony export (immutable) */ __webpack_exports__["shimAudioContext"] = shimAudioContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(30);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
        .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: __WEBPACK_IMPORTED_MODULE_0__utils__["a" /* compactObject */](constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (server.urls === undefined && server.url) {
            __WEBPACK_IMPORTED_MODULE_0__utils__["b" /* deprecated */]('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio', {direction: 'recvonly'});
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video', {direction: 'recvonly'});
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}



/***/ }),
/* 378 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["shimRTCIceCandidate"] = shimRTCIceCandidate;
/* harmony export (immutable) */ __webpack_exports__["shimRTCIceCandidateRelayProtocol"] = shimRTCIceCandidateRelayProtocol;
/* harmony export (immutable) */ __webpack_exports__["shimMaxMessageSize"] = shimMaxMessageSize;
/* harmony export (immutable) */ __webpack_exports__["shimSendThrowTypeError"] = shimSendThrowTypeError;
/* harmony export (immutable) */ __webpack_exports__["shimConnectionState"] = shimConnectionState;
/* harmony export (immutable) */ __webpack_exports__["removeExtmapAllowMixed"] = removeExtmapAllowMixed;
/* harmony export (immutable) */ __webpack_exports__["shimAddIceCandidateNullOrEmpty"] = shimAddIceCandidateNullOrEmpty;
/* harmony export (immutable) */ __webpack_exports__["shimParameterlessSetLocalDescription"] = shimParameterlessSetLocalDescription;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sdp__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_sdp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_sdp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(30);
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substring(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.parseCandidate(args.candidate);
      for (const key in parsedCandidate) {
        if (!(key in nativeCandidate)) {
          Object.defineProperty(nativeCandidate, key,
            {value: parsedCandidate[key]});
        }
      }

      // Override serializer to not serialize the extra attributes.
      nativeCandidate.toJSON = function toJSON() {
        return {
          candidate: nativeCandidate.candidate,
          sdpMid: nativeCandidate.sdpMid,
          sdpMLineIndex: nativeCandidate.sdpMLineIndex,
          usernameFragment: nativeCandidate.usernameFragment,
        };
      };
      return nativeCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  __WEBPACK_IMPORTED_MODULE_1__utils__["i" /* wrapPeerConnectionEvent */](window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimRTCIceCandidateRelayProtocol(window) {
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'relayProtocol' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  __WEBPACK_IMPORTED_MODULE_1__utils__["i" /* wrapPeerConnectionEvent */](window, 'icecandidate', e => {
    if (e.candidate) {
      const parsedCandidate = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.parseCandidate(e.candidate.candidate);
      if (parsedCandidate.type === 'relay') {
        // This is a libwebrtc-specific mapping of local type preference
        // to relayProtocol.
        e.candidate.relayProtocol = {
          0: 'tls',
          1: 'tcp',
          2: 'udp',
        }[parsedCandidate.priority >> 24];
      }
    }
    return e;
  });
}

function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = __WEBPACK_IMPORTED_MODULE_0_sdp___default.a.matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substring(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  __WEBPACK_IMPORTED_MODULE_1__utils__["i" /* wrapPeerConnectionEvent */](window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
          this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
          this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      const sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription &&
          desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp,
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}

function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      // Native support for ignoring exists for Chrome M77+.
      // Safari ignores as well, exact version unknown but works in the same
      // version that also ignores addIceCandidate(null).
      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)
           || (browserDetails.browser === 'firefox'
               && browserDetails.version < 68)
           || (browserDetails.browser === 'safari'))
          && arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      let desc = arguments[0] || {};
      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {
        return nativeSetLocalDescription.apply(this, arguments);
      }
      // The remaining steps should technically happen when SLD comes off the
      // RTCPeerConnection's operations chain (not ahead of going on it), but
      // this is too difficult to shim. Instead, this shim only covers the
      // common case where the operations chain is empty. This is imperfect, but
      // should cover many cases. Rationale: Even if we can't reduce the glare
      // window to zero on imperfect implementations, there's value in tapping
      // into the perfect negotiation pattern that several browsers support.
      desc = {type: desc.type, sdp: desc.sdp};
      if (!desc.type) {
        switch (this.signalingState) {
          case 'stable':
          case 'have-local-offer':
          case 'have-remote-pranswer':
            desc.type = 'offer';
            break;
          default:
            desc.type = 'answer';
            break;
        }
      }
      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {
        return nativeSetLocalDescription.apply(this, [desc]);
      }
      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
      return func.apply(this)
        .then(d => nativeSetLocalDescription.apply(this, [d]));
    };
}


/***/ }),
/* 379 */
/***/ (function(module, exports) {

// migration done (14-12-21)

/* eslint-disable @typescript-eslint/no-empty-function */
// import Push from "push.js";
// import { consoleLog } from "../modules/call/functions";

// export const browserNotify = {
//   timeOut: 8000,
//   isPageHidden: false,
//   init: function () {
//     Push.Permission.request(
//       () => {},
//       () => {}
//     );
//     document.addEventListener(
//       "visibilitychange",
//       () => {
//         browserNotify.isPageHidden = document.hidden;
//       },
//       false
//     );

//     document.addEventListener(
//       "focus",
//       () => {
//         browserNotify.isPageHidden = false;
//       },
//       false
//     );

//     document.addEventListener(
//       "blur",
//       () => {
//         browserNotify.isPageHidden = true;
//       },
//       false
//     );

//     window.addEventListener(
//       "focus",
//       () => {
//         browserNotify.isPageHidden = false;
//       },
//       false
//     );

//     window.addEventListener(
//       "blur",
//       () => {
//         browserNotify.isPageHidden = true;
//       },
//       false
//     );

//     // pagehide - event listener for SAFARI browser.
//     // Need to check the working process this event & then implement
//     // logic for send notification
//     // window.addEventListener("pagehide", event => {
//     //     consoleLog('pagehide --- ', event.persisted);
//     //     if (event.persisted) {
//     //       /* the page isn't being discarded, so it can be reused later */
//     //     }
//     // }, false);
//   },
//   hasPermission: function () {
//     // Check whether user set notification options true or not
//     return Push.Permission.has();
//   },
//   sendNotification: function (title, bodyObj = {}) {
//     consoleLog("sendNotification", { title, bodyObj });
//     const bodyObjData = { ...bodyObj, timeout: browserNotify.timeOut, silent: true };
//     Push.create(title, bodyObjData);
//   },
//   showCallNotification: function (dataObj = {}) {
//     const { title, forceShow, ...bodyObj } = dataObj;
//     consoleLog("showCallNotification", {
//       hasPermission: browserNotify.hasPermission(),
//       isPageHidden: browserNotify.isPageHidden,
//       forceShow,
//       dataObj
//     });
//     if (browserNotify.hasPermission() && (browserNotify.isPageHidden || forceShow)) {
//       browserNotify.sendNotification(title, bodyObj);
//     }
//   },
//   hasPermissionForChat: function () {
//     return browserNotify.isPageHidden && browserNotify.hasPermission();
//   },
//   showChatNotification: function (dataObj = {}) {
//     const { title, forceShow, ...bodyObj } = dataObj;
//     if (browserNotify.hasPermission() && (browserNotify.isPageHidden || forceShow)) {
//       browserNotify.sendNotification(title, bodyObj);
//     }
//   }
// };

/***/ }),
/* 380 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_380__;

/***/ }),
/* 381 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_381__;

/***/ }),
/* 382 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_382__;

/***/ }),
/* 383 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_383__;

/***/ }),
/* 384 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_384__;

/***/ }),
/* 385 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_utils__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__profileutils__ = __webpack_require__(107);
// migration done (14-12-21)







/**
 * Sends Get Friends List Request IQ to server - Uses Roster NS
 * @returns {Object} Success/Error Response
 */
const getFriendsListIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const friendsIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "BA")
    }).c("query", {
      xmlns: Strophe.NS.ROSTER
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(friendsIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__profileutils__["e" /* handleFriendsListIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["d"] = getFriendsListIQ;


/**
 * Sends Get User Profile IQ Request to server - Uses Vcard NS
 * @param {String} userJid
 * @returns {Object} Success/Error Response
 */
const getUserProfileIQ = userJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const profileIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "!A"),
      to: userJid
    }).c("vCard", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_40" /* NS_VCARD */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(profileIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__profileutils__["g" /* handleProfileIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* unused harmony export getUserProfileIQ */


/**
 * Sends Get Last Activity IQ Request to server
 * @param {String} toUserJid
 * @returns {Object} Success/Error Response
 */
const getLastActivityIQ = toUserJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const lastActivityIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "BA"),
      to: toUserJid
    }).c("query", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_35" /* NS_LAST */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(lastActivityIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__profileutils__["f" /* handleLastActivityIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["e"] = getLastActivityIQ;


/**
 * Sends Block User IQ Request to server
 * @param {String} toUserJid
 * @returns {Object} Success/Error Response
 */
const blockUserIQ = toUserJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const blockuserIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "BA")
    }).c("block", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_29" /* NS_BLOCKING */]
    }).c("item", {
      jid: toUserJid
    }).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(blockuserIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["a"] = blockUserIQ;


/**
 * Sends Unblock User IQ Request to server
 * @param {String} toUserJid
 * @returns {Object} Success/Error Response
 */
const unblockUserIQ = toUserJid => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const unblockuserIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "BA")
    }).c("unblock", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_29" /* NS_BLOCKING */]
    }).c("item", {
      jid: toUserJid
    }).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(unblockuserIQ, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])()), () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["g"] = unblockUserIQ;


/**
 * Sends IQ Request to server to Get the list of users which we have blocked
 * @returns {Object} Success/Error Response
 */
const blockedListIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const blockListIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "#A")
    }).c("blocklist", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_29" /* NS_BLOCKING */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(blockListIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__profileutils__["b" /* handleBlockedListIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["b"] = blockedListIQ;


/**
 * Sends IQ Request to server to Get the list of users who are all blocked us
 * @returns {Object} Success/Error Response
 */
const blockedUserListIQ = () => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    const blockUserListIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_62" /* TYPE_GET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "!A")
    }).c("query", {
      xmlns: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_38" /* NS_USER_ACTIVITIES */],
      status: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["n" /* BLOCK_USER */]
    });

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(blockUserListIQ, response => {
      const item = Object(__WEBPACK_IMPORTED_MODULE_4__profileutils__["d" /* handleBlockedUserListIQ */])(response);
      const successRes = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      successRes.data = item;
      resolve(successRes);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["c"] = blockedUserListIQ;


/**
 * Sends IQ Request to Server to Set the User Profile Details
 * @param {String} nickName
 * @param {String} image
 * @param {String} status
 * @param {String} mobileNumber
 * @param {String} email
 * @returns {Object} Success/Error Response
 */
const setUserProfileIQ = async (nickName, image, status, mobileNumber, email) => new Promise(async resolve => {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])() && !Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().connected) {
    resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["b" /* connectionErrorResponse */])());
  } else {
    let profileResponse = {};
    if (image.type) {
      profileResponse = await Object(__WEBPACK_IMPORTED_MODULE_3__modules_utils__["e" /* profileUpdate */])(image);
      if (profileResponse.statusCode !== 200) resolve(profileResponse);
    }
    const fileUrl = profileResponse.imageFileToken || image;

    const userProfileIQ = $iq({
      type: __WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_64" /* TYPE_SET */],
      id: Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["x" /* randomString */])(16, "BA")
    }).c("vCard", {
      xmlns: "vcard-temp"
    }).c("nickName").t(nickName).up().c("image").t(fileUrl).up().c("email").t(email).up().c("mobileNumber").t(mobileNumber).up().c("status").t(status).up();

    await Object(__WEBPACK_IMPORTED_MODULE_1__connection__["b" /* getConnection */])().sendIQ(userProfileIQ, () => {
      const iqSuccessResponse = Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["B" /* successResponse */])();
      iqSuccessResponse.fileToken = fileUrl;
      resolve(iqSuccessResponse);
    }, () => resolve(Object(__WEBPACK_IMPORTED_MODULE_2__helpers_utils__["j" /* errorResponse */])(__WEBPACK_IMPORTED_MODULE_0__helpers_constants__["_49" /* REQUEST_FAILED */])));
  }
});
/* harmony export (immutable) */ __webpack_exports__["f"] = setUserProfileIQ;


/***/ }),
/* 386 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_constants__ = __webpack_require__(6);
// migration done (14-12-21)





/**
 * Enables Carbon Copy
 * @returns {boolean} true
 */
const carbonEnable = () => {
  const carbon = $iq({
    type: __WEBPACK_IMPORTED_MODULE_2__helpers_constants__["_64" /* TYPE_SET */],
    id: Object(__WEBPACK_IMPORTED_MODULE_1__helpers_utils__["x" /* randomString */])(16, "#A")
  }).c("enable", {
    xmlns: __WEBPACK_IMPORTED_MODULE_2__helpers_constants__["_30" /* NS_CARBON */]
  });

  Object(__WEBPACK_IMPORTED_MODULE_0__connection__["b" /* getConnection */])().send(carbon);
  return true;
};
/* harmony export (immutable) */ __webpack_exports__["a"] = carbonEnable;


/***/ }),
/* 387 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// migration done (09-12-21)

// Enpoints

const login = "/login";
/* harmony export (immutable) */ __webpack_exports__["f"] = login;

const mediaUpload = "/media/";
/* harmony export (immutable) */ __webpack_exports__["h"] = mediaUpload;

const mediaDownload = "/media/";
/* harmony export (immutable) */ __webpack_exports__["g"] = mediaDownload;

const forwardUrl = "/media/forward";
/* harmony export (immutable) */ __webpack_exports__["e"] = forwardUrl;

const deleteMedia = "/media/";
/* harmony export (immutable) */ __webpack_exports__["c"] = deleteMedia;

const usersConfig = "/users/config";
/* harmony export (immutable) */ __webpack_exports__["n"] = usersConfig;

const translateUrl = "/chat/device/translate";
/* harmony export (immutable) */ __webpack_exports__["l"] = translateUrl;

const contactList = "/contacts/";
/* harmony export (immutable) */ __webpack_exports__["b"] = contactList;

const validateCall = "/users/calls/validateCall";
/* harmony export (immutable) */ __webpack_exports__["o"] = validateCall;

const register = "/register";
/* harmony export (immutable) */ __webpack_exports__["i"] = register;

const sandboxRegister = "/sandbox/register";
/* harmony export (immutable) */ __webpack_exports__["k"] = sandboxRegister;

const sandboxContactSync = "/contacts/sandbox/syncContacts";
/* harmony export (immutable) */ __webpack_exports__["j"] = sandboxContactSync;

const callLog = "/users/callLogs";
/* harmony export (immutable) */ __webpack_exports__["a"] = callLog;

const delivered = "/users/delivered";
/* harmony export (immutable) */ __webpack_exports__["d"] = delivered;

const userList = "/contacts/userList";
/* harmony export (immutable) */ __webpack_exports__["m"] = userList;

const vcard = "/contacts/vcard";
/* harmony export (immutable) */ __webpack_exports__["p"] = vcard;


/***/ }),
/* 388 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__db_controllers_ConfigCredentialsTable__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__helpers_constants__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_utils__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_app_reconnect__ = __webpack_require__(54);
// migration done (15-12-21)






// import { listenQrServer } from "./service/auth";

/**
 * Initialise the SDK with Configurations
 * @returns {Object} Success or Failure
 */
const initializeSDK = async options => {
  const initializeSDKRes = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["x" /* initializedSDKOrNot */])();

  if (initializeSDKRes.statusCode === 200) {
    Object(__WEBPACK_IMPORTED_MODULE_4__modules_app_reconnect__["a" /* reconnect */])();
    return initializeSDKRes;
  }

  if (options && typeof options === 'object') {
    var _options$xmppSocketHo = options.xmppSocketHost;
    const xmppSocketHost = _options$xmppSocketHo === undefined ? '' : _options$xmppSocketHo;
    var _options$xmppSocketPo = options.xmppSocketPort;
    const xmppSocketPort = _options$xmppSocketPo === undefined ? '' : _options$xmppSocketPo;
    var _options$ssl = options.ssl;
    const ssl = _options$ssl === undefined ? true : _options$ssl;
    var _options$encryptKey = options.encryptKey;
    const encryptKey = _options$encryptKey === undefined ? 'ddc0f15cc2c90fca' : _options$encryptKey;
    var _options$encryptKeyPr = options.encryptKeyProfile;
    const encryptKeyProfile = _options$encryptKeyPr === undefined ? '' : _options$encryptKeyPr;
    var _options$callbackList = options.callbackListeners;
    const callbackListeners = _options$callbackList === undefined ? {} : _options$callbackList,
          apiBaseUrl = options.apiBaseUrl,
          licenseKey = options.licenseKey;
    var _options$signalServer = options.signalServer;
    const signalServer = _options$signalServer === undefined ? '' : _options$signalServer;
    var _options$janusUrl = options.janusUrl;
    const janusUrl = _options$janusUrl === undefined ? '' : _options$janusUrl;
    var _options$isSandbox = options.isSandbox;
    const isSandbox = _options$isSandbox === undefined ? true : _options$isSandbox;
    var _options$isTrialLicen = options.isTrialLicenseKey;
    const isTrialLicenseKey = _options$isTrialLicen === undefined ? true : _options$isTrialLicen;
    var _options$stunTurnServ = options.stunTurnServers;
    const stunTurnServers = _options$stunTurnServ === undefined ? [] : _options$stunTurnServ;
    var _options$maxUsersInca = options.maxUsersIncall;
    const maxUsersIncall = _options$maxUsersInca === undefined ? 8 : _options$maxUsersInca;
    var _options$pingTime = options.pingTime;
    const pingTime = _options$pingTime === undefined ? 60 : _options$pingTime;


    const validateObj = [{
      key: 'apiBaseUrl',
      value: apiBaseUrl,
      rules: __WEBPACK_IMPORTED_MODULE_2__helpers_constants__["_50" /* REQUIRED */]
    }, {
      key: 'licenseKey',
      value: licenseKey,
      rules: __WEBPACK_IMPORTED_MODULE_2__helpers_constants__["_50" /* REQUIRED */]
    }];
    const response = Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["b" /* clientSideValidation */])(validateObj);

    if (response.statusCode === 200) {
      let isTrialLicense = true;
      if (isSandbox === false) {
        isTrialLicense = false;
      }
      if (isTrialLicenseKey === false) {
        isTrialLicense = false;
      }

      const configData = await Object(__WEBPACK_IMPORTED_MODULE_0__db_controllers_ConfigCredentialsTable__["b" /* getConfigCredentialsTable */])('ConfigCredentials');
      var _configData$turns = configData.turns;
      const turns = _configData$turns === undefined ? [] : _configData$turns;
      var _configData$stuns = configData.stuns;
      const stuns = _configData$stuns === undefined ? [] : _configData$stuns;
      var _configData$signalSer = configData.signalServerDomain;
      const signalServerDomain = _configData$signalSer === undefined ? '' : _configData$signalSer;
      var _configData$xmppHost = configData.xmppHost;
      const xmppHost = _configData$xmppHost === undefined ? '' : _configData$xmppHost;
      var _configData$xmppPortW = configData.xmppPortWeb;
      const xmppPortWeb = _configData$xmppPortW === undefined ? '' : _configData$xmppPortW;
      var _configData$iv = configData.iv;
      const iv = _configData$iv === undefined ? '' : _configData$iv;
      var _configData$callRouti = configData.callRoutingServer;
      const callRoutingServer = _configData$callRouti === undefined ? '' : _configData$callRouti;

      let urlsss = [];
      if (turns && turns.length > 0 || stuns && stuns.length > 0) {
        const urls = [];
        if (stuns && stuns.length > 0) {
          stuns.forEach(stun => {
            urls.push({ urls: stun });
          });
        }
        if (turns && turns.length > 0) {
          turns.forEach(turn => {
            urls.push({
              urls: turn.turn,
              username: turn.username,
              credential: turn.password
            });
          });
        }
        urlsss = urls;
        Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["K" /* setStunTurnServerUrl */])(urls);
      }

      const initializeObj = {
        signalServer: signalServer || signalServerDomain,
        host: xmppSocketHost || xmppHost,
        port: xmppSocketPort || xmppPortWeb,
        ssl: ssl || true,
        iv: encryptKey || iv,
        ivProfile: encryptKeyProfile || licenseKey,
        callbacks: callbackListeners,
        newapiBaseUrl: apiBaseUrl,
        license: licenseKey,
        janus: janusUrl || callRoutingServer,
        sandbox: isTrialLicense,
        stunTurnServers: stunTurnServers.length > 0 ? stunTurnServers : urlsss,
        maxUsersIncall: maxUsersIncall,
        pingTime
      };
      return Object(__WEBPACK_IMPORTED_MODULE_1__helpers_common__["w" /* initialize */])(initializeObj);
    }
    return response;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_3__helpers_utils__["j" /* errorResponse */])('Option Params Missing/Invalid');
};
/* harmony export (immutable) */ __webpack_exports__["a"] = initializeSDK;


/**
 * Generates and Appends the QR Code with Socket Information
 * @param {String} divId - Div/Canvas ID where the QR Code has to be Appended
 * @param {String} logoId - Logo Id
 * @param {String} signalServer - Signal Server URL
 * @param {String} callback - Success/Failure Callback when QR Code Scan id Completed
 */
// export const generateQrCode = (divId, logoId, signalServer, callback) => {
//   try {
//     // listenQrServer(divId, logoId, signalServer, callback);
//   } catch (error) {
//     return errorResponse(error.message);
//   }
// };

/***/ }),
/* 389 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_389__;

/***/ }),
/* 390 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_native___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_native__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__strophe_connection__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reconnect__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__react_native_community_netinfo__ = __webpack_require__(391);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__react_native_community_netinfo___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__react_native_community_netinfo__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native_background_timer__ = __webpack_require__(392);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_native_background_timer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_react_native_background_timer__);







let previousStatus = null,
    previousState = '',
    isFirstTimeAppStateChange = true,
    isFirstTimeIntStateChange = true,
    isCheckBackground;
/**
 * Flag to keep track whether or not to keep the connection even when app goes to background
 * Because in some cases app will go to background state but still we need to keep the connection alive
 */
let shouldKeepConnectionWhenAppGoesBackground = false;

/**
 * Function to update the flag to whether or not to keep the connection alive when app state changed to background
 * This should be updated to `true` when app intentionally goes to background. And should be updated back to
 * `false` once the activity is done
 *
 * For example: At the time of opening document picker when user tries to attach a document, the app goes to
 * background state. But in that case we still need to keep the connection to prevent inconsistent behaviour of the app
 * @param {boolean} value - boolean value to update the flag
 */
const setShouldKeepConnectionWhenAppGoesBackground = value => {
  shouldKeepConnectionWhenAppGoesBackground = value;
};
/* harmony export (immutable) */ __webpack_exports__["b"] = setShouldKeepConnectionWhenAppGoesBackground;


const appStateHandler = () => {
  __WEBPACK_IMPORTED_MODULE_0_react_native__["AppState"].addEventListener('change', async nextAppState => {
    console.log('App state changed:', nextAppState);
    const currentState = nextAppState;
    if (currentState !== previousState) {
      Object(__WEBPACK_IMPORTED_MODULE_3__common__["k" /* setAppState */])(nextAppState);
      if (!isFirstTimeAppStateChange) {
        if (nextAppState === 'active') {
          __WEBPACK_IMPORTED_MODULE_5_react_native_background_timer___default.a.clearTimeout(isCheckBackground);
          if (__WEBPACK_IMPORTED_MODULE_0_react_native__["Platform"].OS === 'ios') {
            Object(__WEBPACK_IMPORTED_MODULE_3__common__["g" /* processPendingDownloads */])();
          }
          return Object(__WEBPACK_IMPORTED_MODULE_2__reconnect__["a" /* reconnect */])();
        } else if ((nextAppState === 'background' || nextAppState === 'inactive') && !shouldKeepConnectionWhenAppGoesBackground) {
          // disconnecting the server in setTimeout to finish all the ongoing server requests
          isCheckBackground = __WEBPACK_IMPORTED_MODULE_5_react_native_background_timer___default.a.setTimeout(() => {
            Object(__WEBPACK_IMPORTED_MODULE_1__strophe_connection__["a" /* disconnect */])();
          }, 1000);
        }
      } else isFirstTimeAppStateChange = false;
    }
  });
  __WEBPACK_IMPORTED_MODULE_4__react_native_community_netinfo___default.a.addEventListener(state => {
    const currentStatus = state.isInternetReachable;
    if (currentStatus !== previousStatus) {
      console.log('Connection status:', currentStatus);
      previousStatus = currentStatus;
      Object(__WEBPACK_IMPORTED_MODULE_3__common__["l" /* setNetworkStatus */])(state.isInternetReachable);
      if (!isFirstTimeIntStateChange) {
        if (state.isInternetReachable) {
          console.log('Reconnection from Internet state change');
          Object(__WEBPACK_IMPORTED_MODULE_3__common__["h" /* processPendingUploads */])();
          Object(__WEBPACK_IMPORTED_MODULE_3__common__["g" /* processPendingDownloads */])();
          return Object(__WEBPACK_IMPORTED_MODULE_2__reconnect__["a" /* reconnect */])();
        }
      }
    } else isFirstTimeIntStateChange = false;
  });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = appStateHandler;


/***/ }),
/* 391 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_391__;

/***/ }),
/* 392 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_392__;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* @flow */
/*::

type DotenvParseOptions = {
  debug?: boolean
}

// keys and values from src
type DotenvParseOutput = { [string]: string }

type DotenvConfigOptions = {
  path?: string, // path to .env file
  encoding?: string, // encoding of .env file
  debug?: string // turn on logging for debugging purposes
}

type DotenvConfigOutput = {
  parsed?: DotenvParseOutput,
  error?: Error
}

*/

const fs = __webpack_require__(394)
const path = __webpack_require__(395)

function log (message /*: string */) {
  console.log(`[dotenv][DEBUG] ${message}`)
}

const NEWLINE = '\n'
const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/
const RE_NEWLINES = /\\n/g
const NEWLINES_MATCH = /\n|\r|\r\n/

// Parses src into an Object
function parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {
  const debug = Boolean(options && options.debug)
  const obj = {}

  // convert Buffers before splitting into lines and processing
  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {
    // matching "KEY' and 'VAL' in 'KEY=VAL'
    const keyValueArr = line.match(RE_INI_KEY_VAL)
    // matched?
    if (keyValueArr != null) {
      const key = keyValueArr[1]
      // default undefined or missing values to empty string
      let val = (keyValueArr[2] || '')
      const end = val.length - 1
      const isDoubleQuoted = val[0] === '"' && val[end] === '"'
      const isSingleQuoted = val[0] === "'" && val[end] === "'"

      // if single or double quoted, remove quotes
      if (isSingleQuoted || isDoubleQuoted) {
        val = val.substring(1, end)

        // if double quoted, expand newlines
        if (isDoubleQuoted) {
          val = val.replace(RE_NEWLINES, NEWLINE)
        }
      } else {
        // remove surrounding whitespace
        val = val.trim()
      }

      obj[key] = val
    } else if (debug) {
      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)
    }
  })

  return obj
}

// Populates process.env from .env file
function config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {
  let dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding /*: string */ = 'utf8'
  let debug = false

  if (options) {
    if (options.path != null) {
      dotenvPath = options.path
    }
    if (options.encoding != null) {
      encoding = options.encoding
    }
    if (options.debug != null) {
      debug = true
    }
  }

  try {
    // specifying an encoding returns a string instead of a buffer
    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })

    Object.keys(parsed).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
        process.env[key] = parsed[key]
      } else if (debug) {
        log(`"${key}" is already defined in \`process.env\` and will not be overwritten`)
      }
    })

    return { parsed }
  } catch (e) {
    return { error: e }
  }
}

module.exports.config = config
module.exports.parse = parse

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 394 */
/***/ (function(module, exports) {



/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ })
/******/ ]);
});